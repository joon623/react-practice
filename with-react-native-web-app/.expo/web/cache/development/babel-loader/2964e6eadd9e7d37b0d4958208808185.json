{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { useEffect, useState } from 'react';\nimport { useTheme } from '../hooks/useTheme';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\nimport { isResponsiveAnyProp } from '../theme/tools';\nexport function useResponsiveSSRProps(incomingProps) {\n  var _useState = useState(false),\n      modified = _useState[0],\n      setModified = _useState[1];\n\n  var theme = useTheme();\n  var responsivePropsExists = isResponsiveAnyProp(incomingProps, theme);\n  var isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n  var modifiedProps = incomingProps;\n\n  if (responsivePropsExists && isSSR && !modified) {\n    modifiedProps = _objectSpread(_objectSpread({}, modifiedProps), {}, {\n      key: Math.random()\n    });\n  }\n\n  useEffect(function () {\n    if (responsivePropsExists && isSSR) {\n      setModified(true);\n    }\n  }, [responsivePropsExists, isSSR]);\n  return modifiedProps;\n}","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/hooks/useResponsiveSSRProps.ts"],"names":["setModified","useState","theme","useTheme","responsivePropsExists","isResponsiveAnyProp","isSSR","useNativeBaseConfig","modifiedProps","key","Math","useEffect"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA,EAAA,QAAA,QAAA,OAAA;AACA,SAAA,QAAA,QAAA,mBAAA;AACA,SAAA,mBAAA,QAAA,2BAAA;AACA,SAAA,mBAAA,QAAA,gBAAA;AAEA,OAAO,SAAA,qBAAA,CAAA,aAAA,EAAmD;EACxD,gBAAgCC,QAAQ,CAAxC,KAAwC,CAAxC;EAAA,IAAM,QAAN,aAAM,CAAN;EAAA,IAAiBD,WAAjB,aAAM,CAAN;;EACA,IAAME,KAAK,GAAGC,QAAd,EAAA;EAEA,IAAMC,qBAAqB,GAAGC,mBAAmB,CAAA,aAAA,EAAjD,KAAiD,CAAjD;EACA,IAAMC,KAAK,GAAGC,mBAAmB,CAAnBA,4BAAmB,CAAnBA,CAAd,KAAA;EAEA,IAAIC,aAAa,GAAjB,aAAA;;EACA,IAAIJ,qBAAqB,IAArBA,KAAAA,IAAkC,CAAtC,QAAA,EAAiD;IAC/CI,aAAa,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,aAAA,CAAA,EAAA,EAAA,EAAA;MAAuBC,GAAG,EAAEC,IAAI,CAAJA,MAAAA;IAA5B,CAAA,CAAbF;EACD;;EACDG,SAAS,CAAC,YAAW;IACnB,IAAIP,qBAAqB,IAAzB,KAAA,EAAoC;MAClCJ,WAAW,CAAXA,IAAW,CAAXA;IACD;EAHM,CAAA,EAIN,CAAA,qBAAA,EAJHW,KAIG,CAJM,CAATA;EAMA,OAAA,aAAA;AACD","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useTheme } from '../hooks/useTheme';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\nimport { isResponsiveAnyProp } from '../theme/tools';\n\nexport function useResponsiveSSRProps(incomingProps: any) {\n  const [modified, setModified] = useState(false);\n  const theme = useTheme();\n\n  const responsivePropsExists = isResponsiveAnyProp(incomingProps, theme);\n  const isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n\n  let modifiedProps = incomingProps;\n  if (responsivePropsExists && isSSR && !modified) {\n    modifiedProps = { ...modifiedProps, key: Math.random() };\n  }\n  useEffect((): any => {\n    if (responsivePropsExists && isSSR) {\n      setModified(true);\n    }\n  }, [responsivePropsExists, isSSR]);\n\n  return modifiedProps;\n}\n"]},"metadata":{},"sourceType":"module"}