{"ast":null,"code":"import _slicedToArray from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { useTypeaheadReducer } from './reducer';\nimport React, { useEffect } from 'react';\nimport * as stateChangeTypes from './types';\nimport Keyboard from \"react-native-web/dist/cjs/exports/Keyboard\";\nimport { dropdownDefaultStateValues, getDefaultValue } from './utils';\n\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined;\n}\n\nexport function useTypeahead(props) {\n  _s();\n\n  var defaultValues = _objectSpread({}, dropdownDefaultStateValues);\n\n  defaultValues.isOpen = getDefaultValue(props, 'isOpen');\n\n  var _React$useReducer = React.useReducer(useTypeaheadReducer, defaultValues),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  var dispatchWithProps = function dispatchWithProps(object) {\n    dispatch(_objectSpread(_objectSpread({}, object), {}, {\n      props: props\n    }));\n  };\n\n  var inputValue = state.inputValue,\n      isOpen = state.isOpen;\n  var items = props.items,\n      onInputValueChange = props.onInputValueChange,\n      onSelectedItemChange = props.onSelectedItemChange,\n      selectedItem = props.selectedItem,\n      itemToString = props.itemToString;\n  var isControlled = isControlledProp(props, 'selectedItem');\n  useEffect(function () {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem)\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n\n  var onChangeText = function onChangeText(text) {\n    onInputValueChange === null || onInputValueChange === void 0 ? void 0 : onInputValueChange({\n      inputValue: text\n    });\n    dispatchWithProps({\n      type: stateChangeTypes.InputChange,\n      inputValue: text\n    });\n  };\n\n  var handleItemSelect = function handleItemSelect(item, index) {\n    onSelectedItemChange === null || onSelectedItemChange === void 0 ? void 0 : onSelectedItemChange(item);\n    dispatchWithProps({\n      type: stateChangeTypes.ItemClick,\n      index: index\n    });\n    Keyboard.dismiss();\n  };\n\n  var getMenuItemProps = function getMenuItemProps(item, index) {\n    return {\n      onPress: function onPress() {\n        return handleItemSelect(item, index);\n      },\n      accessible: true,\n      accessiblityRole: 'menuitem'\n    };\n  };\n\n  var getMenuProps = function getMenuProps() {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu',\n      accessibilityHint: \"Showing \".concat(items.length, \" records\")\n    };\n  };\n\n  var getToggleButtonProps = function getToggleButtonProps() {\n    return {\n      onPress: function onPress() {\n        dispatchWithProps({\n          type: stateChangeTypes.ToggleButtonClick\n        });\n      }\n    };\n  };\n\n  var getInputProps = function getInputProps(propInputVal, propOnchangeText) {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox',\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen\n      }\n    };\n  };\n\n  return {\n    getInputProps: getInputProps,\n    getMenuItemProps: getMenuItemProps,\n    getMenuProps: getMenuProps,\n    getToggleButtonProps: getToggleButtonProps,\n    isOpen: isOpen\n  };\n}\n\n_s(useTypeahead, \"W/0g4fM6aE87kNZ0Uhdp9P2sXlM=\");\n\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/module/components/composites/Typeahead/useTypeahead/useTypeahead.js"],"names":["props","useTypeahead","defaultValues","getDefaultValue","state","dispatch","React","dispatchWithProps","inputValue","isOpen","items","onInputValueChange","onSelectedItemChange","selectedItem","itemToString","isControlled","isControlledProp","useEffect","type","stateChangeTypes","onChangeText","text","handleItemSelect","index","Keyboard","getMenuItemProps","onPress","accessible","accessiblityRole","getMenuProps","accessibilityRole","accessibilityHint","getToggleButtonProps","ToggleButtonClick","getInputProps","propInputVal","value","accessibilityLabel","accessibilityState","expanded"],"mappings":"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","sourcesContent":["import { useTypeaheadReducer } from './reducer';\nimport React, { useEffect } from 'react';\nimport * as stateChangeTypes from './types';\nimport { Keyboard } from 'react-native';\nimport { dropdownDefaultStateValues, getDefaultValue } from './utils';\n\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined;\n}\n\nexport function useTypeahead(props) {\n  let defaultValues = { ...dropdownDefaultStateValues\n  };\n  defaultValues.isOpen = getDefaultValue(props, 'isOpen');\n  const [state, dispatch] = React.useReducer(useTypeaheadReducer, defaultValues);\n\n  const dispatchWithProps = object => {\n    dispatch({ ...object,\n      props\n    });\n  };\n\n  const {\n    inputValue,\n    isOpen\n  } = state;\n  const {\n    items,\n    onInputValueChange,\n    onSelectedItemChange,\n    selectedItem,\n    itemToString\n  } = props;\n  const isControlled = isControlledProp(props, 'selectedItem');\n  useEffect(() => {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem)\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n\n  const onChangeText = text => {\n    onInputValueChange === null || onInputValueChange === void 0 ? void 0 : onInputValueChange({\n      inputValue: text\n    });\n    dispatchWithProps({\n      type: stateChangeTypes.InputChange,\n      inputValue: text\n    });\n  };\n\n  const handleItemSelect = (item, index) => {\n    onSelectedItemChange === null || onSelectedItemChange === void 0 ? void 0 : onSelectedItemChange(item);\n    dispatchWithProps({\n      type: stateChangeTypes.ItemClick,\n      index\n    });\n    Keyboard.dismiss();\n  };\n\n  const getMenuItemProps = (item, index) => {\n    return {\n      onPress: () => handleItemSelect(item, index),\n      accessible: true,\n      accessiblityRole: 'menuitem'\n    };\n  };\n\n  const getMenuProps = () => {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu',\n      accessibilityHint: \"Showing \".concat(items.length, \" records\")\n    };\n  };\n\n  const getToggleButtonProps = () => {\n    return {\n      onPress: () => {\n        dispatchWithProps({\n          type: stateChangeTypes.ToggleButtonClick\n        });\n      }\n    };\n  };\n\n  const getInputProps = (propInputVal, propOnchangeText) => {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox',\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen\n      }\n    };\n  };\n\n  return {\n    getInputProps,\n    getMenuItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    isOpen\n  };\n}\n//# sourceMappingURL=useTypeahead.js.map"]},"metadata":{},"sourceType":"module"}