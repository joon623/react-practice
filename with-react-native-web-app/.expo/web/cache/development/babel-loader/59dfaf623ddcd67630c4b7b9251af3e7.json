{"ast":null,"code":"import _defineProperty from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as stateChangeTypes from './types';\nimport { getDefaultValue } from './utils';\nexport function useTypeaheadReducer(state, action) {\n  var type = action.type,\n      props = action.props;\n  var changes;\n\n  switch (type) {\n    case stateChangeTypes.ItemClick:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: props.items[action.index],\n        inputValue: props.itemToString(props.items[action.index])\n      };\n      break;\n\n    case stateChangeTypes.InputBlur:\n      if (state.isOpen) {\n        changes = {\n          isOpen: false\n        };\n      }\n\n      break;\n\n    case stateChangeTypes.InputChange:\n      changes = {\n        isOpen: true,\n        inputValue: action.inputValue\n      };\n      break;\n\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen\n      };\n      break;\n\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true\n      };\n      break;\n\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false\n      };\n      break;\n\n    case stateChangeTypes.FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n        inputValue: props.itemToString(action.selectedItem)\n      };\n      break;\n\n    case stateChangeTypes.ControlledPropUpdatedSelectedItem:\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue\n      };\n      break;\n\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: getDefaultValue(props, 'selectedItem'),\n        inputValue: getDefaultValue(props, 'inputValue')\n      };\n      break;\n\n    default:\n      throw new Error('Reducer called without proper action type.');\n  }\n\n  return _objectSpread(_objectSpread({}, state), changes);\n}\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/module/components/composites/Typeahead/useTypeahead/reducer.js"],"names":["type","props","action","stateChangeTypes","changes","isOpen","getDefaultValue","selectedItem","inputValue","state"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,gBAAA,MAAA,SAAA;AACA,SAAA,eAAA,QAAA,SAAA;AACA,OAAO,SAAA,mBAAA,CAAA,KAAA,EAAA,MAAA,EAA4C;EACjD,IACEA,IADF,GAGIE,MAHJ,CAAA,IAAA;EAAA,IAEED,KAFF,GAGIC,MAHJ,CAAA,KAAA;EAIA,IAAA,OAAA;;EAEA,QAAA,IAAA;IACE,KAAKC,gBAAgB,CAArB,SAAA;MACEC,OAAO,GAAG;QACRC,MAAM,EAAEC,eAAe,CAAA,KAAA,EADf,QACe,CADf;QAERC,YAAY,EAAEN,KAAK,CAALA,KAAAA,CAAYC,MAAM,CAFxB,KAEMD,CAFN;QAGRO,UAAU,EAAEP,KAAK,CAALA,YAAAA,CAAmBA,KAAK,CAALA,KAAAA,CAAYC,MAAM,CAArCD,KAAmBA,CAAnBA;MAHJ,CAAVG;MAKA;;IAEF,KAAKD,gBAAgB,CAArB,SAAA;MACE,IAAIM,KAAK,CAAT,MAAA,EAAkB;QAChBL,OAAO,GAAG;UACRC,MAAM,EAAE;QADA,CAAVD;MAGD;;MAED;;IAEF,KAAKD,gBAAgB,CAArB,WAAA;MACEC,OAAO,GAAG;QACRC,MAAM,EADE,IAAA;QAERG,UAAU,EAAEN,MAAM,CAACM;MAFX,CAAVJ;MAIA;;IAEF,KAAKD,gBAAgB,CAArB,iBAAA;IACA,KAAKA,gBAAgB,CAArB,kBAAA;MACEC,OAAO,GAAG;QACRC,MAAM,EAAE,CAACI,KAAK,CAACJ;MADP,CAAVD;MAGA;;IAEF,KAAKD,gBAAgB,CAArB,gBAAA;MACEC,OAAO,GAAG;QACRC,MAAM,EAAE;MADA,CAAVD;MAGA;;IAEF,KAAKD,gBAAgB,CAArB,iBAAA;MACEC,OAAO,GAAG;QACRC,MAAM,EAAE;MADA,CAAVD;MAGA;;IAEF,KAAKD,gBAAgB,CAArB,kBAAA;MACEC,OAAO,GAAG;QACRG,YAAY,EAAEL,MAAM,CADZ,YAAA;QAERM,UAAU,EAAEP,KAAK,CAALA,YAAAA,CAAmBC,MAAM,CAAzBD,YAAAA;MAFJ,CAAVG;MAIA;;IAEF,KAAKD,gBAAgB,CAArB,iCAAA;IACA,KAAKA,gBAAgB,CAArB,qBAAA;MACEC,OAAO,GAAG;QACRI,UAAU,EAAEN,MAAM,CAACM;MADX,CAAVJ;MAGA;;IAEF,KAAKD,gBAAgB,CAArB,aAAA;MACEC,OAAO,GAAG;QACRC,MAAM,EAAEC,eAAe,CAAA,KAAA,EADf,QACe,CADf;QAERC,YAAY,EAAED,eAAe,CAAA,KAAA,EAFrB,cAEqB,CAFrB;QAGRE,UAAU,EAAEF,eAAe,CAAA,KAAA,EAAA,YAAA;MAHnB,CAAVF;MAKA;;IAEF;MACE,MAAM,IAAA,KAAA,CAAN,4CAAM,CAAN;EAnEJ;;EAsEA,OAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,OAAA,CAAA;AAGD","sourcesContent":["import * as stateChangeTypes from './types';\nimport { getDefaultValue } from './utils';\nexport function useTypeaheadReducer(state, action) {\n  const {\n    type,\n    props\n  } = action;\n  let changes;\n\n  switch (type) {\n    case stateChangeTypes.ItemClick:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: props.items[action.index],\n        inputValue: props.itemToString(props.items[action.index])\n      };\n      break;\n\n    case stateChangeTypes.InputBlur:\n      if (state.isOpen) {\n        changes = {\n          isOpen: false\n        };\n      }\n\n      break;\n\n    case stateChangeTypes.InputChange:\n      changes = {\n        isOpen: true,\n        inputValue: action.inputValue\n      };\n      break;\n\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen\n      };\n      break;\n\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true\n      };\n      break;\n\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false\n      };\n      break;\n\n    case stateChangeTypes.FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n        inputValue: props.itemToString(action.selectedItem)\n      };\n      break;\n\n    case stateChangeTypes.ControlledPropUpdatedSelectedItem:\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue\n      };\n      break;\n\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: getDefaultValue(props, 'selectedItem'),\n        inputValue: getDefaultValue(props, 'inputValue')\n      };\n      break;\n\n    default:\n      throw new Error('Reducer called without proper action type.');\n  }\n\n  return { ...state,\n    ...changes\n  };\n}\n//# sourceMappingURL=reducer.js.map"]},"metadata":{},"sourceType":"module"}