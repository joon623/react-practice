{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\n\n\nvar EventSubscriptionVendor = /*#__PURE__*/function () {\n  function EventSubscriptionVendor() {\n    this._subscriptionsForType = {};\n    this._currentSubscription = null;\n  }\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n\n\n  var _proto = EventSubscriptionVendor.prototype;\n\n  _proto.addSubscription = function addSubscription(eventType, subscription) {\n    (0, _invariant[\"default\"])(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n\n    var key = this._subscriptionsForType[eventType].length;\n\n    this._subscriptionsForType[eventType].push(subscription);\n\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n  ;\n\n  _proto.removeAllSubscriptions = function removeAllSubscriptions(eventType) {\n    if (eventType === undefined) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n  ;\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n  ;\n\n  _proto.getSubscriptionsForType = function getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  };\n\n  return EventSubscriptionVendor;\n}();\n\nvar _default = EventSubscriptionVendor;\nexports[\"default\"] = _default;\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/react-native-web/dist/cjs/vendor/react-native/emitter/EventSubscriptionVendor.js"],"names":["exports","_invariant","_interopRequireDefault","require","obj","default","EventSubscriptionVendor","_proto","subscription","key","eventType","subscriptionsForType","_default","module"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,OAAO,CAAPA,UAAAA,GAAAA,IAAAA;AACAA,OAAAA,WAAAA,GAAkB,KAAlBA,CAAAA;;AAEA,IAAIC,UAAU,GAAGC,sBAAsB,CAACC,OAAO,CAA/C,oBAA+C,CAAR,CAAvC;;AAEA,SAAA,sBAAA,CAAA,GAAA,EAAqC;EAAE,OAAOC,GAAG,IAAIA,GAAG,CAAVA,UAAAA,GAAAA,GAAAA,GAA8B;IAAEC,WAASD;EAAX,CAArC;AAAwD;AAE/F;AACA;AACA;AACA;;;AACA,IAAIE,uBAAuB,GAC3B,aACA,YAAY;EACV,SAAA,uBAAA,GAAmC;IACjC,KAAA,qBAAA,GAAA,EAAA;IACA,KAAA,oBAAA,GAAA,IAAA;EACD;EACD;AACF;AACA;AACA;AACA;AACA;;;EAGE,IAAIC,MAAM,GAAGD,uBAAuB,CAApC,SAAA;;EAEAC,MAAM,CAANA,eAAAA,GAAyB,SAAA,eAAA,CAAA,SAAA,EAAA,YAAA,EAAkD;IACzE,CAAC,GAAGN,UAAJ,WAAA,EAAwBO,YAAY,CAAZA,UAAAA,KAAxB,IAAA,EAAA,wDAAA;;IAEA,IAAI,CAAC,KAAA,qBAAA,CAAL,SAAK,CAAL,EAA4C;MAC1C,KAAA,qBAAA,CAAA,SAAA,IAAA,EAAA;IACD;;IAED,IAAIC,GAAG,GAAG,KAAA,qBAAA,CAAA,SAAA,EAAV,MAAA;;IAEA,KAAA,qBAAA,CAAA,SAAA,EAAA,IAAA,CAAA,YAAA;;IAEAD,YAAY,CAAZA,SAAAA,GAAAA,SAAAA;IACAA,YAAY,CAAZA,GAAAA,GAAAA,GAAAA;IACA,OAAA,YAAA;EACD;EACD;AACF;AACA;AACA;AACA;AACA;EApBED;;EAuBAA,MAAM,CAANA,sBAAAA,GAAgC,SAAA,sBAAA,CAAA,SAAA,EAA2C;IACzE,IAAIG,SAAS,KAAb,SAAA,EAA6B;MAC3B,KAAA,qBAAA,GAAA,EAAA;IADF,CAAA,MAEO;MACL,OAAO,KAAA,qBAAA,CAAP,SAAO,CAAP;IACD;EACF;EACD;AACF;AACA;AACA;AACA;AACA;EAZEH;;EAeAA,MAAM,CAANA,kBAAAA,GAA4B,SAAA,kBAAA,CAAA,YAAA,EAA0C;IACpE,IAAIG,SAAS,GAAGF,YAAY,CAA5B,SAAA;IACA,IAAIC,GAAG,GAAGD,YAAY,CAAtB,GAAA;IACA,IAAIG,oBAAoB,GAAG,KAAA,qBAAA,CAA3B,SAA2B,CAA3B;;IAEA,IAAA,oBAAA,EAA0B;MACxB,OAAOA,oBAAoB,CAA3B,GAA2B,CAA3B;IACD;EACF;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EApBEJ;;EAuBAA,MAAM,CAANA,uBAAAA,GAAiC,SAAA,uBAAA,CAAA,SAAA,EAA4C;IAC3E,OAAO,KAAA,qBAAA,CAAP,SAAO,CAAP;EADFA,CAAAA;;EAIA,OAAA,uBAAA;AAlFF,CAEA,EAFA;;AAqFA,IAAIK,QAAQ,GAAZ,uBAAA;AACAZ,OAAAA,WAAAA,GAAAA,QAAAA;AACAa,MAAM,CAANA,OAAAA,GAAiBb,OAAjBa,WAAAA","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nvar EventSubscriptionVendor =\n/*#__PURE__*/\nfunction () {\n  function EventSubscriptionVendor() {\n    this._subscriptionsForType = {};\n    this._currentSubscription = null;\n  }\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n\n\n  var _proto = EventSubscriptionVendor.prototype;\n\n  _proto.addSubscription = function addSubscription(eventType, subscription) {\n    (0, _invariant.default)(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n\n    var key = this._subscriptionsForType[eventType].length;\n\n    this._subscriptionsForType[eventType].push(subscription);\n\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n  ;\n\n  _proto.removeAllSubscriptions = function removeAllSubscriptions(eventType) {\n    if (eventType === undefined) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n  ;\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n  ;\n\n  _proto.getSubscriptionsForType = function getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  };\n\n  return EventSubscriptionVendor;\n}();\n\nvar _default = EventSubscriptionVendor;\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}