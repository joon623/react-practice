{"ast":null,"code":"import _defineProperty from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _s = $RefreshSig$();\n\nvar _excluded = [\"children\"],\n    _excluded2 = [\"isTruncated\", \"noOfLines\", \"bold\", \"italic\", \"sub\", \"highlight\", \"underline\", \"strikeThrough\", \"fontFamily\", \"fontWeight\", \"fontStyle\", \"_hover\", \"fontSize\", \"numberOfLines\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef, useRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils/mergeRefs';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\nimport NativeText from \"react-native-web/dist/cjs/exports/Text\";\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nvar StyledText = makeStyledComponent(NativeText); // To have a RN compatible behaviour, we'll inherit parent text styles as base style\n\n_c = StyledText;\nvar TextAncestorContext = /*#__PURE__*/React.createContext(false);\n\nvar Text = function Text(_ref2, ref) {\n  _s();\n\n  var children = _ref2.children,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var hasTextAncestor = React.useContext(TextAncestorContext);\n\n  var _usePropsResolution = usePropsResolution('Text', props, {}, {\n    resolveResponsively: ['noOfLines', 'numberOfLines'],\n    // We override the component base theme if text has an ancestor.\n    componentTheme: hasTextAncestor ? {} : undefined\n  }),\n      isTruncated = _usePropsResolution.isTruncated,\n      noOfLines = _usePropsResolution.noOfLines,\n      bold = _usePropsResolution.bold,\n      italic = _usePropsResolution.italic,\n      sub = _usePropsResolution.sub,\n      highlight = _usePropsResolution.highlight,\n      underline = _usePropsResolution.underline,\n      strikeThrough = _usePropsResolution.strikeThrough,\n      propFontFamily = _usePropsResolution.fontFamily,\n      propFontWeight = _usePropsResolution.fontWeight,\n      propFontStyle = _usePropsResolution.fontStyle,\n      _hover = _usePropsResolution._hover,\n      fontSize = _usePropsResolution.fontSize,\n      numberOfLines = _usePropsResolution.numberOfLines,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var _ref = useRef(null); // TODO: might have to add this condition\n\n\n  var _useHover = useHover({}, _hover ? _ref : null),\n      isHovered = _useHover.isHovered; // const { isHovered } = useHover({}, _ref);\n\n\n  var fontFamily = propFontFamily;\n  var fontStyle = italic ? 'italic' : propFontStyle;\n  var fontWeight = bold ? 'bold' : propFontWeight;\n  var resolvedFontFamily = useResolvedFontFamily({\n    fontFamily: fontFamily,\n    fontWeight: fontWeight !== null && fontWeight !== void 0 ? fontWeight : hasTextAncestor ? undefined : 400,\n    fontStyle: fontStyle !== null && fontStyle !== void 0 ? fontStyle : hasTextAncestor ? undefined : 'normal'\n  });\n\n  if (resolvedFontFamily) {\n    fontFamily = resolvedFontFamily;\n  } //TODO: refactor for responsive prop\n\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  var propsToSpread = _objectSpread(_objectSpread(_objectSpread({}, resolvedProps), {}, {\n    numberOfLines: numberOfLines || noOfLines ? numberOfLines || noOfLines : isTruncated ? 1 : undefined\n  }, resolvedFontFamily), {}, {\n    bg: highlight ? 'warning.300' : resolvedProps.bg,\n    textDecorationLine: underline && strikeThrough ? 'underline line-through' : underline ? 'underline' : strikeThrough ? 'line-through' : resolvedProps.textDecorationLine,\n    fontSize: sub ? 10 : fontSize,\n    ref: mergeRefs([ref, _ref])\n  }, isHovered && _hover);\n\n  return hasTextAncestor ? /*#__PURE__*/React.createElement(StyledText, propsToSpread, children) : /*#__PURE__*/React.createElement(TextAncestorContext.Provider, {\n    value: true\n  }, /*#__PURE__*/React.createElement(StyledText, propsToSpread, children));\n};\n\n_s(Text, \"cjJmQVDLm5w2Zxf3VKGFSYzLgh8=\", false, function () {\n  return [usePropsResolution, useHover, useResolvedFontFamily, useHasResponsiveProps];\n});\n\n_c2 = Text;\nexport default /*#__PURE__*/_c4 = /*#__PURE__*/memo( /*#__PURE__*/_c3 = /*#__PURE__*/forwardRef(Text));\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"StyledText\");\n$RefreshReg$(_c2, \"Text\");\n$RefreshReg$(_c3, \"%default%$memo\");\n$RefreshReg$(_c4, \"%default%\");\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/module/components/primitives/Text/index.js"],"names":["StyledText","makeStyledComponent","TextAncestorContext","React","Text","children","props","hasTextAncestor","isTruncated","noOfLines","bold","italic","sub","highlight","underline","strikeThrough","propFontFamily","propFontWeight","propFontStyle","_hover","fontSize","numberOfLines","resolvedProps","usePropsResolution","resolveResponsively","componentTheme","undefined","_ref","useRef","isHovered","useHover","fontFamily","fontStyle","fontWeight","resolvedFontFamily","useResolvedFontFamily","useHasResponsiveProps","propsToSpread","bg","textDecorationLine","ref","mergeRefs","value","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef, useRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils/mergeRefs';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\nimport { Text as NativeText } from 'react-native';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst StyledText = makeStyledComponent(NativeText); // To have a RN compatible behaviour, we'll inherit parent text styles as base style\n\nconst TextAncestorContext = /*#__PURE__*/React.createContext(false);\n\nconst Text = ({\n  children,\n  ...props\n}, ref) => {\n  const hasTextAncestor = React.useContext(TextAncestorContext);\n  const {\n    isTruncated,\n    noOfLines,\n    bold,\n    italic,\n    sub,\n    highlight,\n    underline,\n    strikeThrough,\n    fontFamily: propFontFamily,\n    fontWeight: propFontWeight,\n    fontStyle: propFontStyle,\n    _hover,\n    fontSize,\n    numberOfLines,\n    ...resolvedProps\n  } = usePropsResolution('Text', props, {}, {\n    resolveResponsively: ['noOfLines', 'numberOfLines'],\n    // We override the component base theme if text has an ancestor.\n    componentTheme: hasTextAncestor ? {} : undefined\n  });\n\n  const _ref = useRef(null); // TODO: might have to add this condition\n\n\n  const {\n    isHovered\n  } = useHover({}, _hover ? _ref : null); // const { isHovered } = useHover({}, _ref);\n\n  let fontFamily = propFontFamily;\n  const fontStyle = italic ? 'italic' : propFontStyle;\n  const fontWeight = bold ? 'bold' : propFontWeight;\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight: fontWeight !== null && fontWeight !== void 0 ? fontWeight : hasTextAncestor ? undefined : 400,\n    fontStyle: fontStyle !== null && fontStyle !== void 0 ? fontStyle : hasTextAncestor ? undefined : 'normal'\n  });\n\n  if (resolvedFontFamily) {\n    fontFamily = resolvedFontFamily;\n  } //TODO: refactor for responsive prop\n\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const propsToSpread = { ...resolvedProps,\n    numberOfLines: numberOfLines || noOfLines ? numberOfLines || noOfLines : isTruncated ? 1 : undefined,\n    ...resolvedFontFamily,\n    bg: highlight ? 'warning.300' : resolvedProps.bg,\n    textDecorationLine: underline && strikeThrough ? 'underline line-through' : underline ? 'underline' : strikeThrough ? 'line-through' : resolvedProps.textDecorationLine,\n    fontSize: sub ? 10 : fontSize,\n    ref: mergeRefs([ref, _ref]),\n    ...(isHovered && _hover)\n  };\n  return hasTextAncestor ? /*#__PURE__*/React.createElement(StyledText, propsToSpread, children) : /*#__PURE__*/React.createElement(TextAncestorContext.Provider, {\n    value: true\n  }, /*#__PURE__*/React.createElement(StyledText, propsToSpread, children));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Text));\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}