{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _slicedToArray = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useScreenReaderEnabled = useScreenReaderEnabled;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/cjs/index\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction useScreenReaderEnabled() {\n  var _react$default$useSta = _react[\"default\"].useState(false),\n      _react$default$useSta2 = _slicedToArray(_react$default$useSta, 2),\n      enabled = _react$default$useSta2[0],\n      setEnabled = _react$default$useSta2[1];\n\n  var mountedRef = _react[\"default\"].useRef(false);\n\n  var handleSetEnabled = function handleSetEnabled(value) {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  _react[\"default\"].useEffect(function () {\n    mountedRef.current = true;\n\n    function setInitialValue() {\n      return _setInitialValue.apply(this, arguments);\n    }\n\n    function _setInitialValue() {\n      _setInitialValue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _reactNative.AccessibilityInfo.isScreenReaderEnabled();\n\n              case 2:\n                res = _context.sent;\n                handleSetEnabled(res);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _setInitialValue.apply(this, arguments);\n    }\n\n    var handler = _reactNative.AccessibilityInfo.addEventListener('screenReaderChanged', function (event) {\n      handleSetEnabled(event);\n    });\n\n    setInitialValue();\n    return function () {\n      mountedRef.current = false;\n\n      _reactNative.AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n\n  return enabled;\n}","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/commonjs/hooks/useScreenReaderEnabled.js"],"names":["Object","value","exports","_react","_interopRequireDefault","require","obj","default","mountedRef","handleSetEnabled","setEnabled","res","_reactNative","handler","event","setInitialValue"],"mappings":"AAAA;;;;;;;;AAEAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7CD;AAGAE,OAAO,CAAPA,sBAAAA,GAAAA,sBAAAA;;AAEA,IAAIC,MAAM,GAAGC,sBAAsB,CAACC,OAAO,CAA3C,OAA2C,CAAR,CAAnC;;;;AAIA,SAAA,sBAAA,CAAA,GAAA,EAAqC;EAAE,OAAOC,GAAG,IAAIA,GAAG,CAAVA,UAAAA,GAAAA,GAAAA,GAA8B;IAAEC,WAASD;EAAX,CAArC;AAAwD;;AAE/F,SAAA,sBAAA,GAAkC;EAChC,4BAA8BH,MAAAA,WAAAA,CAAAA,QAAAA,CAA9B,KAA8BA,CAA9B;EAAA;EAAA,IAAM,OAAN;EAAA,IAAM,UAAN;;EAEA,IAAMK,UAAU,GAAGL,MAAAA,WAAAA,CAAAA,MAAAA,CAAnB,KAAmBA,CAAnB;;EAEA,IAAMM,gBAAgB,GAAGR,SAAnBQ,gBAAmBR,CAAAA,KAAK,EAAI;IAChC,IAAIO,UAAU,CAAd,OAAA,EAAwB;MACtBE,UAAU,CAAVA,KAAU,CAAVA;IACD;EAHH,CAAA;;EAMAP,MAAAA,WAAAA,CAAAA,SAAAA,CAAyB,YAAM;IAC7BK,UAAU,CAAVA,OAAAA,GAAAA,IAAAA;;IAD6B,SAG7B,eAH6B;MAAA;IAAA;;IAAA;MAAA,4EAG7B;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACoBI,YAAY,CAAZA,iBAAAA,CAAlB,qBAAkBA,EADpB;;cAAA;gBACQD,GADR;gBAEEF,gBAAgB,CAAhBA,GAAgB,CAAhBA;;cAFF;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAH6B;MAAA;IAAA;;IAQ7B,IAAII,OAAO,GAAG,YAAY,CAAZ,iBAAA,CAAA,gBAAA,CAAA,qBAAA,EAAuEC,UAAAA,KAAK,EAAI;MAC5FL,gBAAgB,CAAhBA,KAAgB,CAAhBA;IADF,CAAc,CAAd;;IAIAM,eAAe;IACf,OAAO,YAAM;MACXP,UAAU,CAAVA,OAAAA,GAAAA,KAAAA;;MAEAI,YAAY,CAAZA,iBAAAA,CAAAA,mBAAAA,CAAAA,qBAAAA,EAAAA,OAAAA;IAHF,CAAA;EAbFT,CAAAA;;EAoBA,OAAA,OAAA;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useScreenReaderEnabled = useScreenReaderEnabled;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction useScreenReaderEnabled() {\n  const [enabled, setEnabled] = _react.default.useState(false);\n\n  const mountedRef = _react.default.useRef(false);\n\n  const handleSetEnabled = value => {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  _react.default.useEffect(() => {\n    mountedRef.current = true;\n\n    async function setInitialValue() {\n      const res = await _reactNative.AccessibilityInfo.isScreenReaderEnabled();\n      handleSetEnabled(res);\n    }\n\n    let handler = _reactNative.AccessibilityInfo.addEventListener('screenReaderChanged', event => {\n      handleSetEnabled(event);\n    });\n\n    setInitialValue();\n    return () => {\n      mountedRef.current = false;\n\n      _reactNative.AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n\n  return enabled;\n}\n//# sourceMappingURL=useScreenReaderEnabled.js.map"]},"metadata":{},"sourceType":"script"}