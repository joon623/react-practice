{"ast":null,"code":"import { mode } from '../tools'; // Skeleton\n\nexport var Skeleton = {\n  baseStyle: function baseStyle(props) {\n    return {\n      startColor: mode('muted.200', 'muted.600')(props),\n      endColor: 'transparent',\n      overflow: 'hidden',\n      fadeDuration: 0.1,\n      speed: 1.0,\n      h: '10',\n      w: '100%'\n    };\n  }\n}; // SkeletonText\n\nexport var SkeletonText = {\n  baseStyle: function baseStyle(props) {\n    return {\n      startColor: mode('muted.200', 'muted.600')(props),\n      endColor: 'transparent',\n      fadeDuration: 0.1,\n      w: '100%',\n      speed: 1.0,\n      flexDirection: 'column',\n      _line: {\n        h: 3,\n        rounded: 'full'\n      }\n    };\n  },\n  defaultProps: {\n    lines: 3,\n    space: 3\n  }\n};\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/theme/v33x-theme/components/skeleton.ts"],"names":["Skeleton","baseStyle","startColor","mode","endColor","overflow","fadeDuration","speed","h","w","SkeletonText","flexDirection","_line","rounded","defaultProps","lines","space"],"mappings":"AAAA,SAAA,IAAA,QAAA,UAAA,C,CAEA;;AACA,OAAO,IAAMA,QAAQ,GAAG;EACtBC,SAAS,EAAE,SAAA,SAAA,CAAA,KAAA,EAAgC;IACzC,OAAO;MACLC,UAAU,EAAEC,IAAI,CAAA,WAAA,EAAJA,WAAI,CAAJA,CADP,KACOA,CADP;MAELC,QAAQ,EAFH,aAAA;MAGLC,QAAQ,EAHH,QAAA;MAILC,YAAY,EAJP,GAAA;MAKLC,KAAK,EALA,GAAA;MAMLC,CAAC,EANI,IAAA;MAOLC,CAAC,EAAE;IAPE,CAAP;EASD;AAXqB,CAAjB,C,CAcP;;AACA,OAAO,IAAMC,YAAY,GAAG;EAC1BT,SAAS,EAAE,SAAA,SAAA,CAAA,KAAA,EAAgC;IACzC,OAAO;MACLC,UAAU,EAAEC,IAAI,CAAA,WAAA,EAAJA,WAAI,CAAJA,CADP,KACOA,CADP;MAELC,QAAQ,EAFH,aAAA;MAGLE,YAAY,EAHP,GAAA;MAILG,CAAC,EAJI,MAAA;MAKLF,KAAK,EALA,GAAA;MAMLI,aAAa,EANR,QAAA;MAOLC,KAAK,EAAE;QACLJ,CAAC,EADI,CAAA;QAELK,OAAO,EAAE;MAFJ;IAPF,CAAP;EAFwB,CAAA;EAe1BC,YAAY,EAAE;IACZC,KAAK,EADO,CAAA;IAEZC,KAAK,EAAE;EAFK;AAfY,CAArB","sourcesContent":["import { mode } from '../tools';\n\n// Skeleton\nexport const Skeleton = {\n  baseStyle: (props: Record<string, any>) => {\n    return {\n      startColor: mode('muted.200', 'muted.600')(props),\n      endColor: 'transparent',\n      overflow: 'hidden',\n      fadeDuration: 0.1,\n      speed: 1.0,\n      h: '10',\n      w: '100%',\n    };\n  },\n};\n\n// SkeletonText\nexport const SkeletonText = {\n  baseStyle: (props: Record<string, any>) => {\n    return {\n      startColor: mode('muted.200', 'muted.600')(props),\n      endColor: 'transparent',\n      fadeDuration: 0.1,\n      w: '100%',\n      speed: 1.0,\n      flexDirection: 'column',\n      _line: {\n        h: 3,\n        rounded: 'full',\n      },\n    };\n  },\n  defaultProps: {\n    lines: 3,\n    space: 3,\n  },\n};\n"]},"metadata":{},"sourceType":"module"}