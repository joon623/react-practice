{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty\");\n\nvar _slicedToArray = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useOverlayPosition = useOverlayPosition;\n\nvar _calculatePosition = require(\"./calculatePosition\");\n\nvar _react = require(\"react\");\n\nvar _useCloseOnScroll = require(\"./useCloseOnScroll\");\n\nvar _utils = require(\"@react-native-aria/utils\"); //@ts-nocheck\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// @ts-ignore\n\n\nvar visualViewport = typeof window !== 'undefined' && window.visualViewport;\n/**\n * Handles positioning overlays like popovers and menus relative to a trigger\n * element, and updating the position when the window resizes.\n */\n\nfunction useOverlayPosition(props) {\n  var direction = (0, _utils.isRTL)() ? 'rtl' : undefined;\n  var targetRef = props.targetRef,\n      overlayRef = props.overlayRef,\n      _props$scrollRef = props.scrollRef,\n      scrollRef = _props$scrollRef === void 0 ? overlayRef : _props$scrollRef,\n      _props$placement = props.placement,\n      placement = _props$placement === void 0 ? 'bottom' : _props$placement,\n      _props$containerPaddi = props.containerPadding,\n      containerPadding = _props$containerPaddi === void 0 ? 12 : _props$containerPaddi,\n      _props$shouldFlip = props.shouldFlip,\n      shouldFlip = _props$shouldFlip === void 0 ? true : _props$shouldFlip,\n      _props$boundaryElemen = props.boundaryElement,\n      boundaryElement = _props$boundaryElemen === void 0 ? typeof document !== 'undefined' ? document.body : null : _props$boundaryElemen,\n      _props$offset = props.offset,\n      offset = _props$offset === void 0 ? 0 : _props$offset,\n      _props$crossOffset = props.crossOffset,\n      crossOffset = _props$crossOffset === void 0 ? 0 : _props$crossOffset,\n      _props$shouldUpdatePo = props.shouldUpdatePosition,\n      shouldUpdatePosition = _props$shouldUpdatePo === void 0 ? true : _props$shouldUpdatePo,\n      _props$isOpen = props.isOpen,\n      isOpen = _props$isOpen === void 0 ? true : _props$isOpen,\n      _props$shouldOverlapW = props.shouldOverlapWithTrigger,\n      shouldOverlapWithTrigger = _props$shouldOverlapW === void 0 ? false : _props$shouldOverlapW,\n      onClose = props.onClose;\n\n  var _ref = (0, _react.useState)({\n    position: {},\n    arrowOffsetLeft: undefined,\n    arrowOffsetTop: undefined,\n    maxHeight: undefined,\n    placement: undefined\n  }),\n      _ref2 = _slicedToArray(_ref, 2),\n      position = _ref2[0],\n      setPosition = _ref2[1];\n\n  var deps = [shouldUpdatePosition, placement, overlayRef.current, targetRef.current, scrollRef.current, containerPadding, shouldFlip, boundaryElement, offset, crossOffset, isOpen, direction, shouldOverlapWithTrigger];\n  var updatePosition = (0, _react.useCallback)(function () {\n    if (shouldUpdatePosition === false || !isOpen || !overlayRef.current || !targetRef.current || !scrollRef.current || !boundaryElement) {\n      return;\n    }\n\n    setPosition((0, _calculatePosition.calculatePosition)({\n      placement: translateRTL(placement, direction),\n      overlayNode: overlayRef.current,\n      targetNode: targetRef.current,\n      scrollNode: scrollRef.current,\n      padding: containerPadding,\n      shouldFlip: shouldFlip,\n      boundaryElement: boundaryElement,\n      offset: offset,\n      crossOffset: crossOffset,\n      shouldOverlapWithTrigger: shouldOverlapWithTrigger\n    }));\n  }, deps); // Update position when anything changes\n\n  (0, _utils.useLayoutEffect)(updatePosition, deps); // Update position on window resize\n\n  useResize(updatePosition); // Reposition the overlay and do not close on scroll while the visual viewport is resizing.\n  // This will ensure that overlays adjust their positioning when the iOS virtual keyboard appears.\n\n  var isResizing = (0, _react.useRef)(false);\n  (0, _utils.useLayoutEffect)(function () {\n    var timeout;\n\n    var onResize = function onResize() {\n      isResizing.current = true;\n      clearTimeout(timeout);\n      timeout = setTimeout(function () {\n        isResizing.current = false;\n      }, 500);\n      updatePosition();\n    };\n\n    visualViewport === null || visualViewport === void 0 ? void 0 : visualViewport.addEventListener('resize', onResize);\n    return function () {\n      visualViewport === null || visualViewport === void 0 ? void 0 : visualViewport.removeEventListener('resize', onResize);\n    };\n  }, [updatePosition]);\n  var close = (0, _react.useCallback)(function () {\n    if (!isResizing.current) {\n      onClose();\n    }\n  }, [onClose, isResizing]); // When scrolling a parent scrollable region of the trigger (other than the body),\n  // we hide the popover. Otherwise, its position would be incorrect.\n\n  (0, _useCloseOnScroll.useCloseOnScroll)({\n    triggerRef: targetRef,\n    isOpen: isOpen,\n    onClose: onClose ? close : undefined\n  });\n  return {\n    rendered: true,\n    overlayProps: {\n      style: _objectSpread(_objectSpread({\n        position: 'absolute',\n        zIndex: 100000\n      }, position.position), {}, {\n        maxHeight: position.maxHeight\n      })\n    },\n    placement: position.placement,\n    arrowProps: {\n      style: {\n        left: position.arrowOffsetLeft,\n        top: position.arrowOffsetTop\n      }\n    },\n    updatePosition: updatePosition\n  };\n}\n\nfunction useResize(onResize) {\n  (0, _utils.useLayoutEffect)(function () {\n    window.addEventListener('resize', onResize, false);\n    return function () {\n      window.removeEventListener('resize', onResize, false);\n    };\n  }, [onResize]);\n}\n\nfunction translateRTL(position, direction) {\n  if (direction === 'rtl') {\n    return position.replace('start', 'right').replace('end', 'left');\n  }\n\n  return position.replace('start', 'left').replace('end', 'right');\n}","map":{"version":3,"sources":["useOverlayPosition.ts"],"names":["visualViewport","window","direction","scrollRef","placement","containerPadding","shouldFlip","boundaryElement","document","offset","crossOffset","shouldUpdatePosition","isOpen","shouldOverlapWithTrigger","onClose","position","arrowOffsetLeft","arrowOffsetTop","maxHeight","undefined","deps","overlayRef","targetRef","updatePosition","setPosition","translateRTL","overlayNode","targetNode","scrollNode","padding","useResize","isResizing","onResize","clearTimeout","timeout","setTimeout","close","triggerRef","rendered","overlayProps","style","zIndex","arrowProps","left","top"],"mappings":"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","sourcesContent":["//@ts-nocheck\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { calculatePosition, PositionResult } from './calculatePosition';\nimport {\n  HTMLAttributes,\n  RefObject,\n  useCallback,\n  useRef,\n  useState,\n} from 'react';\nimport { Placement, PlacementAxis, PositionProps } from '@react-types/overlays';\nimport { useCloseOnScroll } from './useCloseOnScroll';\nimport { isRTL, useLayoutEffect } from '@react-native-aria/utils';\n\ninterface AriaPositionProps extends PositionProps {\n  /**\n   * Element that that serves as the positioning boundary.\n   * @default document.body\n   */\n  boundaryElement?: HTMLElement;\n  /**\n   * The ref for the element which the overlay positions itself with respect to.\n   */\n  targetRef: RefObject<HTMLElement>;\n  /**\n   * The ref for the overlay element.\n   */\n  overlayRef: RefObject<HTMLElement>;\n  /**\n   * A ref for the scrollable region within the overlay.\n   * @default overlayRef\n   */\n  scrollRef?: RefObject<HTMLElement>;\n  /**\n   * Whether the overlay should update its position automatically.\n   * @default true\n   */\n  shouldUpdatePosition?: boolean;\n  /** Handler that is called when the overlay should close. */\n  onClose?: () => void;\n  /** Determines whether the overlay should overlap with the trigger */\n  shouldOverlapWithTrigger?: boolean;\n}\n\ninterface PositionAria {\n  /** Props for the overlay container element. */\n  overlayProps: HTMLAttributes<Element>;\n  /** Props for the overlay tip arrow if any. */\n  arrowProps: HTMLAttributes<Element>;\n  /** Placement of the overlay with respect to the overlay trigger. */\n  placement: PlacementAxis;\n  /** Updates the position of the overlay. */\n  updatePosition(): void;\n}\n\n// @ts-ignore\nlet visualViewport = typeof window !== 'undefined' && window.visualViewport;\n\n/**\n * Handles positioning overlays like popovers and menus relative to a trigger\n * element, and updating the position when the window resizes.\n */\nexport function useOverlayPosition(props: AriaPositionProps): PositionAria {\n  const direction = isRTL() ? 'rtl' : undefined;\n  let {\n    targetRef,\n    overlayRef,\n    scrollRef = overlayRef,\n    placement = 'bottom' as Placement,\n    containerPadding = 12,\n    shouldFlip = true,\n    boundaryElement = typeof document !== 'undefined' ? document.body : null,\n    offset = 0,\n    crossOffset = 0,\n    shouldUpdatePosition = true,\n    isOpen = true,\n    shouldOverlapWithTrigger = false,\n    onClose,\n  } = props;\n  let [position, setPosition] = useState<PositionResult>({\n    position: {},\n    arrowOffsetLeft: undefined,\n    arrowOffsetTop: undefined,\n    maxHeight: undefined,\n    placement: undefined,\n  });\n\n  let deps = [\n    shouldUpdatePosition,\n    placement,\n    overlayRef.current,\n    targetRef.current,\n    scrollRef.current,\n    containerPadding,\n    shouldFlip,\n    boundaryElement,\n    offset,\n    crossOffset,\n    isOpen,\n    direction,\n    shouldOverlapWithTrigger\n  ];\n\n  let updatePosition = useCallback(() => {\n    if (\n      shouldUpdatePosition === false ||\n      !isOpen ||\n      !overlayRef.current ||\n      !targetRef.current ||\n      !scrollRef.current ||\n      !boundaryElement\n    ) {\n      return;\n    }\n\n    setPosition(\n      calculatePosition({\n        placement: translateRTL(placement, direction),\n        overlayNode: overlayRef.current,\n        targetNode: targetRef.current,\n        scrollNode: scrollRef.current,\n        padding: containerPadding,\n        shouldFlip,\n        boundaryElement,\n        offset,\n        crossOffset,\n        shouldOverlapWithTrigger,\n      })\n    );\n  }, deps);\n\n  // Update position when anything changes\n  useLayoutEffect(updatePosition, deps);\n\n  // Update position on window resize\n  useResize(updatePosition);\n\n  // Reposition the overlay and do not close on scroll while the visual viewport is resizing.\n  // This will ensure that overlays adjust their positioning when the iOS virtual keyboard appears.\n  let isResizing = useRef(false);\n  useLayoutEffect(() => {\n    let timeout: NodeJS.Timeout;\n    let onResize = () => {\n      isResizing.current = true;\n      clearTimeout(timeout);\n\n      timeout = setTimeout(() => {\n        isResizing.current = false;\n      }, 500);\n\n      updatePosition();\n    };\n\n    visualViewport?.addEventListener('resize', onResize);\n\n    return () => {\n      visualViewport?.removeEventListener('resize', onResize);\n    };\n  }, [updatePosition]);\n\n  let close = useCallback(() => {\n    if (!isResizing.current) {\n      onClose();\n    }\n  }, [onClose, isResizing]);\n\n  // When scrolling a parent scrollable region of the trigger (other than the body),\n  // we hide the popover. Otherwise, its position would be incorrect.\n  useCloseOnScroll({\n    triggerRef: targetRef,\n    isOpen,\n    onClose: onClose ? close : undefined,\n  });\n\n  return {\n    rendered: true,\n    overlayProps: {\n      style: {\n        position: 'absolute',\n        zIndex: 100000, // should match the z-index in ModalTrigger\n        ...position.position,\n        maxHeight: position.maxHeight,\n      },\n    },\n    placement: position.placement,\n    arrowProps: {\n      style: {\n        left: position.arrowOffsetLeft,\n        top: position.arrowOffsetTop,\n      },\n    },\n    updatePosition,\n  };\n}\n\nfunction useResize(onResize) {\n  useLayoutEffect(() => {\n    window.addEventListener('resize', onResize, false);\n    return () => {\n      window.removeEventListener('resize', onResize, false);\n    };\n  }, [onResize]);\n}\n\nfunction translateRTL(position, direction) {\n  if (direction === 'rtl') {\n    return position.replace('start', 'right').replace('end', 'left');\n  }\n  return position.replace('start', 'left').replace('end', 'right');\n}\n"]},"metadata":{},"sourceType":"script"}