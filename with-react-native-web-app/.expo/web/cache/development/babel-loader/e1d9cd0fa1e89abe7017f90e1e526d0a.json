{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useOverlay = useOverlay;\n\nvar _react = require(\"react\");\n\nvar _interactions = require(\"@react-aria/interactions\");\n\nvar visibleOverlays = [];\n/**\n * Provides the behavior for overlays such as dialogs, popovers, and menus.\n * Hides the overlay when the user interacts outside it, when the Escape key is pressed,\n * or optionally, on blur. Only the top-most overlay will close at once.\n */\n\nfunction useOverlay(props, ref) {\n  var onClose = props.onClose,\n      shouldCloseOnBlur = props.shouldCloseOnBlur,\n      isOpen = props.isOpen,\n      _props$isKeyboardDism = props.isKeyboardDismissDisabled,\n      isKeyboardDismissDisabled = _props$isKeyboardDism === void 0 ? false : _props$isKeyboardDism; // Add the overlay ref to the stack of visible overlays on mount, and remove on unmount.\n\n  (0, _react.useEffect)(function () {\n    if (isOpen) {\n      visibleOverlays.push(ref);\n    }\n\n    return function () {\n      var index = visibleOverlays.indexOf(ref);\n\n      if (index >= 0) {\n        visibleOverlays.splice(index, 1);\n      }\n    };\n  }, [isOpen, ref]); // Only hide the overlay when it is the topmost visible overlay in the stack.\n\n  var onHide = function onHide() {\n    if (visibleOverlays[visibleOverlays.length - 1] === ref && onClose) {\n      onClose();\n    }\n  }; // Handle the escape key\n\n\n  var onKeyDown = function onKeyDown(e) {\n    if (e.key === 'Escape' && !isKeyboardDismissDisabled) {\n      e.preventDefault();\n      onHide();\n    }\n  }; // Handle clicking outside the overlay to close it\n\n\n  var _ref = (0, _interactions.useFocusWithin)({\n    isDisabled: !shouldCloseOnBlur,\n    onBlurWithin: function onBlurWithin() {\n      onClose && onClose();\n    }\n  }),\n      focusWithinProps = _ref.focusWithinProps;\n\n  return {\n    overlayProps: _objectSpread({\n      onKeyDown: onKeyDown\n    }, focusWithinProps)\n  };\n}","map":{"version":3,"sources":["useOverlay.web.ts"],"names":["visibleOverlays","isKeyboardDismissDisabled","index","onHide","onClose","onKeyDown","e","focusWithinProps","isDisabled","onBlurWithin","overlayProps"],"mappings":";;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AAsCA,IAAMA,eAAyC,GAA/C,EAAA;AAEA;AACA;AACA;AACA;AACA;;AACO,SAAA,UAAA,CAAA,KAAA,EAAA,GAAA,EAGQ;EACb,IAAI,OAAJ,GADa,KACb,CAAI,OAAJ;EAAA,IAAI,iBAAJ,GADa,KACb,CAAI,iBAAJ;EAAA,IAAI,MAAJ,GADa,KACb,CAAI,MAAJ;EAAA,4BADa,KACb,CAIEC,yBAJF;EAAA,IAIEA,yBAJF,sCAI8B,KAJ9B,yBADa,CAQb;;EACA,CAAA,GAAA,MAAA,CAAA,SAAA,EAAU,YAAM;IACd,IAAA,MAAA,EAAY;MACVD,eAAe,CAAfA,IAAAA,CAAAA,GAAAA;IACD;;IAED,OAAO,YAAM;MACX,IAAIE,KAAK,GAAGF,eAAe,CAAfA,OAAAA,CAAZ,GAAYA,CAAZ;;MACA,IAAIE,KAAK,IAAT,CAAA,EAAgB;QACdF,eAAe,CAAfA,MAAAA,CAAAA,KAAAA,EAAAA,CAAAA;MACD;IAJH,CAAA;EALF,CAAA,EAWG,CAAA,MAAA,EApBU,GAoBV,CAXH,EATa,CAsBb;;EACA,IAAIG,MAAM,GAAG,SAATA,MAAS,GAAM;IACjB,IAAIH,eAAe,CAACA,eAAe,CAAfA,MAAAA,GAAhBA,CAAe,CAAfA,KAAAA,GAAAA,IAAJ,OAAA,EAAoE;MAClEI,OAAO;IACR;EA1BU,CAuBb,CAvBa,CA6Bb;;;EACA,IAAIC,SAAS,GAAIC,SAAbD,SAAaC,CAAAA,CAAD,EAAY;IAC1B,IAAIA,CAAC,CAADA,GAAAA,KAAAA,QAAAA,IAAsB,CAA1B,yBAAA,EAAsD;MACpDA,CAAC,CAADA,cAAAA;MACAH,MAAM;IACP;EAlCU,CA8Bb,CA9Ba,CAqCb;;;EAEA,WAA2B,CAAA,GAAA,aAAA,CAAA,cAAA,EAAe;IACxCK,UAAU,EAAE,CAD4B,iBAAA;IAExCC,YAAY,EAAE,wBAAM;MAClBL,OAAO,IAAIA,OAAXA,EAAAA;IACD;EAJuC,CAAf,CAA3B;EAAA,IAAMG,gBAAN,QAAMA,gBAAN;;EAOA,OAAO;IACLG,YAAY;MACVL,SADY,EACZA;IADU,GAEPE,gBAFO;EADP,CAAP;AAMD","sourcesContent":["import { HTMLAttributes, RefObject, useEffect } from 'react';\nimport { useFocusWithin } from '@react-aria/interactions';\n\ninterface OverlayProps {\n  /** Whether the overlay is currently open. */\n  isOpen?: boolean;\n\n  /** Handler that is called when the overlay should close. */\n  onClose?: () => void;\n\n  /**\n   * Whether to close the overlay when the user interacts outside it.\n   * @default false\n   */\n  isDismissable?: boolean;\n\n  /** Whether the overlay should close when focus is lost or moves outside it. */\n  shouldCloseOnBlur?: boolean;\n\n  /**\n   * Whether pressing the escape key to close the overlay should be disabled.\n   * @default false\n   */\n  isKeyboardDismissDisabled?: boolean;\n\n  /**\n   * When user interacts with the argument element outside of the overlay ref,\n   * return true if onClose should be called.  This gives you a chance to filter\n   * out interaction with elements that should not dismiss the overlay.\n   * By default, onClose will always be called on interaction outside the overlay ref.\n   */\n  shouldCloseOnInteractOutside?: (element: HTMLElement) => boolean;\n}\n\ninterface OverlayAria {\n  /** Props to apply to the overlay container element. */\n  overlayProps: HTMLAttributes<HTMLElement>;\n}\n\nconst visibleOverlays: RefObject<HTMLElement>[] = [];\n\n/**\n * Provides the behavior for overlays such as dialogs, popovers, and menus.\n * Hides the overlay when the user interacts outside it, when the Escape key is pressed,\n * or optionally, on blur. Only the top-most overlay will close at once.\n */\nexport function useOverlay(\n  props: OverlayProps,\n  ref: RefObject<HTMLElement>\n): OverlayAria {\n  let {\n    onClose,\n    shouldCloseOnBlur,\n    isOpen,\n    isKeyboardDismissDisabled = false,\n  } = props;\n\n  // Add the overlay ref to the stack of visible overlays on mount, and remove on unmount.\n  useEffect(() => {\n    if (isOpen) {\n      visibleOverlays.push(ref);\n    }\n\n    return () => {\n      let index = visibleOverlays.indexOf(ref);\n      if (index >= 0) {\n        visibleOverlays.splice(index, 1);\n      }\n    };\n  }, [isOpen, ref]);\n\n  // Only hide the overlay when it is the topmost visible overlay in the stack.\n  let onHide = () => {\n    if (visibleOverlays[visibleOverlays.length - 1] === ref && onClose) {\n      onClose();\n    }\n  };\n\n  // Handle the escape key\n  let onKeyDown = (e: any) => {\n    if (e.key === 'Escape' && !isKeyboardDismissDisabled) {\n      e.preventDefault();\n      onHide();\n    }\n  };\n\n  // Handle clicking outside the overlay to close it\n\n  let { focusWithinProps } = useFocusWithin({\n    isDisabled: !shouldCloseOnBlur,\n    onBlurWithin: () => {\n      onClose && onClose();\n    },\n  });\n\n  return {\n    overlayProps: {\n      onKeyDown,\n      ...focusWithinProps,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}