{"ast":null,"code":"import _asyncToGenerator from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/regenerator\";\nimport React from 'react';\nimport AccessibilityInfo from \"react-native-web/dist/cjs/exports/AccessibilityInfo\";\nexport function useScreenReaderEnabled() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      enabled = _React$useState2[0],\n      setEnabled = _React$useState2[1];\n\n  var mountedRef = React.useRef(false);\n\n  var handleSetEnabled = function handleSetEnabled(value) {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  React.useEffect(function () {\n    mountedRef.current = true;\n\n    function setInitialValue() {\n      return _setInitialValue.apply(this, arguments);\n    }\n\n    function _setInitialValue() {\n      _setInitialValue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return AccessibilityInfo.isScreenReaderEnabled();\n\n              case 2:\n                res = _context.sent;\n                handleSetEnabled(res);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _setInitialValue.apply(this, arguments);\n    }\n\n    var handler = AccessibilityInfo.addEventListener('screenReaderChanged', function (event) {\n      handleSetEnabled(event);\n    });\n    setInitialValue();\n    return function () {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n  return enabled;\n}","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/hooks/useScreenReaderEnabled.ts"],"names":["React","mountedRef","handleSetEnabled","value","setEnabled","res","AccessibilityInfo","handler","event","setInitialValue"],"mappings":";;;AAAA,OAAA,KAAA,MAAA,OAAA;;AAGA,OAAO,SAAA,sBAAA,GAAkC;EACvC,sBAA8BA,KAAK,CAALA,QAAAA,CAA9B,KAA8BA,CAA9B;EAAA;EAAA,IAAM,OAAN;EAAA,IAAM,UAAN;;EACA,IAAMC,UAAU,GAAGD,KAAK,CAALA,MAAAA,CAAnB,KAAmBA,CAAnB;;EAEA,IAAME,gBAAgB,GAAIC,SAApBD,gBAAoBC,CAAAA,KAAD,EAAoB;IAC3C,IAAIF,UAAU,CAAd,OAAA,EAAwB;MACtBG,UAAU,CAAVA,KAAU,CAAVA;IACD;EAHH,CAAA;;EAMAJ,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpBC,UAAU,CAAVA,OAAAA,GAAAA,IAAAA;;IADoB,SAEpB,eAFoB;MAAA;IAAA;;IAAA;MAAA,4EAEpB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACoBK,iBAAiB,CAAnC,qBAAkBA,EADpB;;cAAA;gBACQD,GADR;gBAEEH,gBAAgB,CAAhBA,GAAgB,CAAhBA;;cAFF;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAFoB;MAAA;IAAA;;IAOpB,IAAIK,OAAY,GAAG,iBAAiB,CAAjB,gBAAA,CAAA,qBAAA,EAEhBC,UAAAA,KAAD,EAAgB;MACdN,gBAAgB,CAAhBA,KAAgB,CAAhBA;IAHJ,CAAmB,CAAnB;IAOAO,eAAe;IACf,OAAO,YAAM;MACXR,UAAU,CAAVA,OAAAA,GAAAA,KAAAA;MACAK,iBAAiB,CAAjBA,mBAAAA,CAAAA,qBAAAA,EAAAA,OAAAA;IAFF,CAAA;EAfFN,CAAAA;EAqBA,OAAA,OAAA;AACD","sourcesContent":["import React from 'react';\nimport { AccessibilityInfo } from 'react-native';\n\nexport function useScreenReaderEnabled() {\n  const [enabled, setEnabled] = React.useState(false);\n  const mountedRef = React.useRef(false);\n\n  const handleSetEnabled = (value: boolean) => {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  React.useEffect(() => {\n    mountedRef.current = true;\n    async function setInitialValue() {\n      const res = await AccessibilityInfo.isScreenReaderEnabled();\n      handleSetEnabled(res);\n    }\n\n    let handler: any = AccessibilityInfo.addEventListener(\n      'screenReaderChanged',\n      (event: any) => {\n        handleSetEnabled(event);\n      }\n    );\n\n    setInitialValue();\n    return () => {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n\n  return enabled;\n}\n"]},"metadata":{},"sourceType":"module"}