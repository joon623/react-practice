{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ExecutionEnvironment = require(\"fbjs/lib/ExecutionEnvironment\");\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nvar win = _ExecutionEnvironment.canUseDOM ? window : {\n  devicePixelRatio: undefined,\n  innerHeight: undefined,\n  innerWidth: undefined,\n  screen: {\n    height: undefined,\n    width: undefined\n  }\n};\nvar dimensions = {};\nvar listeners = {};\n\nvar Dimensions = /*#__PURE__*/function () {\n  function Dimensions() {}\n\n  Dimensions.get = function get(dimension) {\n    (0, _invariant[\"default\"])(dimensions[dimension], \"No dimension set for key \" + dimension);\n    return dimensions[dimension];\n  };\n\n  Dimensions.set = function set(initialDimensions) {\n    if (initialDimensions) {\n      if (_ExecutionEnvironment.canUseDOM) {\n        (0, _invariant[\"default\"])(false, 'Dimensions cannot be set in the browser');\n      } else {\n        dimensions.screen = initialDimensions.screen;\n        dimensions.window = initialDimensions.window;\n      }\n    }\n  };\n\n  Dimensions._update = function _update() {\n    dimensions.window = {\n      fontScale: 1,\n      height: win.innerHeight,\n      scale: win.devicePixelRatio || 1,\n      width: win.innerWidth\n    };\n    dimensions.screen = {\n      fontScale: 1,\n      height: win.screen.height,\n      scale: win.devicePixelRatio || 1,\n      width: win.screen.width\n    };\n\n    if (Array.isArray(listeners['change'])) {\n      listeners['change'].forEach(function (handler) {\n        return handler(dimensions);\n      });\n    }\n  };\n\n  Dimensions.addEventListener = function addEventListener(type, handler) {\n    listeners[type] = listeners[type] || [];\n    listeners[type].push(handler);\n  };\n\n  Dimensions.removeEventListener = function removeEventListener(type, handler) {\n    if (Array.isArray(listeners[type])) {\n      listeners[type] = listeners[type].filter(function (_handler) {\n        return _handler !== handler;\n      });\n    }\n  };\n\n  return Dimensions;\n}();\n\nexports[\"default\"] = Dimensions;\n\nDimensions._update();\n\nif (_ExecutionEnvironment.canUseDOM) {\n  window.addEventListener('resize', Dimensions._update, false);\n}\n\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/react-native-web/dist/cjs/exports/Dimensions/index.js"],"names":["exports","_ExecutionEnvironment","require","_invariant","_interopRequireDefault","obj","default","win","devicePixelRatio","innerHeight","innerWidth","screen","height","width","undefined","dimensions","listeners","Dimensions","initialDimensions","fontScale","scale","Array","handler","_handler","window","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _ExecutionEnvironment = require(\"fbjs/lib/ExecutionEnvironment\");\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar win = _ExecutionEnvironment.canUseDOM ? window : {\n  devicePixelRatio: undefined,\n  innerHeight: undefined,\n  innerWidth: undefined,\n  screen: {\n    height: undefined,\n    width: undefined\n  }\n};\nvar dimensions = {};\nvar listeners = {};\n\nvar Dimensions =\n/*#__PURE__*/\nfunction () {\n  function Dimensions() {}\n\n  Dimensions.get = function get(dimension) {\n    (0, _invariant.default)(dimensions[dimension], \"No dimension set for key \" + dimension);\n    return dimensions[dimension];\n  };\n\n  Dimensions.set = function set(initialDimensions) {\n    if (initialDimensions) {\n      if (_ExecutionEnvironment.canUseDOM) {\n        (0, _invariant.default)(false, 'Dimensions cannot be set in the browser');\n      } else {\n        dimensions.screen = initialDimensions.screen;\n        dimensions.window = initialDimensions.window;\n      }\n    }\n  };\n\n  Dimensions._update = function _update() {\n    dimensions.window = {\n      fontScale: 1,\n      height: win.innerHeight,\n      scale: win.devicePixelRatio || 1,\n      width: win.innerWidth\n    };\n    dimensions.screen = {\n      fontScale: 1,\n      height: win.screen.height,\n      scale: win.devicePixelRatio || 1,\n      width: win.screen.width\n    };\n\n    if (Array.isArray(listeners['change'])) {\n      listeners['change'].forEach(function (handler) {\n        return handler(dimensions);\n      });\n    }\n  };\n\n  Dimensions.addEventListener = function addEventListener(type, handler) {\n    listeners[type] = listeners[type] || [];\n    listeners[type].push(handler);\n  };\n\n  Dimensions.removeEventListener = function removeEventListener(type, handler) {\n    if (Array.isArray(listeners[type])) {\n      listeners[type] = listeners[type].filter(function (_handler) {\n        return _handler !== handler;\n      });\n    }\n  };\n\n  return Dimensions;\n}();\n\nexports.default = Dimensions;\n\nDimensions._update();\n\nif (_ExecutionEnvironment.canUseDOM) {\n  window.addEventListener('resize', Dimensions._update, false);\n}\n\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}