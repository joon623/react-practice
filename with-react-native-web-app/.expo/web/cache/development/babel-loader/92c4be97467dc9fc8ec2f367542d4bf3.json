{"ast":null,"code":"import _slicedToArray from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport get from 'lodash.get';\nimport merge from 'lodash.merge';\nimport Platform from \"react-native-web/dist/cjs/exports/Platform\";\nimport { useNativeBase } from '../useNativeBase';\nimport { useColorMode } from '../../core/color-mode';\nimport { omitUndefined, extractInObject } from '../../theme/tools';\nimport { useContrastText } from '../useContrastText';\nimport { useBreakpointResolvedProps } from '../useBreakpointResolvedProps';\nimport { propsFlattener, compareSpecificity } from './propsFlattenerTest';\nvar SPREAD_PROP_SPECIFICITY_ORDER = ['p', 'padding', 'px', 'py', 'pt', 'pb', 'pl', 'pr', 'paddingTop', 'paddingBottom', 'paddingLeft', 'paddingRight', 'm', 'margin', 'mx', 'my', 'mt', 'mb', 'ml', 'mr', 'marginTop', 'marginBottom', 'marginLeft', 'marginRight'];\nvar FINAL_SPREAD_PROPS = ['paddingTop', 'paddingBottom', 'paddingLeft', 'paddingRight', 'marginTop', 'marginBottom', 'marginLeft', 'marginRight'];\nvar MARGIN_MAP = {\n  mx: ['marginRight', 'marginLeft'],\n  my: ['marginTop', 'marginBottom'],\n  mt: ['marginTop'],\n  mb: ['marginBottom'],\n  mr: ['marginRight'],\n  ml: ['marginLeft']\n};\nMARGIN_MAP.margin = [].concat(_toConsumableArray(MARGIN_MAP.mx), _toConsumableArray(MARGIN_MAP.my));\nMARGIN_MAP.m = MARGIN_MAP.margin;\nMARGIN_MAP.marginTop = MARGIN_MAP.mt;\nMARGIN_MAP.marginBottom = MARGIN_MAP.mb;\nMARGIN_MAP.marginLeft = MARGIN_MAP.ml;\nMARGIN_MAP.marginRight = MARGIN_MAP.mr;\nvar PADDING_MAP = {\n  px: ['paddingRight', 'paddingLeft'],\n  py: ['paddingTop', 'paddingBottom'],\n  pt: ['paddingTop'],\n  pb: ['paddingBottom'],\n  pr: ['paddingRight'],\n  pl: ['paddingLeft']\n};\nPADDING_MAP.padding = [].concat(_toConsumableArray(PADDING_MAP.px), _toConsumableArray(PADDING_MAP.py));\nPADDING_MAP.p = PADDING_MAP.padding;\nPADDING_MAP.paddingTop = PADDING_MAP.pt;\nPADDING_MAP.paddingBottom = PADDING_MAP.pb;\nPADDING_MAP.paddingLeft = PADDING_MAP.pl;\nPADDING_MAP.paddingRight = PADDING_MAP.pr;\n\nvar SPREAD_PROP_SPECIFICITY_MAP = _objectSpread(_objectSpread({}, PADDING_MAP), MARGIN_MAP);\n\nfunction propsSpreader(incomingProps, incomingSpecifity) {\n  var flattenedDefaultProps = _objectSpread({}, incomingProps);\n\n  var specificity = {};\n  SPREAD_PROP_SPECIFICITY_ORDER.forEach(function (prop) {\n    if (prop in flattenedDefaultProps) {\n      var val = incomingProps[prop] || flattenedDefaultProps[prop];\n\n      if (!FINAL_SPREAD_PROPS.includes(prop)) {\n        delete flattenedDefaultProps[prop];\n        specificity[prop] = incomingSpecifity[prop];\n      }\n\n      SPREAD_PROP_SPECIFICITY_MAP[prop].forEach(function (newProp) {\n        if (compareSpecificity(specificity[newProp], specificity[prop])) {\n          specificity[newProp] = incomingSpecifity[prop];\n          flattenedDefaultProps[newProp] = val;\n        }\n      });\n    }\n  });\n  return merge({}, flattenedDefaultProps);\n}\n/**\n * @summary Combines provided porps with component's theme props and resloves them.\n * @arg {string} component - Name of the component.\n * @arg {object} incomingProps - Props passed by the user.\n * @arg {object} state - dependent states.\n * @arg {object} config - configuration for resolution. Accepts key like ignoreProps, resolveResponsively.\n * @returns {object} Resolved and flattened props.\n */\n\n\nexport function usePropsResolutionTest(component, incomingProps, state, config) {\n  var _ref, _flattenProps$bg2;\n\n  var _flattenProps$bg, _flattenProps$backgro, _flattenProps$bgColor, _flattenProps$backgro2, _flattenProps, _flattenProps$_text, _flattenProps2, _flattenProps2$_text;\n\n  var _extractInObject = extractInObject(incomingProps, ['children', 'onPress', 'icon', 'onOpen', 'onClose'].concat((config === null || config === void 0 ? void 0 : config.ignoreProps) || [])),\n      _extractInObject2 = _slicedToArray(_extractInObject, 2),\n      ignoredProps = _extractInObject2[0],\n      cleanIncomingProps = _extractInObject2[1];\n\n  var resolveResponsively = ['colorScheme', 'size', 'variant'].concat(_toConsumableArray((config === null || config === void 0 ? void 0 : config.resolveResponsively) || []));\n\n  var _useNativeBase = useNativeBase(),\n      theme = _useNativeBase.theme;\n\n  var colorModeProps = useColorMode();\n  var componentTheme = get(theme, \"components.\".concat(component), {}); // STEP 1: combine default props and incoming props\n\n  var incomingWithDefaultProps = merge({}, componentTheme.defaultProps || {}, cleanIncomingProps); // STEP 2: flatten them\n\n  var _propsFlattener = propsFlattener({\n    props: incomingWithDefaultProps,\n    platform: Platform.OS,\n    colormode: colorModeProps.colorMode,\n    state: state || {},\n    previouslyFlattenProps: {}\n  }, 2),\n      _propsFlattener2 = _slicedToArray(_propsFlattener, 2),\n      flattenProps = _propsFlattener2[0],\n      specificityMap = _propsFlattener2[1]; // STEP 2.5: resolving responsive props\n\n\n  var responsiveProps = {};\n  resolveResponsively.map(function (propsName) {\n    if (flattenProps[propsName]) {\n      // @ts-ignore\n      responsiveProps[propsName] = flattenProps[propsName];\n    }\n  });\n  var responsivelyResolvedProps = useBreakpointResolvedProps(responsiveProps);\n  flattenProps = _objectSpread(_objectSpread({}, flattenProps), responsivelyResolvedProps); // STEP 3: Pass it to baseStyle, then variant and then size and resolve them.\n  // NOTE: Resoloving baseStyle\n\n  var componentBaseStyle = {},\n      flattenBaseStyle,\n      baseSpecificityMap;\n\n  if (componentTheme.baseStyle) {\n    componentBaseStyle = typeof componentTheme.baseStyle !== 'function' ? componentTheme.baseStyle : componentTheme.baseStyle(_objectSpread(_objectSpread({\n      theme: theme\n    }, flattenProps), colorModeProps));\n\n    var _propsFlattener3 = propsFlattener({\n      props: componentBaseStyle,\n      platform: Platform.OS,\n      colormode: colorModeProps.colorMode,\n      state: state || {},\n      currentSpecificityMap: specificityMap,\n      previouslyFlattenProps: flattenProps\n    }, 1);\n\n    var _propsFlattener4 = _slicedToArray(_propsFlattener3, 2);\n\n    flattenBaseStyle = _propsFlattener4[0];\n    baseSpecificityMap = _propsFlattener4[1];\n  } // NOTE: Resolving variants\n\n\n  var variant = flattenProps.variant;\n  var componentVariantProps = {},\n      flattenVariantStyle,\n      variantSpecificityMap; // Extracting props from variant\n\n  if (variant && componentTheme.variants && componentTheme.variants[variant]) {\n    componentVariantProps = typeof componentTheme.variants[variant] !== 'function' ? componentTheme.variants[variant] : componentTheme.variants[variant](_objectSpread(_objectSpread({\n      theme: theme\n    }, flattenProps), colorModeProps));\n\n    var _propsFlattener5 = propsFlattener({\n      props: componentVariantProps,\n      platform: Platform.OS,\n      colormode: colorModeProps.colorMode,\n      state: state || {},\n      currentSpecificityMap: baseSpecificityMap || specificityMap,\n      // NOTE: Ideally flattenBaseStyle and flattenProps should be deeply merged to create previouslyFlattenProps.\n      previouslyFlattenProps: flattenProps\n    }, 1);\n\n    var _propsFlattener6 = _slicedToArray(_propsFlattener5, 2);\n\n    flattenVariantStyle = _propsFlattener6[0];\n    variantSpecificityMap = _propsFlattener6[1];\n    // We remove variant from original props if we found it in the componentTheme\n    //@ts-ignore\n    flattenProps.variant = undefined;\n  } // NOTE: Resolving size\n\n\n  var size = flattenProps.size;\n  var componentSizeProps = {},\n      flattenSizeStyle,\n      sizeSpecificityMap; // Extracting props from size\n\n  if (size && componentTheme.sizes && componentTheme.sizes[size]) {\n    // Type - sizes: {lg: 1}. Refer icon theme\n    if (typeof componentTheme.sizes[size] === 'string' || typeof componentTheme.sizes[size] === 'number') {\n      flattenProps.size = componentTheme.sizes[size]; //@ts-ignore\n      // componentSizeProps.size = componentTheme.sizes[size];\n    } // Type - sizes: (props) => ({lg: {px: 1}}). Refer heading theme\n    else if (typeof componentTheme.sizes[size] === 'function') {\n      flattenProps.size = undefined;\n      componentSizeProps = componentTheme.sizes[size](_objectSpread(_objectSpread({\n        theme: theme\n      }, flattenProps), colorModeProps));\n    } // Type - sizes: {lg: {px: 1}}. Refer button theme\n    else {\n      flattenProps.size = undefined;\n      componentSizeProps = componentTheme.sizes[size];\n    }\n\n    var _propsFlattener7 = propsFlattener({\n      props: componentSizeProps,\n      platform: Platform.OS,\n      colormode: colorModeProps.colorMode,\n      state: state || {},\n      currentSpecificityMap: variantSpecificityMap || baseSpecificityMap || specificityMap,\n      previouslyFlattenProps: flattenProps\n    }, 1);\n\n    var _propsFlattener8 = _slicedToArray(_propsFlattener7, 2);\n\n    flattenSizeStyle = _propsFlattener8[0];\n    sizeSpecificityMap = _propsFlattener8[1];\n  } // // STEP 4: merge\n\n\n  var defaultStyles = merge({}, flattenBaseStyle, flattenVariantStyle, flattenSizeStyle);\n\n  for (var prop in defaultStyles) {\n    delete flattenProps[prop];\n  }\n\n  var defaultSpecificity = merge({}, specificityMap, baseSpecificityMap, variantSpecificityMap, sizeSpecificityMap);\n  flattenProps = propsSpreader(_objectSpread(_objectSpread({}, defaultStyles), flattenProps), defaultSpecificity); // // STEP 5: linear Grad and contrastText\n\n  var ignore = [];\n\n  if ((_flattenProps$bg = flattenProps.bg) !== null && _flattenProps$bg !== void 0 && _flattenProps$bg.linearGradient || (_flattenProps$backgro = flattenProps.background) !== null && _flattenProps$backgro !== void 0 && _flattenProps$backgro.linearGradient || (_flattenProps$bgColor = flattenProps.bgColor) !== null && _flattenProps$bgColor !== void 0 && _flattenProps$bgColor.linearGradient || (_flattenProps$backgro2 = flattenProps.backgroundColor) !== null && _flattenProps$backgro2 !== void 0 && _flattenProps$backgro2.linearGradient) {\n    var _flattenProps$backgro3, _flattenProps$bgColor2, _flattenProps$backgro4;\n\n    var bgProp = 'bg';\n\n    if ((_flattenProps$backgro3 = flattenProps.background) !== null && _flattenProps$backgro3 !== void 0 && _flattenProps$backgro3.linearGradient) {\n      bgProp = 'background';\n    } else if ((_flattenProps$bgColor2 = flattenProps.bgColor) !== null && _flattenProps$bgColor2 !== void 0 && _flattenProps$bgColor2.linearGradient) {\n      bgProp = 'bgColor';\n    } else if ((_flattenProps$backgro4 = flattenProps.backgroundColor) !== null && _flattenProps$backgro4 !== void 0 && _flattenProps$backgro4.linearGradient) {\n      bgProp = 'backgroundColor';\n    }\n\n    flattenProps[bgProp].linearGradient.colors = flattenProps[bgProp].linearGradient.colors.map(function (color) {\n      return get(theme.colors, color, color);\n    });\n    ignore = ['bg', 'background', 'backgroundColor', 'bgColor'];\n  } // // NOTE: seprating bg props when linearGardiant is available\n\n\n  var _extractInObject3 = extractInObject(flattenProps, ignore),\n      _extractInObject4 = _slicedToArray(_extractInObject3, 1),\n      gradientProps = _extractInObject4[0];\n\n  var bgColor = (_ref = (_flattenProps$bg2 = flattenProps.bg) !== null && _flattenProps$bg2 !== void 0 ? _flattenProps$bg2 : flattenProps.backgroundColor) !== null && _ref !== void 0 ? _ref : flattenProps.bgColor;\n  var contrastTextColor = useContrastText(bgColor, (_flattenProps = flattenProps) === null || _flattenProps === void 0 ? void 0 : (_flattenProps$_text = _flattenProps._text) === null || _flattenProps$_text === void 0 ? void 0 : _flattenProps$_text.color);\n  flattenProps._text = contrastTextColor && ((_flattenProps2 = flattenProps) === null || _flattenProps2 === void 0 ? void 0 : (_flattenProps2$_text = _flattenProps2._text) === null || _flattenProps2$_text === void 0 ? void 0 : _flattenProps2$_text.color) === undefined ? _objectSpread({\n    color: contrastTextColor\n  }, flattenProps._text) : flattenProps._text;\n  var resolvedProps = omitUndefined(_objectSpread(_objectSpread(_objectSpread({}, flattenProps), ignoredProps), gradientProps)); // STEP 6: Return\n  // flattenProps = {};\n  // propertyDepth = {};\n\n  return resolvedProps;\n}","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/hooks/useThemeProps/usePropsResolutionTest.tsx"],"names":["SPREAD_PROP_SPECIFICITY_ORDER","FINAL_SPREAD_PROPS","MARGIN_MAP","mx","my","mt","mb","mr","ml","PADDING_MAP","px","py","pt","pb","pr","pl","SPREAD_PROP_SPECIFICITY_MAP","flattenedDefaultProps","specificity","prop","val","incomingProps","incomingSpecifity","newProp","compareSpecificity","merge","extractInObject","resolveResponsively","theme","useNativeBase","colorModeProps","useColorMode","componentTheme","get","incomingWithDefaultProps","propsFlattener","props","platform","Platform","colormode","state","previouslyFlattenProps","responsiveProps","propsName","flattenProps","responsivelyResolvedProps","useBreakpointResolvedProps","componentBaseStyle","currentSpecificityMap","variant","componentVariantProps","baseSpecificityMap","size","componentSizeProps","variantSpecificityMap","defaultStyles","defaultSpecificity","propsSpreader","ignore","bgProp","color","bgColor","contrastTextColor","useContrastText","resolvedProps","omitUndefined"],"mappings":"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","sourcesContent":["import get from 'lodash.get';\nimport merge from 'lodash.merge';\nimport { Platform } from 'react-native';\nimport { useNativeBase } from '../useNativeBase';\nimport { useColorMode } from '../../core/color-mode';\nimport { omitUndefined, extractInObject } from '../../theme/tools';\nimport { useContrastText } from '../useContrastText';\nimport { useBreakpointResolvedProps } from '../useBreakpointResolvedProps';\nimport { propsFlattener, compareSpecificity } from './propsFlattenerTest';\n\nconst SPREAD_PROP_SPECIFICITY_ORDER = [\n  'p',\n  'padding',\n  'px',\n  'py',\n  'pt',\n  'pb',\n  'pl',\n  'pr',\n  'paddingTop',\n  'paddingBottom',\n  'paddingLeft',\n  'paddingRight',\n  'm',\n  'margin',\n  'mx',\n  'my',\n  'mt',\n  'mb',\n  'ml',\n  'mr',\n  'marginTop',\n  'marginBottom',\n  'marginLeft',\n  'marginRight',\n];\n\nconst FINAL_SPREAD_PROPS = [\n  'paddingTop',\n  'paddingBottom',\n  'paddingLeft',\n  'paddingRight',\n  'marginTop',\n  'marginBottom',\n  'marginLeft',\n  'marginRight',\n];\n\nconst MARGIN_MAP: any = {\n  mx: ['marginRight', 'marginLeft'],\n  my: ['marginTop', 'marginBottom'],\n  mt: ['marginTop'],\n  mb: ['marginBottom'],\n  mr: ['marginRight'],\n  ml: ['marginLeft'],\n};\n\nMARGIN_MAP.margin = [...MARGIN_MAP.mx, ...MARGIN_MAP.my];\nMARGIN_MAP.m = MARGIN_MAP.margin;\nMARGIN_MAP.marginTop = MARGIN_MAP.mt;\nMARGIN_MAP.marginBottom = MARGIN_MAP.mb;\nMARGIN_MAP.marginLeft = MARGIN_MAP.ml;\nMARGIN_MAP.marginRight = MARGIN_MAP.mr;\n\nconst PADDING_MAP: any = {\n  px: ['paddingRight', 'paddingLeft'],\n  py: ['paddingTop', 'paddingBottom'],\n  pt: ['paddingTop'],\n  pb: ['paddingBottom'],\n  pr: ['paddingRight'],\n  pl: ['paddingLeft'],\n};\n\nPADDING_MAP.padding = [...PADDING_MAP.px, ...PADDING_MAP.py];\nPADDING_MAP.p = PADDING_MAP.padding;\nPADDING_MAP.paddingTop = PADDING_MAP.pt;\nPADDING_MAP.paddingBottom = PADDING_MAP.pb;\nPADDING_MAP.paddingLeft = PADDING_MAP.pl;\nPADDING_MAP.paddingRight = PADDING_MAP.pr;\n\nconst SPREAD_PROP_SPECIFICITY_MAP: any = {\n  ...PADDING_MAP,\n  ...MARGIN_MAP,\n};\n\nfunction propsSpreader(incomingProps: any, incomingSpecifity: any) {\n  const flattenedDefaultProps: any = { ...incomingProps };\n  const specificity: any = {};\n\n  SPREAD_PROP_SPECIFICITY_ORDER.forEach((prop) => {\n    if (prop in flattenedDefaultProps) {\n      const val = incomingProps[prop] || flattenedDefaultProps[prop];\n      if (!FINAL_SPREAD_PROPS.includes(prop)) {\n        delete flattenedDefaultProps[prop];\n        specificity[prop] = incomingSpecifity[prop];\n      }\n\n      SPREAD_PROP_SPECIFICITY_MAP[prop].forEach((newProp: string) => {\n        if (compareSpecificity(specificity[newProp], specificity[prop])) {\n          specificity[newProp] = incomingSpecifity[prop];\n          flattenedDefaultProps[newProp] = val;\n        }\n      });\n    }\n  });\n\n  return merge({}, flattenedDefaultProps);\n}\n\n/**\n * @summary Combines provided porps with component's theme props and resloves them.\n * @arg {string} component - Name of the component.\n * @arg {object} incomingProps - Props passed by the user.\n * @arg {object} state - dependent states.\n * @arg {object} config - configuration for resolution. Accepts key like ignoreProps, resolveResponsively.\n * @returns {object} Resolved and flattened props.\n */\nexport function usePropsResolutionTest(\n  component: string,\n  incomingProps: any,\n  state?: any,\n  config?: any\n) {\n  const [ignoredProps, cleanIncomingProps] = extractInObject(\n    incomingProps,\n    ['children', 'onPress', 'icon', 'onOpen', 'onClose'].concat(\n      config?.ignoreProps || []\n    )\n  );\n  const resolveResponsively = [\n    'colorScheme',\n    'size',\n    'variant',\n    ...(config?.resolveResponsively || []),\n  ];\n\n  const { theme } = useNativeBase();\n  const colorModeProps = useColorMode();\n\n  const componentTheme = get(theme, `components.${component}`, {});\n\n  // STEP 1: combine default props and incoming props\n\n  const incomingWithDefaultProps = merge(\n    {},\n    componentTheme.defaultProps || {},\n    cleanIncomingProps\n  );\n  // STEP 2: flatten them\n\n  let [flattenProps, specificityMap] = propsFlattener(\n    {\n      props: incomingWithDefaultProps,\n      platform: Platform.OS,\n      colormode: colorModeProps.colorMode,\n      state: state || {},\n      previouslyFlattenProps: {},\n    },\n    2\n  );\n\n  // STEP 2.5: resolving responsive props\n  const responsiveProps = {};\n  resolveResponsively.map((propsName) => {\n    if (flattenProps[propsName]) {\n      // @ts-ignore\n      responsiveProps[propsName] = flattenProps[propsName];\n    }\n  });\n\n  const responsivelyResolvedProps = useBreakpointResolvedProps(responsiveProps);\n\n  flattenProps = {\n    ...flattenProps,\n    ...responsivelyResolvedProps,\n  };\n  // STEP 3: Pass it to baseStyle, then variant and then size and resolve them.\n\n  // NOTE: Resoloving baseStyle\n  let componentBaseStyle = {},\n    flattenBaseStyle,\n    baseSpecificityMap;\n  if (componentTheme.baseStyle) {\n    componentBaseStyle =\n      typeof componentTheme.baseStyle !== 'function'\n        ? componentTheme.baseStyle\n        : componentTheme.baseStyle({\n            theme,\n            ...flattenProps,\n            ...colorModeProps,\n          });\n\n    [flattenBaseStyle, baseSpecificityMap] = propsFlattener(\n      {\n        props: componentBaseStyle,\n        platform: Platform.OS,\n        colormode: colorModeProps.colorMode,\n        state: state || {},\n        currentSpecificityMap: specificityMap,\n        previouslyFlattenProps: flattenProps,\n      },\n      1\n    );\n  }\n\n  // NOTE: Resolving variants\n\n  const variant = flattenProps.variant;\n\n  let componentVariantProps = {},\n    flattenVariantStyle,\n    variantSpecificityMap;\n  // Extracting props from variant\n  if (variant && componentTheme.variants && componentTheme.variants[variant]) {\n    componentVariantProps =\n      typeof componentTheme.variants[variant] !== 'function'\n        ? componentTheme.variants[variant]\n        : componentTheme.variants[variant]({\n            theme,\n            ...flattenProps,\n            ...colorModeProps,\n          });\n\n    [flattenVariantStyle, variantSpecificityMap] = propsFlattener(\n      {\n        props: componentVariantProps,\n        platform: Platform.OS,\n        colormode: colorModeProps.colorMode,\n        state: state || {},\n        currentSpecificityMap: baseSpecificityMap || specificityMap,\n        // NOTE: Ideally flattenBaseStyle and flattenProps should be deeply merged to create previouslyFlattenProps.\n        previouslyFlattenProps: flattenProps,\n      },\n      1\n    );\n\n    // We remove variant from original props if we found it in the componentTheme\n    //@ts-ignore\n    flattenProps.variant = undefined;\n  }\n\n  // NOTE: Resolving size\n\n  const size = flattenProps.size;\n\n  let componentSizeProps = {},\n    flattenSizeStyle,\n    sizeSpecificityMap;\n  // Extracting props from size\n  if (size && componentTheme.sizes && componentTheme.sizes[size]) {\n    // Type - sizes: {lg: 1}. Refer icon theme\n    if (\n      typeof componentTheme.sizes[size] === 'string' ||\n      typeof componentTheme.sizes[size] === 'number'\n    ) {\n      flattenProps.size = componentTheme.sizes[size];\n      //@ts-ignore\n      // componentSizeProps.size = componentTheme.sizes[size];\n    }\n    // Type - sizes: (props) => ({lg: {px: 1}}). Refer heading theme\n    else if (typeof componentTheme.sizes[size] === 'function') {\n      flattenProps.size = undefined;\n      componentSizeProps = componentTheme.sizes[size]({\n        theme,\n        ...flattenProps,\n        ...colorModeProps,\n      });\n    }\n    // Type - sizes: {lg: {px: 1}}. Refer button theme\n    else {\n      flattenProps.size = undefined;\n      componentSizeProps = componentTheme.sizes[size];\n    }\n\n    [flattenSizeStyle, sizeSpecificityMap] = propsFlattener(\n      {\n        props: componentSizeProps,\n        platform: Platform.OS,\n        colormode: colorModeProps.colorMode,\n        state: state || {},\n        currentSpecificityMap:\n          variantSpecificityMap || baseSpecificityMap || specificityMap,\n        previouslyFlattenProps: flattenProps,\n      },\n      1\n    );\n  }\n\n  // // STEP 4: merge\n  const defaultStyles = merge(\n    {},\n    flattenBaseStyle,\n    flattenVariantStyle,\n    flattenSizeStyle\n  );\n\n  for (const prop in defaultStyles) {\n    delete flattenProps[prop];\n  }\n\n  const defaultSpecificity = merge(\n    {},\n    specificityMap,\n    baseSpecificityMap,\n    variantSpecificityMap,\n    sizeSpecificityMap\n  );\n\n  flattenProps = propsSpreader(\n    { ...defaultStyles, ...flattenProps },\n    defaultSpecificity\n  );\n\n  // // STEP 5: linear Grad and contrastText\n  let ignore: any = [];\n  if (\n    flattenProps.bg?.linearGradient ||\n    flattenProps.background?.linearGradient ||\n    flattenProps.bgColor?.linearGradient ||\n    flattenProps.backgroundColor?.linearGradient\n  ) {\n    let bgProp = 'bg';\n    if (flattenProps.background?.linearGradient) {\n      bgProp = 'background';\n    } else if (flattenProps.bgColor?.linearGradient) {\n      bgProp = 'bgColor';\n    } else if (flattenProps.backgroundColor?.linearGradient) {\n      bgProp = 'backgroundColor';\n    }\n    flattenProps[bgProp].linearGradient.colors = flattenProps[\n      bgProp\n    ].linearGradient.colors.map((color: string) => {\n      return get(theme.colors, color, color);\n    });\n    ignore = ['bg', 'background', 'backgroundColor', 'bgColor'];\n  }\n  // // NOTE: seprating bg props when linearGardiant is available\n  const [gradientProps] = extractInObject(flattenProps, ignore);\n\n  const bgColor =\n    flattenProps.bg ?? flattenProps.backgroundColor ?? flattenProps.bgColor;\n\n  const contrastTextColor = useContrastText(\n    bgColor,\n    flattenProps?._text?.color\n  );\n\n  flattenProps._text =\n    contrastTextColor && flattenProps?._text?.color === undefined\n      ? {\n          color: contrastTextColor,\n          ...flattenProps._text,\n        }\n      : flattenProps._text;\n\n  const resolvedProps = omitUndefined({\n    ...flattenProps,\n    ...ignoredProps,\n    ...gradientProps,\n  });\n  // STEP 6: Return\n\n  // flattenProps = {};\n  // propertyDepth = {};\n\n  return resolvedProps;\n}\n"]},"metadata":{},"sourceType":"module"}