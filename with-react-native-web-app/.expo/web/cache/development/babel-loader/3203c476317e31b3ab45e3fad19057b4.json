{"ast":null,"code":"import { theme as defaultTheme } from './../theme';\nimport mergeWith from 'lodash.mergewith';\n\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n\nexport function extendTheme(overrides) {\n  function customizer(source, override) {\n    if (isFunction(source)) {\n      return function () {\n        var sourceValue = source.apply(void 0, arguments);\n        var overrideValue = isFunction(override) ? override.apply(void 0, arguments) : override;\n        return mergeWith({}, sourceValue, overrideValue, customizer);\n      };\n    }\n\n    return undefined;\n  }\n\n  for (var _len = arguments.length, restOverrides = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    restOverrides[_key - 1] = arguments[_key];\n  }\n\n  var finalOverrides = [overrides].concat(restOverrides).reduce(function (prevValue, currentValue) {\n    return mergeWith({}, prevValue, currentValue, customizer);\n  }, defaultTheme);\n  return finalOverrides;\n}\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/module/core/extendTheme.js"],"names":["theme","restOverrides","isFunction","sourceValue","source","overrideValue","override","mergeWith","finalOverrides"],"mappings":"AAAA,SAASA,KAAK,IAAd,YAAA,QAAA,YAAA;AACA,OAAA,SAAA,MAAA,kBAAA;;AAEA,SAAA,UAAA,CAAA,KAAA,EAA2B;EACzB,OAAO,OAAA,KAAA,KAAP,UAAA;AACD;;AAED,OAAO,SAAA,WAAA,CAAA,SAAA,EAAkD;EACvD,SAAA,UAAA,CAAA,MAAA,EAAA,QAAA,EAAsC;IACpC,IAAIE,UAAU,CAAd,MAAc,CAAd,EAAwB;MACtB,OAAO,YAAa;QAClB,IAAMC,WAAW,GAAGC,MAAM,CAANA,KAAAA,CAAAA,KAAAA,CAAAA,EAApB,SAAoBA,CAApB;QACA,IAAMC,aAAa,GAAGH,UAAU,CAAVA,QAAU,CAAVA,GAAuBI,QAAQ,CAARA,KAAAA,CAAAA,KAAAA,CAAAA,EAAvBJ,SAAuBI,CAAvBJ,GAAtB,QAAA;QACA,OAAOK,SAAS,CAAA,EAAA,EAAA,WAAA,EAAA,aAAA,EAAhB,UAAgB,CAAhB;MAHF,CAAA;IAKD;;IAED,OAAA,SAAA;EACD;;EAXsD,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAfN,aAAe,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;IAAfA,aAAe,CAAA,IAAA,GAAA,CAAA,CAAfA,GAAe,SAAA,CAAA,IAAA,CAAfA;EAAe;;EAavD,IAAMO,cAAc,GAAG,CAAA,SAAA,EAAA,MAAA,CAAA,aAAA,EAAA,MAAA,CAAqC,UAAA,SAAA,EAAA,YAAA,EAA6B;IACvF,OAAOD,SAAS,CAAA,EAAA,EAAA,SAAA,EAAA,YAAA,EAAhB,UAAgB,CAAhB;EADqB,CAAA,EAAvB,YAAuB,CAAvB;EAGA,OAAA,cAAA;AACD","sourcesContent":["import { theme as defaultTheme } from './../theme';\nimport mergeWith from 'lodash.mergewith';\n\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n\nexport function extendTheme(overrides, ...restOverrides) {\n  function customizer(source, override) {\n    if (isFunction(source)) {\n      return (...args) => {\n        const sourceValue = source(...args);\n        const overrideValue = isFunction(override) ? override(...args) : override;\n        return mergeWith({}, sourceValue, overrideValue, customizer);\n      };\n    }\n\n    return undefined;\n  }\n\n  const finalOverrides = [overrides, ...restOverrides].reduce((prevValue, currentValue) => {\n    return mergeWith({}, prevValue, currentValue, customizer);\n  }, defaultTheme);\n  return finalOverrides;\n}\n//# sourceMappingURL=extendTheme.js.map"]},"metadata":{},"sourceType":"module"}