{"ast":null,"code":"/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport { MONOSPACE_FONT_STACK, SYSTEM_FONT_STACK, STYLE_SHORT_FORM_EXPANSIONS } from './constants';\nimport normalizeValueWithProperty from './normalizeValueWithProperty';\n/**\n * The browser implements the CSS cascade, where the order of properties is a\n * factor in determining which styles to paint. React Native is different. It\n * gives giving precedence to the more specific style property. For example,\n * the value of `paddingTop` takes precedence over that of `padding`.\n *\n * This module creates mutally exclusive style declarations by expanding all of\n * React Native's supported shortform properties (e.g. `padding`) to their\n * longfrom equivalents.\n */\n\nvar emptyObject = {};\nvar supportsCSS3TextDecoration = !canUseDOM || window.CSS != null && window.CSS.supports != null && (window.CSS.supports('text-decoration-line', 'none') || window.CSS.supports('-webkit-text-decoration-line', 'none'));\n/**\n * Transform\n */\n// { scale: 2 } => 'scale(2)'\n// { translateX: 20 } => 'translateX(20px)'\n\nvar mapTransform = function mapTransform(transform) {\n  var type = Object.keys(transform)[0];\n  var value = normalizeValueWithProperty(transform[type], type);\n  return type + \"(\" + value + \")\";\n}; // [1,2,3,4,5,6] => 'matrix3d(1,2,3,4,5,6)'\n\n\nvar convertTransformMatrix = function convertTransformMatrix(transformMatrix) {\n  var matrix = transformMatrix.join(',');\n  return \"matrix3d(\" + matrix + \")\";\n};\n\nvar resolveTransform = function resolveTransform(resolvedStyle, style) {\n  var transform = style.transform;\n\n  if (Array.isArray(style.transform)) {\n    transform = style.transform.map(mapTransform).join(' ');\n  } else if (style.transformMatrix) {\n    transform = convertTransformMatrix(style.transformMatrix);\n  }\n\n  resolvedStyle.transform = transform;\n};\n/**\n * Reducer\n */\n\n\nvar createReactDOMStyle = function createReactDOMStyle(style) {\n  if (!style) {\n    return emptyObject;\n  }\n\n  var resolvedStyle = {};\n  Object.keys(style).sort().forEach(function (prop) {\n    var value = normalizeValueWithProperty(style[prop], prop); // Ignore everything else with a null value\n\n    if (value == null) {\n      return;\n    }\n\n    switch (prop) {\n      // Ignore some React Native styles\n      case 'aspectRatio':\n      case 'elevation':\n      case 'overlayColor':\n      case 'resizeMode':\n      case 'tintColor':\n        {\n          break;\n        }\n      // TODO: remove once this issue is fixed\n      // https://github.com/rofrischmann/inline-style-prefixer/issues/159\n\n      case 'backgroundClip':\n        {\n          if (value === 'text') {\n            resolvedStyle.backgroundClip = value;\n            resolvedStyle.WebkitBackgroundClip = value;\n          }\n\n          break;\n        }\n      // The 'flex' property value in React Native must be a positive integer,\n      // 0, or -1.\n\n      case 'flex':\n        {\n          if (value > 0) {\n            resolvedStyle.flexGrow = value;\n            resolvedStyle.flexShrink = 1;\n            resolvedStyle.flexBasis = '0%';\n          } else if (value === 0) {\n            resolvedStyle.flexGrow = 0;\n            resolvedStyle.flexShrink = 0;\n            resolvedStyle.flexBasis = '0%';\n          } else if (value === -1) {\n            resolvedStyle.flexGrow = 0;\n            resolvedStyle.flexShrink = 1;\n            resolvedStyle.flexBasis = 'auto';\n          }\n\n          break;\n        }\n\n      case 'font':\n        {\n          resolvedStyle[prop] = value.replace('System', SYSTEM_FONT_STACK);\n          break;\n        }\n\n      case 'fontFamily':\n        {\n          if (value.indexOf('System') > -1) {\n            var stack = value.split(/,\\s*/);\n            stack[stack.indexOf('System')] = SYSTEM_FONT_STACK;\n            resolvedStyle[prop] = stack.join(',');\n          } else if (value === 'monospace') {\n            resolvedStyle[prop] = MONOSPACE_FONT_STACK;\n          } else {\n            resolvedStyle[prop] = value;\n          }\n\n          break;\n        }\n\n      case 'fontVariant':\n        {\n          if (Array.isArray(value) && value.length > 0) {\n            resolvedStyle.fontVariant = value.join(' ');\n          }\n\n          break;\n        }\n\n      case 'textAlignVertical':\n        {\n          resolvedStyle.verticalAlign = value === 'center' ? 'middle' : value;\n          break;\n        }\n\n      case 'textDecorationLine':\n        {\n          // use 'text-decoration' for browsers that only support CSS2\n          // text-decoration (e.g., IE, Edge)\n          if (!supportsCSS3TextDecoration) {\n            resolvedStyle.textDecoration = value;\n          } else {\n            resolvedStyle.textDecorationLine = value;\n          }\n\n          break;\n        }\n\n      case 'transform':\n      case 'transformMatrix':\n        {\n          resolveTransform(resolvedStyle, style);\n          break;\n        }\n\n      case 'writingDirection':\n        {\n          resolvedStyle.direction = value;\n          break;\n        }\n\n      default:\n        {\n          var longFormProperties = STYLE_SHORT_FORM_EXPANSIONS[prop];\n\n          if (longFormProperties) {\n            longFormProperties.forEach(function (longForm, i) {\n              // The value of any longform property in the original styles takes\n              // precedence over the shortform's value.\n              if (typeof style[longForm] === 'undefined') {\n                resolvedStyle[longForm] = value;\n              }\n            });\n          } else {\n            resolvedStyle[prop] = Array.isArray(value) ? value.join(',') : value;\n          }\n        }\n    }\n  });\n  return resolvedStyle;\n};\n\nexport default createReactDOMStyle;\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/react-native-web/dist/exports/StyleSheet/createReactDOMStyle.js"],"names":["emptyObject","supportsCSS3TextDecoration","window","mapTransform","type","Object","value","normalizeValueWithProperty","transform","convertTransformMatrix","matrix","transformMatrix","resolveTransform","style","Array","resolvedStyle","createReactDOMStyle","stack","longFormProperties","STYLE_SHORT_FORM_EXPANSIONS"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport { MONOSPACE_FONT_STACK, SYSTEM_FONT_STACK, STYLE_SHORT_FORM_EXPANSIONS } from './constants';\nimport normalizeValueWithProperty from './normalizeValueWithProperty';\n/**\n * The browser implements the CSS cascade, where the order of properties is a\n * factor in determining which styles to paint. React Native is different. It\n * gives giving precedence to the more specific style property. For example,\n * the value of `paddingTop` takes precedence over that of `padding`.\n *\n * This module creates mutally exclusive style declarations by expanding all of\n * React Native's supported shortform properties (e.g. `padding`) to their\n * longfrom equivalents.\n */\n\nvar emptyObject = {};\nvar supportsCSS3TextDecoration = !canUseDOM || window.CSS != null && window.CSS.supports != null && (window.CSS.supports('text-decoration-line', 'none') || window.CSS.supports('-webkit-text-decoration-line', 'none'));\n/**\n * Transform\n */\n// { scale: 2 } => 'scale(2)'\n// { translateX: 20 } => 'translateX(20px)'\n\nvar mapTransform = function mapTransform(transform) {\n  var type = Object.keys(transform)[0];\n  var value = normalizeValueWithProperty(transform[type], type);\n  return type + \"(\" + value + \")\";\n}; // [1,2,3,4,5,6] => 'matrix3d(1,2,3,4,5,6)'\n\n\nvar convertTransformMatrix = function convertTransformMatrix(transformMatrix) {\n  var matrix = transformMatrix.join(',');\n  return \"matrix3d(\" + matrix + \")\";\n};\n\nvar resolveTransform = function resolveTransform(resolvedStyle, style) {\n  var transform = style.transform;\n\n  if (Array.isArray(style.transform)) {\n    transform = style.transform.map(mapTransform).join(' ');\n  } else if (style.transformMatrix) {\n    transform = convertTransformMatrix(style.transformMatrix);\n  }\n\n  resolvedStyle.transform = transform;\n};\n/**\n * Reducer\n */\n\n\nvar createReactDOMStyle = function createReactDOMStyle(style) {\n  if (!style) {\n    return emptyObject;\n  }\n\n  var resolvedStyle = {};\n  Object.keys(style).sort().forEach(function (prop) {\n    var value = normalizeValueWithProperty(style[prop], prop); // Ignore everything else with a null value\n\n    if (value == null) {\n      return;\n    }\n\n    switch (prop) {\n      // Ignore some React Native styles\n      case 'aspectRatio':\n      case 'elevation':\n      case 'overlayColor':\n      case 'resizeMode':\n      case 'tintColor':\n        {\n          break;\n        }\n      // TODO: remove once this issue is fixed\n      // https://github.com/rofrischmann/inline-style-prefixer/issues/159\n\n      case 'backgroundClip':\n        {\n          if (value === 'text') {\n            resolvedStyle.backgroundClip = value;\n            resolvedStyle.WebkitBackgroundClip = value;\n          }\n\n          break;\n        }\n      // The 'flex' property value in React Native must be a positive integer,\n      // 0, or -1.\n\n      case 'flex':\n        {\n          if (value > 0) {\n            resolvedStyle.flexGrow = value;\n            resolvedStyle.flexShrink = 1;\n            resolvedStyle.flexBasis = '0%';\n          } else if (value === 0) {\n            resolvedStyle.flexGrow = 0;\n            resolvedStyle.flexShrink = 0;\n            resolvedStyle.flexBasis = '0%';\n          } else if (value === -1) {\n            resolvedStyle.flexGrow = 0;\n            resolvedStyle.flexShrink = 1;\n            resolvedStyle.flexBasis = 'auto';\n          }\n\n          break;\n        }\n\n      case 'font':\n        {\n          resolvedStyle[prop] = value.replace('System', SYSTEM_FONT_STACK);\n          break;\n        }\n\n      case 'fontFamily':\n        {\n          if (value.indexOf('System') > -1) {\n            var stack = value.split(/,\\s*/);\n            stack[stack.indexOf('System')] = SYSTEM_FONT_STACK;\n            resolvedStyle[prop] = stack.join(',');\n          } else if (value === 'monospace') {\n            resolvedStyle[prop] = MONOSPACE_FONT_STACK;\n          } else {\n            resolvedStyle[prop] = value;\n          }\n\n          break;\n        }\n\n      case 'fontVariant':\n        {\n          if (Array.isArray(value) && value.length > 0) {\n            resolvedStyle.fontVariant = value.join(' ');\n          }\n\n          break;\n        }\n\n      case 'textAlignVertical':\n        {\n          resolvedStyle.verticalAlign = value === 'center' ? 'middle' : value;\n          break;\n        }\n\n      case 'textDecorationLine':\n        {\n          // use 'text-decoration' for browsers that only support CSS2\n          // text-decoration (e.g., IE, Edge)\n          if (!supportsCSS3TextDecoration) {\n            resolvedStyle.textDecoration = value;\n          } else {\n            resolvedStyle.textDecorationLine = value;\n          }\n\n          break;\n        }\n\n      case 'transform':\n      case 'transformMatrix':\n        {\n          resolveTransform(resolvedStyle, style);\n          break;\n        }\n\n      case 'writingDirection':\n        {\n          resolvedStyle.direction = value;\n          break;\n        }\n\n      default:\n        {\n          var longFormProperties = STYLE_SHORT_FORM_EXPANSIONS[prop];\n\n          if (longFormProperties) {\n            longFormProperties.forEach(function (longForm, i) {\n              // The value of any longform property in the original styles takes\n              // precedence over the shortform's value.\n              if (typeof style[longForm] === 'undefined') {\n                resolvedStyle[longForm] = value;\n              }\n            });\n          } else {\n            resolvedStyle[prop] = Array.isArray(value) ? value.join(',') : value;\n          }\n        }\n    }\n  });\n  return resolvedStyle;\n};\n\nexport default createReactDOMStyle;"]},"metadata":{},"sourceType":"module"}