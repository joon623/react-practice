{"ast":null,"code":"import _slicedToArray from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport get from 'lodash.get';\nimport merge from 'lodash.merge';\nimport isEmpty from 'lodash.isempty';\nimport Platform from \"react-native-web/dist/cjs/exports/Platform\";\nimport { useNativeBase } from '../useNativeBase';\nimport { useColorMode } from '../../core/color-mode';\nimport { omitUndefined, extractInObject } from '../../theme/tools';\nimport { useBreakpointResolvedProps } from '../useBreakpointResolvedProps';\nimport { propsFlattener, compareSpecificity } from './propsFlattener';\nimport { useResponsiveSSRProps } from '../useResponsiveSSRProps';\nimport React from 'react';\nimport { ResponsiveQueryContext } from '../../utils/useResponsiveQuery/ResponsiveQueryProvider';\nvar SPREAD_PROP_SPECIFICITY_ORDER = ['p', 'padding', 'px', 'py', 'pt', 'pb', 'pl', 'pr', 'paddingTop', 'paddingBottom', 'paddingLeft', 'paddingRight', 'm', 'margin', 'mx', 'my', 'mt', 'mb', 'ml', 'mr', 'marginTop', 'marginBottom', 'marginLeft', 'marginRight'];\nvar FINAL_SPREAD_PROPS = ['paddingTop', 'paddingBottom', 'paddingLeft', 'paddingRight', 'marginTop', 'marginBottom', 'marginLeft', 'marginRight'];\nvar MARGIN_MAP = {\n  mx: ['marginRight', 'marginLeft'],\n  my: ['marginTop', 'marginBottom'],\n  mt: ['marginTop'],\n  mb: ['marginBottom'],\n  mr: ['marginRight'],\n  ml: ['marginLeft']\n};\nMARGIN_MAP.margin = [].concat(_toConsumableArray(MARGIN_MAP.mx), _toConsumableArray(MARGIN_MAP.my));\nMARGIN_MAP.m = MARGIN_MAP.margin;\nMARGIN_MAP.marginTop = MARGIN_MAP.mt;\nMARGIN_MAP.marginBottom = MARGIN_MAP.mb;\nMARGIN_MAP.marginLeft = MARGIN_MAP.ml;\nMARGIN_MAP.marginRight = MARGIN_MAP.mr;\nvar PADDING_MAP = {\n  px: ['paddingRight', 'paddingLeft'],\n  py: ['paddingTop', 'paddingBottom'],\n  pt: ['paddingTop'],\n  pb: ['paddingBottom'],\n  pr: ['paddingRight'],\n  pl: ['paddingLeft']\n};\nPADDING_MAP.padding = [].concat(_toConsumableArray(PADDING_MAP.px), _toConsumableArray(PADDING_MAP.py));\nPADDING_MAP.p = PADDING_MAP.padding;\nPADDING_MAP.paddingTop = PADDING_MAP.pt;\nPADDING_MAP.paddingBottom = PADDING_MAP.pb;\nPADDING_MAP.paddingLeft = PADDING_MAP.pl;\nPADDING_MAP.paddingRight = PADDING_MAP.pr;\n\nvar SPREAD_PROP_SPECIFICITY_MAP = _objectSpread(_objectSpread({}, PADDING_MAP), MARGIN_MAP);\n\nfunction propsSpreader(incomingProps, incomingSpecifity) {\n  var flattenedDefaultProps = _objectSpread({}, incomingProps);\n\n  var specificity = {};\n  SPREAD_PROP_SPECIFICITY_ORDER.forEach(function (prop) {\n    if (prop in flattenedDefaultProps) {\n      var val = incomingProps[prop] || flattenedDefaultProps[prop];\n\n      if (!FINAL_SPREAD_PROPS.includes(prop)) {\n        delete flattenedDefaultProps[prop];\n        specificity[prop] = incomingSpecifity[prop];\n      }\n\n      SPREAD_PROP_SPECIFICITY_MAP[prop].forEach(function (newProp) {\n        if (compareSpecificity(specificity[newProp], specificity[prop])) {\n          specificity[newProp] = incomingSpecifity[prop];\n          flattenedDefaultProps[newProp] = val;\n        }\n      });\n    }\n  });\n  return merge({}, flattenedDefaultProps);\n}\n/**\n * @summary Combines provided porps with component's theme props and resloves them.\n * @arg {string} component - Name of the component.\n * @arg {object} incomingProps - Props passed by the user.\n * @arg {object} state - dependent states.\n * @arg {object} config - configuration for resolution. Accepts key like ignoreProps, resolveResponsively.\n * @returns {object} Resolved and flattened props.\n */\n\n\nexport function usePropsResolution(component, incomingProps, state, config) {\n  var _ref;\n\n  var _useNativeBase = useNativeBase(),\n      theme = _useNativeBase.theme;\n\n  var componentTheme = (_ref = config === null || config === void 0 ? void 0 : config.componentTheme) !== null && _ref !== void 0 ? _ref : get(theme, \"components.\".concat(component), {});\n\n  if (true && incomingProps.debug) {\n    /* eslint-disable-next-line */\n    console.log(\"%c\".concat(component), 'background: #d97706; color: #111; font-weight: 700; padding: 2px 8px;');\n    /* eslint-disable-next-line */\n\n    console.log(\"%cusePropsResolution\", 'background: #4b5563; color: #d97706; font-weight: 700; padding: 2px 8px;');\n    /* eslint-disable-next-line */\n\n    console.log('%c incomingProps: ', 'color: #4ade80; font-weight: 700;', incomingProps);\n    /* eslint-disable-next-line */\n\n    console.log('%c state: ', 'color: #4ade80; font-weight: 700;', state);\n    /* eslint-disable-next-line */\n\n    console.log('%c componentTheme: ', 'color: #4ade80; font-weight: 700;', componentTheme);\n  }\n\n  var resolvedProps = usePropsResolutionWithComponentTheme(componentTheme, incomingProps, state, config); // Not Resolve theme props and pseudo props\n\n  if (incomingProps !== null && incomingProps !== void 0 && incomingProps.INTERNAL_notResolveThemeAndPseudoProps) {\n    delete incomingProps.INTERNAL_notResolveThemeAndPseudoProps;\n    return incomingProps;\n  }\n\n  if (true && incomingProps.debug) {\n    /* eslint-disable-next-line */\n    console.log('%c resolvedProps: ', 'color: #22d3ee; font-weight: 700;', resolvedProps);\n  }\n\n  return resolvedProps;\n}\nexport var usePropsResolutionWithComponentTheme = function usePropsResolutionWithComponentTheme(componentTheme, incomingProps, state, config) {\n  var modifiedPropsForSSR = useResponsiveSSRProps(incomingProps);\n\n  var _extractInObject = extractInObject(modifiedPropsForSSR, ['children', 'onPress', 'icon', 'onOpen', 'onClose'].concat((config === null || config === void 0 ? void 0 : config.ignoreProps) || [])),\n      _extractInObject2 = _slicedToArray(_extractInObject, 2),\n      ignoredProps = _extractInObject2[0],\n      cleanIncomingProps = _extractInObject2[1];\n\n  var responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  var disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n  var resolveResponsively = ['colorScheme', 'size', 'variant'].concat(_toConsumableArray((config === null || config === void 0 ? void 0 : config.resolveResponsively) || []));\n\n  var _useNativeBase2 = useNativeBase(),\n      theme = _useNativeBase2.theme;\n\n  var colorModeProps = useColorMode();\n  var extendedTheme = [];\n\n  if (config !== null && config !== void 0 && config.extendTheme) {\n    config === null || config === void 0 ? void 0 : config.extendTheme.map(function (componentName) {\n      extendedTheme.push(get(theme, \"components.\".concat(componentName), {}));\n    });\n  }\n\n  if (!isEmpty(componentTheme)) extendedTheme.push(componentTheme);\n\n  var resolveComponentTheme = function resolveComponentTheme(themeType, providedTheme) {\n    try {\n      if (themeType[1]) {\n        return typeof providedTheme[themeType[0]][themeType[1]] !== 'function' ? providedTheme[themeType[0]][themeType[1]] : providedTheme[themeType[0]][themeType[1]](_objectSpread(_objectSpread({\n          theme: theme\n        }, incomingWithDefaultProps), colorModeProps));\n      } else {\n        return typeof providedTheme[themeType[0]] !== 'function' ? providedTheme[themeType[0]] : providedTheme[themeType[0]](_objectSpread(_objectSpread({\n          theme: theme\n        }, incomingWithDefaultProps), colorModeProps));\n      }\n    } catch (_unused) {\n      return {};\n    }\n  };\n\n  var callPropsFlattener = function callPropsFlattener() {\n    var targetProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var latestSpecifictyMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var specificity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    return propsFlattener({\n      props: true && cleanIncomingProps.debug ? _objectSpread(_objectSpread({}, targetProps), {}, {\n        debug: true\n      }) : targetProps,\n      platform: Platform.OS,\n      colormode: colorModeProps.colorMode,\n      state: state || {},\n      currentSpecificityMap: latestSpecifictyMap,\n      previouslyFlattenProps: flattenProps || {},\n      cascadePseudoProps: config === null || config === void 0 ? void 0 : config.cascadePseudoProps\n    }, specificity);\n  }; // STEP 1: combine default props and incoming props\n\n\n  var incomingWithDefaultProps = merge({}, componentTheme.defaultProps || {}, cleanIncomingProps); // STEP 1.5: resolving component theme\n\n  var combinedBaseStyle = {};\n  var combinedVariantStyle = {};\n  var combinedSizeStyle = {};\n  extendedTheme.map(function (extededComponentTheme) {\n    if (extededComponentTheme.baseStyle) {\n      combinedBaseStyle = _objectSpread(_objectSpread({}, combinedBaseStyle), resolveComponentTheme(['baseStyle'], extededComponentTheme));\n    }\n\n    if (incomingWithDefaultProps.variant) {\n      if (extededComponentTheme.variants) {\n        combinedVariantStyle = _objectSpread(_objectSpread({}, combinedVariantStyle), resolveComponentTheme(['variants', incomingWithDefaultProps.variant], extededComponentTheme));\n      }\n    }\n\n    if (incomingWithDefaultProps.size && extededComponentTheme !== null && extededComponentTheme !== void 0 && extededComponentTheme.sizes && extededComponentTheme !== null && extededComponentTheme !== void 0 && extededComponentTheme.sizes[incomingWithDefaultProps.size]) {\n      if (typeof extededComponentTheme.sizes[incomingWithDefaultProps.size] === 'string' || typeof extededComponentTheme.sizes[incomingWithDefaultProps.size] === 'number') {\n        incomingWithDefaultProps.size = extededComponentTheme.sizes[incomingWithDefaultProps.size];\n      } else {\n        combinedSizeStyle = _objectSpread(_objectSpread({}, combinedSizeStyle), resolveComponentTheme(['sizes', incomingWithDefaultProps.size], extededComponentTheme));\n        incomingWithDefaultProps.size = undefined;\n      }\n    }\n  }); // STEP 2: flatten them\n\n  if (true && cleanIncomingProps.debug) {\n    /* eslint-disable-next-line */\n    console.log(\"%cFlattening incoming and Default\", 'background: #4b5563; color: #FFF; font-weight: 700; padding: 2px 8px;');\n  } //TODO: hack\n\n\n  var flattenProps, specificityMap;\n\n  var _callPropsFlattener = callPropsFlattener(incomingWithDefaultProps, {}, 2);\n\n  var _callPropsFlattener2 = _slicedToArray(_callPropsFlattener, 2);\n\n  flattenProps = _callPropsFlattener2[0];\n  specificityMap = _callPropsFlattener2[1];\n  var responsiveProps = {};\n\n  if (disableCSSMediaQueries) {\n    // STEP 2.5: resolving responsive props\n    resolveResponsively.map(function (propsName) {\n      if (flattenProps[propsName]) {\n        // @ts-ignore\n        responsiveProps[propsName] = flattenProps[propsName];\n      }\n    });\n  }\n\n  if (resolveResponsively.includes('direction')) {\n    var propName = 'direction';\n\n    if (flattenProps[propName]) {\n      // @ts-ignore\n      responsiveProps[propName] = flattenProps[propName];\n    }\n  }\n\n  var responsivelyResolvedProps = useBreakpointResolvedProps(responsiveProps);\n  flattenProps = _objectSpread(_objectSpread({}, flattenProps), responsivelyResolvedProps); // STEP 3: Pass it to baseStyle, then variant and then size and resolve them.\n  // NOTE: Resoloving baseStyle\n\n  var flattenBaseStyle, baseSpecificityMap;\n\n  if (combinedBaseStyle) {\n    if (true && cleanIncomingProps.debug) {\n      /* eslint-disable-next-line */\n      console.log(\"%cFlattening baseStyle\", 'background: #4b5563; color: #eee; font-weight: 700; padding: 2px 8px;');\n    }\n\n    var _callPropsFlattener3 = callPropsFlattener(combinedBaseStyle, specificityMap);\n\n    var _callPropsFlattener4 = _slicedToArray(_callPropsFlattener3, 2);\n\n    flattenBaseStyle = _callPropsFlattener4[0];\n    baseSpecificityMap = _callPropsFlattener4[1];\n  } // NOTE: Resolving variants\n\n\n  var flattenVariantStyle, variantSpecificityMap; // Extracting props from variant\n\n  if (combinedVariantStyle) {\n    if (true && cleanIncomingProps.debug) {\n      /* eslint-disable-next-line */\n      console.log(\"%cFlattening variantStyle\", 'background: #4b5563; color: #FFF; font-weight: 700; padding: 2px 8px;');\n    }\n\n    var _callPropsFlattener5 = callPropsFlattener(combinedVariantStyle, baseSpecificityMap || specificityMap);\n\n    var _callPropsFlattener6 = _slicedToArray(_callPropsFlattener5, 2);\n\n    flattenVariantStyle = _callPropsFlattener6[0];\n    variantSpecificityMap = _callPropsFlattener6[1];\n    // We remove variant from original props if we found it in the componentTheme\n    //@ts-ignore\n    flattenProps.variant = undefined;\n  } // NOTE: Resolving size\n\n\n  var flattenSizeStyle, sizeSpecificityMap; // Extracting props from size\n\n  if (combinedSizeStyle) {\n    if (true && cleanIncomingProps.debug) {\n      /* eslint-disable-next-line */\n      console.log(\"%cFlattening sizeStyle\", 'background: #4b5563; color: #FFF; font-weight: 700; padding: 2px 8px;');\n    }\n\n    var _callPropsFlattener7 = callPropsFlattener(combinedSizeStyle, variantSpecificityMap || baseSpecificityMap || specificityMap);\n\n    var _callPropsFlattener8 = _slicedToArray(_callPropsFlattener7, 2);\n\n    flattenSizeStyle = _callPropsFlattener8[0];\n    sizeSpecificityMap = _callPropsFlattener8[1];\n  } // STEP 4: merge\n\n\n  var defaultStyles = merge({}, flattenBaseStyle, flattenVariantStyle, flattenSizeStyle);\n  /*Resolve all the internal used Pseudo Props*/\n\n  var resolvePseudoProps = function resolvePseudoProps(flatPseudoProp, baseStylePseudoProp) {\n    for (var prop in flatPseudoProp) {\n      baseStylePseudoProp[prop] = flatPseudoProp[prop];\n      /* Replace all the similar prop from from internal props */\n    }\n\n    return baseStylePseudoProp;\n  };\n\n  for (var prop in defaultStyles) {\n    if (prop.startsWith('_') && flattenProps.hasOwnProperty(prop)) {\n      /*Resolve all the internal used Pseudo Props*/\n      defaultStyles[prop] = resolvePseudoProps(flattenProps[prop], defaultStyles[prop]);\n    }\n\n    delete flattenProps[prop];\n  }\n\n  var defaultSpecificity = merge({}, specificityMap, baseSpecificityMap, variantSpecificityMap, sizeSpecificityMap);\n  flattenProps = propsSpreader(_objectSpread(_objectSpread({}, defaultStyles), flattenProps), defaultSpecificity);\n  var resolvedProps = omitUndefined(_objectSpread(_objectSpread({}, flattenProps), ignoredProps)); // STEP 5: Return\n\n  return resolvedProps;\n};","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/hooks/useThemeProps/usePropsResolution.tsx"],"names":["SPREAD_PROP_SPECIFICITY_ORDER","FINAL_SPREAD_PROPS","MARGIN_MAP","mx","my","mt","mb","mr","ml","PADDING_MAP","px","py","pt","pb","pr","pl","SPREAD_PROP_SPECIFICITY_MAP","flattenedDefaultProps","specificity","prop","val","incomingProps","incomingSpecifity","newProp","compareSpecificity","merge","theme","useNativeBase","componentTheme","get","console","resolvedProps","usePropsResolutionWithComponentTheme","modifiedPropsForSSR","useResponsiveSSRProps","extractInObject","responsiveQueryContext","React","disableCSSMediaQueries","resolveResponsively","colorModeProps","useColorMode","extendedTheme","config","componentName","isEmpty","resolveComponentTheme","themeType","providedTheme","callPropsFlattener","targetProps","latestSpecifictyMap","propsFlattener","props","cleanIncomingProps","debug","platform","Platform","colormode","state","currentSpecificityMap","previouslyFlattenProps","flattenProps","cascadePseudoProps","incomingWithDefaultProps","combinedBaseStyle","combinedVariantStyle","combinedSizeStyle","extededComponentTheme","responsiveProps","propsName","propName","responsivelyResolvedProps","useBreakpointResolvedProps","baseSpecificityMap","variantSpecificityMap","defaultStyles","resolvePseudoProps","baseStylePseudoProp","flatPseudoProp","defaultSpecificity","propsSpreader","omitUndefined"],"mappings":"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","sourcesContent":["import get from 'lodash.get';\nimport merge from 'lodash.merge';\nimport isEmpty from 'lodash.isempty';\nimport { Platform } from 'react-native';\nimport { useNativeBase } from '../useNativeBase';\nimport { useColorMode } from '../../core/color-mode';\nimport { omitUndefined, extractInObject } from '../../theme/tools';\nimport { useBreakpointResolvedProps } from '../useBreakpointResolvedProps';\nimport {\n  propsFlattener,\n  compareSpecificity,\n  IStateProps,\n} from './propsFlattener';\nimport { useResponsiveSSRProps } from '../useResponsiveSSRProps';\nimport React from 'react';\nimport { ResponsiveQueryContext } from '../../utils/useResponsiveQuery/ResponsiveQueryProvider';\nimport type { ComponentTheme } from '../../theme';\n\nconst SPREAD_PROP_SPECIFICITY_ORDER = [\n  'p',\n  'padding',\n  'px',\n  'py',\n  'pt',\n  'pb',\n  'pl',\n  'pr',\n  'paddingTop',\n  'paddingBottom',\n  'paddingLeft',\n  'paddingRight',\n  'm',\n  'margin',\n  'mx',\n  'my',\n  'mt',\n  'mb',\n  'ml',\n  'mr',\n  'marginTop',\n  'marginBottom',\n  'marginLeft',\n  'marginRight',\n];\n\nconst FINAL_SPREAD_PROPS = [\n  'paddingTop',\n  'paddingBottom',\n  'paddingLeft',\n  'paddingRight',\n  'marginTop',\n  'marginBottom',\n  'marginLeft',\n  'marginRight',\n];\n\nconst MARGIN_MAP: any = {\n  mx: ['marginRight', 'marginLeft'],\n  my: ['marginTop', 'marginBottom'],\n  mt: ['marginTop'],\n  mb: ['marginBottom'],\n  mr: ['marginRight'],\n  ml: ['marginLeft'],\n};\n\nMARGIN_MAP.margin = [...MARGIN_MAP.mx, ...MARGIN_MAP.my];\nMARGIN_MAP.m = MARGIN_MAP.margin;\nMARGIN_MAP.marginTop = MARGIN_MAP.mt;\nMARGIN_MAP.marginBottom = MARGIN_MAP.mb;\nMARGIN_MAP.marginLeft = MARGIN_MAP.ml;\nMARGIN_MAP.marginRight = MARGIN_MAP.mr;\n\nconst PADDING_MAP: any = {\n  px: ['paddingRight', 'paddingLeft'],\n  py: ['paddingTop', 'paddingBottom'],\n  pt: ['paddingTop'],\n  pb: ['paddingBottom'],\n  pr: ['paddingRight'],\n  pl: ['paddingLeft'],\n};\n\nPADDING_MAP.padding = [...PADDING_MAP.px, ...PADDING_MAP.py];\nPADDING_MAP.p = PADDING_MAP.padding;\nPADDING_MAP.paddingTop = PADDING_MAP.pt;\nPADDING_MAP.paddingBottom = PADDING_MAP.pb;\nPADDING_MAP.paddingLeft = PADDING_MAP.pl;\nPADDING_MAP.paddingRight = PADDING_MAP.pr;\n\nconst SPREAD_PROP_SPECIFICITY_MAP: any = {\n  ...PADDING_MAP,\n  ...MARGIN_MAP,\n};\n\nfunction propsSpreader(incomingProps: any, incomingSpecifity: any) {\n  const flattenedDefaultProps: any = { ...incomingProps };\n  const specificity: any = {};\n\n  SPREAD_PROP_SPECIFICITY_ORDER.forEach((prop) => {\n    if (prop in flattenedDefaultProps) {\n      const val = incomingProps[prop] || flattenedDefaultProps[prop];\n      if (!FINAL_SPREAD_PROPS.includes(prop)) {\n        delete flattenedDefaultProps[prop];\n        specificity[prop] = incomingSpecifity[prop];\n      }\n\n      SPREAD_PROP_SPECIFICITY_MAP[prop].forEach((newProp: string) => {\n        if (compareSpecificity(specificity[newProp], specificity[prop])) {\n          specificity[newProp] = incomingSpecifity[prop];\n          flattenedDefaultProps[newProp] = val;\n        }\n      });\n    }\n  });\n\n  return merge({}, flattenedDefaultProps);\n}\n\n/**\n * @summary Combines provided porps with component's theme props and resloves them.\n * @arg {string} component - Name of the component.\n * @arg {object} incomingProps - Props passed by the user.\n * @arg {object} state - dependent states.\n * @arg {object} config - configuration for resolution. Accepts key like ignoreProps, resolveResponsively.\n * @returns {object} Resolved and flattened props.\n */\nexport function usePropsResolution(\n  component: string,\n  incomingProps: any,\n  state?: IStateProps,\n  config?: {\n    componentTheme?: any;\n    resolveResponsively?: string[];\n    ignoreProps?: string[];\n    cascadePseudoProps?: boolean;\n    extendTheme?: string[];\n  }\n) {\n  const { theme } = useNativeBase();\n  const componentTheme =\n    config?.componentTheme ?? get(theme, `components.${component}`, {});\n\n  if (process.env.NODE_ENV === 'development' && incomingProps.debug) {\n    /* eslint-disable-next-line */\n    console.log(\n      `%c${component}`,\n      'background: #d97706; color: #111; font-weight: 700; padding: 2px 8px;'\n    );\n    /* eslint-disable-next-line */\n    console.log(\n      `%cusePropsResolution`,\n      'background: #4b5563; color: #d97706; font-weight: 700; padding: 2px 8px;'\n    );\n    /* eslint-disable-next-line */\n    console.log(\n      '%c incomingProps: ',\n      'color: #4ade80; font-weight: 700;',\n      incomingProps\n    );\n    /* eslint-disable-next-line */\n    console.log('%c state: ', 'color: #4ade80; font-weight: 700;', state);\n    /* eslint-disable-next-line */\n    console.log(\n      '%c componentTheme: ',\n      'color: #4ade80; font-weight: 700;',\n      componentTheme\n    );\n  }\n\n  const resolvedProps = usePropsResolutionWithComponentTheme(\n    componentTheme,\n    incomingProps,\n    state,\n    config\n  );\n\n  // Not Resolve theme props and pseudo props\n  if (incomingProps?.INTERNAL_notResolveThemeAndPseudoProps) {\n    delete incomingProps.INTERNAL_notResolveThemeAndPseudoProps;\n    return incomingProps;\n  }\n\n  if (process.env.NODE_ENV === 'development' && incomingProps.debug) {\n    /* eslint-disable-next-line */\n    console.log(\n      '%c resolvedProps: ',\n      'color: #22d3ee; font-weight: 700;',\n      resolvedProps\n    );\n  }\n  return resolvedProps;\n}\n\nexport const usePropsResolutionWithComponentTheme = (\n  componentTheme: ComponentTheme,\n  incomingProps: any,\n  state?: IStateProps,\n  config?: {\n    componentTheme?: any;\n    resolveResponsively?: string[];\n    ignoreProps?: string[];\n    cascadePseudoProps?: boolean;\n    extendTheme?: string[];\n  }\n) => {\n  const modifiedPropsForSSR = useResponsiveSSRProps(incomingProps);\n\n  const [ignoredProps, cleanIncomingProps] = extractInObject(\n    modifiedPropsForSSR,\n    ['children', 'onPress', 'icon', 'onOpen', 'onClose'].concat(\n      config?.ignoreProps || []\n    )\n  );\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n  const resolveResponsively = [\n    'colorScheme',\n    'size',\n    'variant',\n    ...(config?.resolveResponsively || []),\n  ];\n\n  const { theme } = useNativeBase();\n  const colorModeProps = useColorMode();\n\n  const extendedTheme: Array<any> = [];\n  if (config?.extendTheme) {\n    config?.extendTheme.map((componentName: string) => {\n      extendedTheme.push(get(theme, `components.${componentName}`, {}));\n    });\n  }\n  if (!isEmpty(componentTheme)) extendedTheme.push(componentTheme);\n\n  const resolveComponentTheme = (\n    themeType: Array<string>,\n    providedTheme: any\n  ): any => {\n    try {\n      if (themeType[1]) {\n        return typeof providedTheme[themeType[0]][themeType[1]] !== 'function'\n          ? providedTheme[themeType[0]][themeType[1]]\n          : providedTheme[themeType[0]][themeType[1]]({\n              theme,\n              ...incomingWithDefaultProps,\n              ...colorModeProps,\n            });\n      } else {\n        return typeof providedTheme[themeType[0]] !== 'function'\n          ? providedTheme[themeType[0]]\n          : providedTheme[themeType[0]]({\n              theme,\n              ...incomingWithDefaultProps,\n              ...colorModeProps,\n            });\n      }\n    } catch {\n      return {};\n    }\n  };\n  const callPropsFlattener = (\n    targetProps = {},\n    latestSpecifictyMap = {},\n    specificity = 1\n  ): any => {\n    return propsFlattener(\n      {\n        props:\n          process.env.NODE_ENV === 'development' && cleanIncomingProps.debug\n            ? { ...targetProps, debug: true }\n            : targetProps,\n        platform: Platform.OS,\n        colormode: colorModeProps.colorMode,\n        state: state || {},\n        currentSpecificityMap: latestSpecifictyMap,\n        previouslyFlattenProps: flattenProps || {},\n        cascadePseudoProps: config?.cascadePseudoProps,\n      },\n      specificity\n    );\n  };\n\n  // STEP 1: combine default props and incoming props\n\n  const incomingWithDefaultProps = merge(\n    {},\n    componentTheme.defaultProps || {},\n    cleanIncomingProps\n  );\n\n  // STEP 1.5: resolving component theme\n  let combinedBaseStyle = {};\n  let combinedVariantStyle = {};\n  let combinedSizeStyle = {};\n  extendedTheme.map((extededComponentTheme: any) => {\n    if (extededComponentTheme.baseStyle) {\n      combinedBaseStyle = {\n        ...combinedBaseStyle,\n        ...resolveComponentTheme(['baseStyle'], extededComponentTheme),\n      };\n    }\n    if (incomingWithDefaultProps.variant) {\n      if (extededComponentTheme.variants) {\n        combinedVariantStyle = {\n          ...combinedVariantStyle,\n          ...resolveComponentTheme(\n            ['variants', incomingWithDefaultProps.variant],\n            extededComponentTheme\n          ),\n        };\n      }\n    }\n    if (\n      incomingWithDefaultProps.size &&\n      extededComponentTheme?.sizes &&\n      extededComponentTheme?.sizes[incomingWithDefaultProps.size]\n    ) {\n      if (\n        typeof extededComponentTheme.sizes[incomingWithDefaultProps.size] ===\n          'string' ||\n        typeof extededComponentTheme.sizes[incomingWithDefaultProps.size] ===\n          'number'\n      ) {\n        incomingWithDefaultProps.size =\n          extededComponentTheme.sizes[incomingWithDefaultProps.size];\n      } else {\n        combinedSizeStyle = {\n          ...combinedSizeStyle,\n          ...resolveComponentTheme(\n            ['sizes', incomingWithDefaultProps.size],\n            extededComponentTheme\n          ),\n        };\n        incomingWithDefaultProps.size = undefined;\n      }\n    }\n  });\n\n  // STEP 2: flatten them\n  if (process.env.NODE_ENV === 'development' && cleanIncomingProps.debug) {\n    /* eslint-disable-next-line */\n    console.log(\n      `%cFlattening incoming and Default`,\n      'background: #4b5563; color: #FFF; font-weight: 700; padding: 2px 8px;'\n    );\n  }\n  //TODO: hack\n  let flattenProps: any, specificityMap;\n  [flattenProps, specificityMap] = callPropsFlattener(\n    incomingWithDefaultProps,\n    {},\n    2\n  );\n  const responsiveProps = {};\n  if (disableCSSMediaQueries) {\n    // STEP 2.5: resolving responsive props\n    resolveResponsively.map((propsName) => {\n      if (flattenProps[propsName]) {\n        // @ts-ignore\n        responsiveProps[propsName] = flattenProps[propsName];\n      }\n    });\n  }\n  if (resolveResponsively.includes('direction')) {\n    const propName = 'direction';\n    if (flattenProps[propName]) {\n      // @ts-ignore\n      responsiveProps[propName] = flattenProps[propName];\n    }\n  }\n  const responsivelyResolvedProps = useBreakpointResolvedProps(responsiveProps);\n\n  flattenProps = {\n    ...flattenProps,\n    ...responsivelyResolvedProps,\n  };\n  // STEP 3: Pass it to baseStyle, then variant and then size and resolve them.\n\n  // NOTE: Resoloving baseStyle\n  let flattenBaseStyle, baseSpecificityMap;\n  if (combinedBaseStyle) {\n    if (process.env.NODE_ENV === 'development' && cleanIncomingProps.debug) {\n      /* eslint-disable-next-line */\n      console.log(\n        `%cFlattening baseStyle`,\n        'background: #4b5563; color: #eee; font-weight: 700; padding: 2px 8px;'\n      );\n    }\n    [flattenBaseStyle, baseSpecificityMap] = callPropsFlattener(\n      combinedBaseStyle,\n      specificityMap\n    );\n  }\n\n  // NOTE: Resolving variants\n  let flattenVariantStyle, variantSpecificityMap;\n  // Extracting props from variant\n  if (combinedVariantStyle) {\n    if (process.env.NODE_ENV === 'development' && cleanIncomingProps.debug) {\n      /* eslint-disable-next-line */\n      console.log(\n        `%cFlattening variantStyle`,\n        'background: #4b5563; color: #FFF; font-weight: 700; padding: 2px 8px;'\n      );\n    }\n    [flattenVariantStyle, variantSpecificityMap] = callPropsFlattener(\n      combinedVariantStyle,\n      baseSpecificityMap || specificityMap\n    );\n\n    // We remove variant from original props if we found it in the componentTheme\n    //@ts-ignore\n    flattenProps.variant = undefined;\n  }\n\n  // NOTE: Resolving size\n\n  let flattenSizeStyle, sizeSpecificityMap;\n  // Extracting props from size\n  if (combinedSizeStyle) {\n    if (process.env.NODE_ENV === 'development' && cleanIncomingProps.debug) {\n      /* eslint-disable-next-line */\n      console.log(\n        `%cFlattening sizeStyle`,\n        'background: #4b5563; color: #FFF; font-weight: 700; padding: 2px 8px;'\n      );\n    }\n    [flattenSizeStyle, sizeSpecificityMap] = callPropsFlattener(\n      combinedSizeStyle,\n      variantSpecificityMap || baseSpecificityMap || specificityMap\n    );\n  }\n\n  // STEP 4: merge\n  const defaultStyles = merge(\n    {},\n    flattenBaseStyle,\n    flattenVariantStyle,\n    flattenSizeStyle\n  );\n\n  /*Resolve all the internal used Pseudo Props*/\n  const resolvePseudoProps = (\n    flatPseudoProp: any /** Props coming from Pseudo inside flattenProps */,\n    baseStylePseudoProp: any /** Props coming from Pseudo inside defaultStyles(baseStyle) */\n  ) => {\n    for (const prop in flatPseudoProp) {\n      baseStylePseudoProp[prop] =\n        flatPseudoProp[\n          prop\n        ]; /* Replace all the similar prop from from internal props */\n    }\n    return baseStylePseudoProp;\n  };\n\n  for (const prop in defaultStyles) {\n    if (prop.startsWith('_') && flattenProps.hasOwnProperty(prop)) {\n      /*Resolve all the internal used Pseudo Props*/\n      defaultStyles[prop] = resolvePseudoProps(\n        flattenProps[prop],\n        defaultStyles[prop]\n      );\n    }\n    delete flattenProps[prop];\n  }\n\n  const defaultSpecificity = merge(\n    {},\n    specificityMap,\n    baseSpecificityMap,\n    variantSpecificityMap,\n    sizeSpecificityMap\n  );\n\n  flattenProps = propsSpreader(\n    { ...defaultStyles, ...flattenProps },\n    defaultSpecificity\n  );\n\n  const resolvedProps = omitUndefined({\n    ...flattenProps,\n    ...ignoredProps,\n  });\n\n  // STEP 5: Return\n  return resolvedProps;\n};\n"]},"metadata":{},"sourceType":"module"}