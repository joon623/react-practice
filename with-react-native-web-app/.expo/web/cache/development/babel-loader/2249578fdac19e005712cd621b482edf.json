{"ast":null,"code":"var _excluded = [\"name\"];\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { randomColor, getRandomString, mode } from '../tools';\n\nvar baseStyle = function baseStyle(props) {\n  var name = props.name,\n      colorModeProps = _objectWithoutProperties(props, _excluded);\n\n  var bg = name ? randomColor({\n    string: getRandomString(5) + name\n  }) : 'gray.400';\n  var borderColor = mode('gray.800', 'white')(colorModeProps);\n  return {\n    bg: bg,\n    borderColor: borderColor,\n    position: 'relative',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 'full',\n    _text: {\n      fontWeight: 600\n    },\n    _image: {\n      borderRadius: 'full',\n      alt: '--',\n      _alt: {\n        fontWeight: 600\n      },\n      style: {\n        height: '100%',\n        width: '100%'\n      }\n    }\n  };\n};\n\nfunction getSize(size, fontSize) {\n  return {\n    width: size,\n    height: size,\n    _text: {\n      fontSize: fontSize\n    }\n  };\n}\n\nvar sizes = {\n  'xs': getSize('6', '2xs'),\n  'sm': getSize('8', 'xs'),\n  'md': getSize('12', 'md'),\n  'lg': getSize('16', 'xl'),\n  'xl': getSize('24', '3xl'),\n  '2xl': getSize('32', '5xl')\n};\nvar defaultProps = {\n  size: 'md'\n};\nexport default {\n  baseStyle: baseStyle,\n  sizes: sizes,\n  defaultProps: defaultProps\n};","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/theme/v33x-theme/components/avatar.ts"],"names":["baseStyle","props","name","bg","randomColor","string","getRandomString","borderColor","mode","position","justifyContent","alignItems","borderRadius","_text","fontWeight","_image","alt","_alt","style","height","width","fontSize","sizes","getSize","defaultProps","size"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,WAAA,EAAA,eAAA,EAAA,IAAA,QAAA,UAAA;;AAEA,IAAMA,SAAS,GAAIC,SAAbD,SAAaC,CAAAA,KAAD,EAAgC;EAC1C,IAAEC,IAAF,GAAN,KAAM,CAAEA,IAAF;EAAA,IAAN,cAAM,GAAN,wBAAA,CAAA,KAAA,EAAA,SAAA,CAAM;;EACN,IAAMC,EAAE,GAAGD,IAAI,GACXE,WAAW,CAAC;IAAEC,MAAM,EAAEC,eAAe,CAAfA,CAAe,CAAfA,GAAqBJ;EAA/B,CAAD,CADA,GAAf,UAAA;EAGA,IAAMK,WAAW,GAAGC,IAAI,CAAA,UAAA,EAAJA,OAAI,CAAJA,CAApB,cAAoBA,CAApB;EACA,OAAO;IACLL,EADK,EACLA,EADK;IAELI,WAFK,EAELA,WAFK;IAGLE,QAAQ,EAHH,UAAA;IAILC,cAAc,EAJT,QAAA;IAKLC,UAAU,EALL,QAAA;IAMLC,YAAY,EANP,MAAA;IAOLC,KAAK,EAAE;MACLC,UAAU,EAAE;IADP,CAPF;IAULC,MAAM,EAAE;MACNH,YAAY,EADN,MAAA;MAENI,GAAG,EAFG,IAAA;MAGNC,IAAI,EAAE;QACJH,UAAU,EAAE;MADR,CAHA;MAMNI,KAAK,EAAE;QACLC,MAAM,EADD,MAAA;QAELC,KAAK,EAAE;MAFF;IAND;EAVH,CAAP;AANF,CAAA;;AA8BA,SAAA,OAAA,CAAA,IAAA,EAAA,QAAA,EAA8C;EAC5C,OAAO;IACLA,KAAK,EADA,IAAA;IAELD,MAAM,EAFD,IAAA;IAGLN,KAAK,EAAE;MACLQ,QAAQ,EAAEA;IADL;EAHF,CAAP;AAOD;;AAED,IAAMC,KAAK,GAAG;EACZ,MAAMC,OAAO,CAAA,GAAA,EADD,KACC,CADD;EAEZ,MAAMA,OAAO,CAAA,GAAA,EAFD,IAEC,CAFD;EAGZ,MAAMA,OAAO,CAAA,IAAA,EAHD,IAGC,CAHD;EAIZ,MAAMA,OAAO,CAAA,IAAA,EAJD,IAIC,CAJD;EAKZ,MAAMA,OAAO,CAAA,IAAA,EALD,KAKC,CALD;EAMZ,OAAOA,OAAO,CAAA,IAAA,EAAA,KAAA;AANF,CAAd;AASA,IAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE;AADa,CAArB;AAIA,eAAe;EACbzB,SADa,EACbA,SADa;EAEbsB,KAFa,EAEbA,KAFa;EAGbE,YAAAA,EAAAA;AAHa,CAAf","sourcesContent":["import { randomColor, getRandomString, mode } from '../tools';\n\nconst baseStyle = (props: Record<string, any>) => {\n  const { name, ...colorModeProps } = props;\n  const bg = name\n    ? randomColor({ string: getRandomString(5) + name })\n    : 'gray.400';\n  const borderColor = mode('gray.800', 'white')(colorModeProps);\n  return {\n    bg,\n    borderColor,\n    position: 'relative',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 'full',\n    _text: {\n      fontWeight: 600,\n    },\n    _image: {\n      borderRadius: 'full',\n      alt: '--',\n      _alt: {\n        fontWeight: 600,\n      },\n      style: {\n        height: '100%',\n        width: '100%',\n      },\n    },\n  };\n};\n\nfunction getSize(size: any, fontSize: string) {\n  return {\n    width: size,\n    height: size,\n    _text: {\n      fontSize: fontSize,\n    },\n  };\n}\n\nconst sizes = {\n  'xs': getSize('6', '2xs'),\n  'sm': getSize('8', 'xs'),\n  'md': getSize('12', 'md'),\n  'lg': getSize('16', 'xl'),\n  'xl': getSize('24', '3xl'),\n  '2xl': getSize('32', '5xl'),\n};\n\nconst defaultProps = {\n  size: 'md',\n};\n\nexport default {\n  baseStyle,\n  sizes,\n  defaultProps,\n};\n"]},"metadata":{},"sourceType":"module"}