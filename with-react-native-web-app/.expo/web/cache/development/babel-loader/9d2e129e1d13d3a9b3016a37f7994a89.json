{"ast":null,"code":"import _asyncToGenerator from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/regenerator\";\nimport React from 'react';\nimport AccessibilityInfo from \"react-native-web/dist/cjs/exports/AccessibilityInfo\";\nexport function useScreenReaderEnabled() {\n  _s();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      enabled = _React$useState2[0],\n      setEnabled = _React$useState2[1];\n\n  var mountedRef = React.useRef(false);\n\n  var handleSetEnabled = function handleSetEnabled(value) {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  React.useEffect(function () {\n    mountedRef.current = true;\n\n    function setInitialValue() {\n      return _setInitialValue.apply(this, arguments);\n    }\n\n    function _setInitialValue() {\n      _setInitialValue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return AccessibilityInfo.isScreenReaderEnabled();\n\n              case 2:\n                res = _context.sent;\n                handleSetEnabled(res);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _setInitialValue.apply(this, arguments);\n    }\n\n    var handler = AccessibilityInfo.addEventListener('screenReaderChanged', function (event) {\n      handleSetEnabled(event);\n    });\n    setInitialValue();\n    return function () {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n  return enabled;\n}\n\n_s(useScreenReaderEnabled, \"lYEv5EE4yQebWQ8ZJOJ3Yj+4LBc=\");\n\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/hooks/useScreenReaderEnabled.ts"],"names":["useScreenReaderEnabled","enabled","setEnabled","React","mountedRef","handleSetEnabled","res","AccessibilityInfo","handler","setInitialValue"],"mappings":";;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;;AAGA,OAAO,SAAA,sBAAA,GAAkC;EAAA,EAAA;;EACvC,IAAA,eAAA,GAA8BG,KAAK,CAALA,QAAAA,CAA9B,KAA8BA,CAA9B;EAAA,IAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;EAAA,IAAOF,OAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;EAAA,IAAgBC,UAAhB,GAAA,gBAAA,CAAA,CAAA,CAAA;;EACA,IAAME,UAAU,GAAGD,KAAK,CAALA,MAAAA,CAAnB,KAAmBA,CAAnB;;EAEA,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,KAAA,EAAoB;IAC3C,IAAID,UAAU,CAAd,OAAA,EAAwB;MACtBF,UAAU,CAAVA,KAAU,CAAVA;IACD;EAHH,CAAA;;EAMAC,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpBC,UAAU,CAAVA,OAAAA,GAAAA,IAAAA;;IADoB,SAAA,eAAA,GAAA;MAAA,OAAA,gBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;IAAA;;IAAA,SAAA,gBAAA,GAAA;MAAA,gBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAEpB,SAAA,OAAA,GAAA;QAAA,IAAA,GAAA;QAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;UAAA,OAAA,CAAA,EAAA;YAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;cAAA,KAAA,CAAA;gBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;gBAAA,OACoBG,iBAAiB,CADrC,qBACoBA,EADpB;;cAAA,KAAA,CAAA;gBACQD,GADR,GAAA,QAAA,CAAA,IACQA;gBACND,gBAAgB,CAAhBA,GAAgB,CAAhBA;;cAFF,KAAA,CAAA;cAAA,KAAA,KAAA;gBAAA,OAAA,QAAA,CAAA,IAAA,EAAA;YAAA;UAAA;QAAA,CAAA,EAAA,OAAA,CAAA;MAFoB,CAAA,CAAA,CAAA;MAAA,OAAA,gBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;IAAA;;IAOpB,IAAIG,OAAY,GAAG,iBAAiB,CAAjB,gBAAA,CAAA,qBAAA,EAEjB,UAAA,KAAA,EAAgB;MACdH,gBAAgB,CAAhBA,KAAgB,CAAhBA;IAHJ,CAAmB,CAAnB;IAOAI,eAAe;IACf,OAAO,YAAM;MACXL,UAAU,CAAVA,OAAAA,GAAAA,KAAAA;MACAG,iBAAiB,CAAjBA,mBAAAA,CAAAA,qBAAAA,EAAAA,OAAAA;IAFF,CAAA;EAfFJ,CAAAA;EAqBA,OAAA,OAAA;AACD;;GAhCeH,sB","sourcesContent":["import React from 'react';\nimport { AccessibilityInfo } from 'react-native';\n\nexport function useScreenReaderEnabled() {\n  const [enabled, setEnabled] = React.useState(false);\n  const mountedRef = React.useRef(false);\n\n  const handleSetEnabled = (value: boolean) => {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  React.useEffect(() => {\n    mountedRef.current = true;\n    async function setInitialValue() {\n      const res = await AccessibilityInfo.isScreenReaderEnabled();\n      handleSetEnabled(res);\n    }\n\n    let handler: any = AccessibilityInfo.addEventListener(\n      'screenReaderChanged',\n      (event: any) => {\n        handleSetEnabled(event);\n      }\n    );\n\n    setInitialValue();\n    return () => {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n\n  return enabled;\n}\n"]},"metadata":{},"sourceType":"module"}