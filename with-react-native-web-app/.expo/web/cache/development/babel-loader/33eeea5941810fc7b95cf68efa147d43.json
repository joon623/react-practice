{"ast":null,"code":"/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport normalizeColor from '../../modules/normalizeColor';\nimport normalizeValueWithProperty from './normalizeValueWithProperty';\nvar defaultOffset = {\n  height: 0,\n  width: 0\n};\n\nvar resolveShadowValue = function resolveShadowValue(style) {\n  var shadowColor = style.shadowColor,\n      shadowOffset = style.shadowOffset,\n      shadowOpacity = style.shadowOpacity,\n      shadowRadius = style.shadowRadius;\n\n  var _ref = shadowOffset || defaultOffset,\n      height = _ref.height,\n      width = _ref.width;\n\n  var offsetX = normalizeValueWithProperty(width);\n  var offsetY = normalizeValueWithProperty(height);\n  var blurRadius = normalizeValueWithProperty(shadowRadius || 0);\n  var color = normalizeColor(shadowColor || 'black', shadowOpacity);\n\n  if (color != null && offsetX != null && offsetY != null && blurRadius != null) {\n    return offsetX + \" \" + offsetY + \" \" + blurRadius + \" \" + color;\n  }\n};\n\nexport default resolveShadowValue;\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/react-native-web/dist/exports/StyleSheet/resolveShadowValue.js"],"names":["defaultOffset","height","width","resolveShadowValue","shadowColor","style","shadowOffset","shadowOpacity","shadowRadius","_ref","offsetX","normalizeValueWithProperty","offsetY","blurRadius","color","normalizeColor"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAA,cAAA,MAAA,8BAAA;AACA,OAAA,0BAAA,MAAA,8BAAA;AACA,IAAIA,aAAa,GAAG;EAClBC,MAAM,EADY,CAAA;EAElBC,KAAK,EAAE;AAFW,CAApB;;AAKA,IAAIC,kBAAkB,GAAG,SAAA,kBAAA,CAAA,KAAA,EAAmC;EAC1D,IAAIC,WAAW,GAAGC,KAAK,CAAvB,WAAA;EAAA,IACIC,YAAY,GAAGD,KAAK,CADxB,YAAA;EAAA,IAEIE,aAAa,GAAGF,KAAK,CAFzB,aAAA;EAAA,IAGIG,YAAY,GAAGH,KAAK,CAHxB,YAAA;;EAKA,IAAII,IAAI,GAAGH,YAAY,IAAvB,aAAA;EAAA,IACIL,MAAM,GAAGQ,IAAI,CADjB,MAAA;EAAA,IAEIP,KAAK,GAAGO,IAAI,CAFhB,KAAA;;EAIA,IAAIC,OAAO,GAAGC,0BAA0B,CAAxC,KAAwC,CAAxC;EACA,IAAIC,OAAO,GAAGD,0BAA0B,CAAxC,MAAwC,CAAxC;EACA,IAAIE,UAAU,GAAGF,0BAA0B,CAACH,YAAY,IAAxD,CAA2C,CAA3C;EACA,IAAIM,KAAK,GAAGC,cAAc,CAACX,WAAW,IAAZ,OAAA,EAA1B,aAA0B,CAA1B;;EAEA,IAAIU,KAAK,IAALA,IAAAA,IAAiBJ,OAAO,IAAxBI,IAAAA,IAAoCF,OAAO,IAA3CE,IAAAA,IAAuDD,UAAU,IAArE,IAAA,EAA+E;IAC7E,OAAOH,OAAO,GAAPA,GAAAA,GAAAA,OAAAA,GAAAA,GAAAA,GAAAA,UAAAA,GAAAA,GAAAA,GAAP,KAAA;EACD;AAjBH,CAAA;;AAoBA,eAAA,kBAAA","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport normalizeColor from '../../modules/normalizeColor';\nimport normalizeValueWithProperty from './normalizeValueWithProperty';\nvar defaultOffset = {\n  height: 0,\n  width: 0\n};\n\nvar resolveShadowValue = function resolveShadowValue(style) {\n  var shadowColor = style.shadowColor,\n      shadowOffset = style.shadowOffset,\n      shadowOpacity = style.shadowOpacity,\n      shadowRadius = style.shadowRadius;\n\n  var _ref = shadowOffset || defaultOffset,\n      height = _ref.height,\n      width = _ref.width;\n\n  var offsetX = normalizeValueWithProperty(width);\n  var offsetY = normalizeValueWithProperty(height);\n  var blurRadius = normalizeValueWithProperty(shadowRadius || 0);\n  var color = normalizeColor(shadowColor || 'black', shadowOpacity);\n\n  if (color != null && offsetX != null && offsetY != null && blurRadius != null) {\n    return offsetX + \" \" + offsetY + \" \" + blurRadius + \" \" + color;\n  }\n};\n\nexport default resolveShadowValue;"]},"metadata":{},"sourceType":"module"}