{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from 'react';\nimport Box from '../../primitives/Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\n\nvar Square = function Square(props) {\n  _s();\n\n  var resolvedProps = usePropsResolution('Square', props); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box, resolvedProps);\n};\n\n_s(Square, \"gip5ZEEd+OtuU1mVgavr65jlh6Y=\", false, function () {\n  return [usePropsResolution, useHasResponsiveProps];\n});\n\n_c = Square;\nexport default /*#__PURE__*/_c2 = /*#__PURE__*/React.memo(Square);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"%default%\");\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/module/components/composites/Center/Square.js"],"names":["Square","resolvedProps","usePropsResolution","useHasResponsiveProps","React"],"mappings":";;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,GAAA,MAAA,sBAAA;AACA,SAAA,qBAAA,QAAA,sCAAA;AACA,SAAA,kBAAA,QAAA,8BAAA;;AAEA,IAAMA,MAAM,GAAG,SAATA,MAAS,CAAA,KAAA,EAAS;EAAA,EAAA;;EACtB,IAAMC,aAAa,GAAGC,kBAAkB,CAAA,QAAA,EADlB,KACkB,CAAxC,CADsB,CACqC;;EAE3D,IAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EACD;;EAED,OAAO,aAAaC,KAAK,CAALA,aAAAA,CAAAA,GAAAA,EAApB,aAAoBA,CAApB;AAPF,CAAA;;GAAMJ,M;UACkBE,kB,EAElBC,qB;;;KAHAH,M;AAUN,eAAe,aAAf,GAAA,GAAA,aAA4BI,KAAK,CAALA,IAAAA,CAA5B,MAA4BA,CAA5B","sourcesContent":["import React from 'react';\nimport Box from '../../primitives/Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\n\nconst Square = props => {\n  const resolvedProps = usePropsResolution('Square', props); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box, resolvedProps);\n};\n\nexport default /*#__PURE__*/React.memo(Square);\n//# sourceMappingURL=Square.js.map"]},"metadata":{},"sourceType":"module"}