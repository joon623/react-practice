{"ast":null,"code":"import { mode } from '../tools'; // TextField\n\nvar baseStyle = function baseStyle(props) {\n  return {\n    _errorMessageProps: {\n      mt: 1,\n      ml: 3,\n      fontSize: 'xs',\n      color: 'error.400'\n    },\n    _helperTextProps: {\n      mt: 1,\n      ml: 3,\n      fontSize: 'xs',\n      color: mode('muted.400', 'muted.500')(props)\n    }\n  };\n};\n\nexport var TextField = {\n  baseStyle: baseStyle,\n  defaultProps: {\n    component: 'input'\n  }\n};\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/theme/components/textField.ts"],"names":["baseStyle","_errorMessageProps","mt","ml","fontSize","color","_helperTextProps","mode","TextField","defaultProps","component"],"mappings":"AAAA,SAAA,IAAA,QAAA,UAAA,C,CAEA;;AACA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAAA,KAAA,EAAgC;EAChD,OAAO;IACLC,kBAAkB,EAAE;MAClBC,EAAE,EADgB,CAAA;MAElBC,EAAE,EAFgB,CAAA;MAGlBC,QAAQ,EAHU,IAAA;MAIlBC,KAAK,EAAE;IAJW,CADf;IAOLC,gBAAgB,EAAE;MAChBJ,EAAE,EADc,CAAA;MAEhBC,EAAE,EAFc,CAAA;MAGhBC,QAAQ,EAHQ,IAAA;MAIhBC,KAAK,EAAEE,IAAI,CAAA,WAAA,EAAJA,WAAI,CAAJA,CAAAA,KAAAA;IAJS;EAPb,CAAP;AADF,CAAA;;AAiBA,OAAO,IAAMC,SAAS,GAAG;EACvBR,SAAS,EADc,SAAA;EAEvBS,YAAY,EAAE;IACZC,SAAS,EAAE;EADC;AAFS,CAAlB","sourcesContent":["import { mode } from '../tools';\n\n// TextField\nconst baseStyle = (props: Record<string, any>) => {\n  return {\n    _errorMessageProps: {\n      mt: 1,\n      ml: 3,\n      fontSize: 'xs',\n      color: 'error.400',\n    },\n    _helperTextProps: {\n      mt: 1,\n      ml: 3,\n      fontSize: 'xs',\n      color: mode('muted.400', 'muted.500')(props),\n    },\n  };\n};\n\nexport const TextField = {\n  baseStyle,\n  defaultProps: {\n    component: 'input',\n  },\n};\n"]},"metadata":{},"sourceType":"module"}