{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n/* eslint-disable */\n\n/**\n * JS Implementation of MurmurHash2\n *\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n *\n * @param {string} str ASCII only\n * @param {number} seed Positive integer only\n * @return {number} 32-bit positive integer hash\n */\n\nfunction murmurhash2_32_gc(str, seed) {\n  var l = str.length,\n      h = seed ^ l,\n      i = 0,\n      k;\n\n  while (l >= 4) {\n    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    k ^= k >>> 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;\n    l -= 4;\n    ++i;\n  }\n\n  switch (l) {\n    case 3:\n      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      h ^= str.charCodeAt(i) & 0xff;\n      h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  }\n\n  h ^= h >>> 13;\n  h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  h ^= h >>> 15;\n  return h >>> 0;\n}\n\nvar hash = function hash(str) {\n  return murmurhash2_32_gc(str, 1).toString(36);\n};\n\nvar _default = hash;\nexports[\"default\"] = _default;\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/react-native-web/dist/cjs/vendor/hash/index.js"],"names":["exports","l","str","h","seed","i","k","hash","murmurhash2_32_gc","_default","module"],"mappings":"AAAA;;AAEAA,OAAO,CAAPA,UAAAA,GAAAA,IAAAA;AACAA,OAAAA,WAAAA,GAAkB,KAAlBA,CAAAA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAA,iBAAA,CAAA,GAAA,EAAA,IAAA,EAAsC;EACpC,IAAIC,CAAC,GAAGC,GAAG,CAAX,MAAA;EAAA,IACIC,CAAC,GAAGC,IAAI,GADZ,CAAA;EAAA,IAEIC,CAAC,GAFL,CAAA;EAAA,IAAA,CAAA;;EAKA,OAAOJ,CAAC,IAAR,CAAA,EAAe;IACbK,CAAC,GAAGJ,GAAG,CAAHA,UAAAA,CAAAA,CAAAA,IAAAA,IAAAA,GAA2B,CAACA,GAAG,CAAHA,UAAAA,CAAe,EAAfA,CAAAA,IAAD,IAAA,KAA3BA,CAAAA,GAA+D,CAACA,GAAG,CAAHA,UAAAA,CAAe,EAAfA,CAAAA,IAAD,IAAA,KAA/DA,EAAAA,GAAoG,CAACA,GAAG,CAAHA,UAAAA,CAAe,EAAfA,CAAAA,IAAD,IAAA,KAAxGI,EAAAA;IACAA,CAAC,GAAG,CAACA,CAAC,GAAF,MAAA,IAAA,UAAA,IAA6B,CAAC,CAACA,CAAC,KAAF,EAAA,IAAA,UAAA,GAAD,MAAA,KAAjCA,EAAI,CAAJA;IACAA,CAAC,IAAIA,CAAC,KAANA,EAAAA;IACAA,CAAC,GAAG,CAACA,CAAC,GAAF,MAAA,IAAA,UAAA,IAA6B,CAAC,CAACA,CAAC,KAAF,EAAA,IAAA,UAAA,GAAD,MAAA,KAAjCA,EAAI,CAAJA;IACAH,CAAC,GAAG,CAACA,CAAC,GAAF,MAAA,IAAA,UAAA,IAA6B,CAAC,CAACA,CAAC,KAAF,EAAA,IAAA,UAAA,GAAD,MAAA,KAA7B,EAAA,IAAJA,CAAAA;IACAF,CAAC,IAADA,CAAAA;IACA,EAAA,CAAA;EACD;;EAED,QAAA,CAAA;IACE,KAAA,CAAA;MACEE,CAAC,IAAI,CAACD,GAAG,CAAHA,UAAAA,CAAeG,CAAC,GAAhBH,CAAAA,IAAD,IAAA,KAALC,EAAAA;;IAEF,KAAA,CAAA;MACEA,CAAC,IAAI,CAACD,GAAG,CAAHA,UAAAA,CAAeG,CAAC,GAAhBH,CAAAA,IAAD,IAAA,KAALC,CAAAA;;IAEF,KAAA,CAAA;MACEA,CAAC,IAAID,GAAG,CAAHA,UAAAA,CAAAA,CAAAA,IAALC,IAAAA;MACAA,CAAC,GAAG,CAACA,CAAC,GAAF,MAAA,IAAA,UAAA,IAA6B,CAAC,CAACA,CAAC,KAAF,EAAA,IAAA,UAAA,GAAD,MAAA,KAAjCA,EAAI,CAAJA;EATJ;;EAYAA,CAAC,IAAIA,CAAC,KAANA,EAAAA;EACAA,CAAC,GAAG,CAACA,CAAC,GAAF,MAAA,IAAA,UAAA,IAA6B,CAAC,CAACA,CAAC,KAAF,EAAA,IAAA,UAAA,GAAD,MAAA,KAAjCA,EAAI,CAAJA;EACAA,CAAC,IAAIA,CAAC,KAANA,EAAAA;EACA,OAAOA,CAAC,KAAR,CAAA;AACD;;AAED,IAAII,IAAI,GAAG,SAAA,IAAA,CAAA,GAAA,EAAmB;EAC5B,OAAOC,iBAAiB,CAAA,GAAA,EAAjBA,CAAiB,CAAjBA,CAAAA,QAAAA,CAAP,EAAOA,CAAP;AADF,CAAA;;AAIA,IAAIC,QAAQ,GAAZ,IAAA;AACAT,OAAAA,WAAAA,GAAAA,QAAAA;AACAU,MAAM,CAANA,OAAAA,GAAiBV,OAAjBU,WAAAA","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\n/* eslint-disable */\n\n/**\n * JS Implementation of MurmurHash2\n *\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n *\n * @param {string} str ASCII only\n * @param {number} seed Positive integer only\n * @return {number} 32-bit positive integer hash\n */\nfunction murmurhash2_32_gc(str, seed) {\n  var l = str.length,\n      h = seed ^ l,\n      i = 0,\n      k;\n\n  while (l >= 4) {\n    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    k ^= k >>> 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;\n    l -= 4;\n    ++i;\n  }\n\n  switch (l) {\n    case 3:\n      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      h ^= str.charCodeAt(i) & 0xff;\n      h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  }\n\n  h ^= h >>> 13;\n  h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  h ^= h >>> 15;\n  return h >>> 0;\n}\n\nvar hash = function hash(str) {\n  return murmurhash2_32_gc(str, 1).toString(36);\n};\n\nvar _default = hash;\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}