{"ast":null,"code":"/* eslint-disable */\n//@ts-nocheck\n// This hash function is taken from react native web\n\n/**\n * JS Implementation of MurmurHash2\n *\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n *\n * @param {string} str ASCII only\n * @param {number} seed Positive integer only\n * @return {number} 32-bit positive integer hash\n */\nfunction murmurhash2_32_gc(str, seed) {\n  var l = str.length,\n      h = seed ^ l,\n      i = 0,\n      k;\n\n  while (l >= 4) {\n    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    k ^= k >>> 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;\n    l -= 4;\n    ++i;\n  }\n\n  switch (l) {\n    case 3:\n      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      h ^= str.charCodeAt(i) & 0xff;\n      h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  }\n\n  h ^= h >>> 13;\n  h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  h ^= h >>> 15;\n  return h >>> 0;\n}\n\nvar hash = function hash(str) {\n  return murmurhash2_32_gc(str, 1).toString(36);\n};\n\nexport default hash;\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/utils/useResponsiveQuery/hash.ts"],"names":["l","str","h","seed","i","k","hash","murmurhash2_32_gc"],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,iBAAA,CAAA,GAAA,EAAA,IAAA,EAAsD;EACpD,IAAIA,CAAC,GAAGC,GAAG,CAAX,MAAA;EAAA,IACEC,CAAC,GAAGC,IAAI,GADV,CAAA;EAAA,IAEEC,CAAC,GAFH,CAAA;EAAA,IAAA,CAAA;;EAKA,OAAOJ,CAAC,IAAR,CAAA,EAAe;IACbK,CAAC,GACEJ,GAAG,CAAHA,UAAAA,CAAAA,CAAAA,IAAD,IAACA,GACA,CAACA,GAAG,CAAHA,UAAAA,CAAe,EAAfA,CAAAA,IAAD,IAAA,KADD,CAACA,GAEA,CAACA,GAAG,CAAHA,UAAAA,CAAe,EAAfA,CAAAA,IAAD,IAAA,KAFD,EAACA,GAGA,CAACA,GAAG,CAAHA,UAAAA,CAAe,EAAfA,CAAAA,IAAD,IAAA,KAJHI,EAAAA;IAKAA,CAAC,GACC,CAACA,CAAC,GAAF,MAAA,IAAA,UAAA,IAA6B,CAAE,CAACA,CAAC,KAAF,EAAA,IAAD,UAAC,GAAF,MAAA,KAD/BA,EACE,CADFA;IAEAA,CAAC,IAAIA,CAAC,KAANA,EAAAA;IACAA,CAAC,GACC,CAACA,CAAC,GAAF,MAAA,IAAA,UAAA,IAA6B,CAAE,CAACA,CAAC,KAAF,EAAA,IAAD,UAAC,GAAF,MAAA,KAD/BA,EACE,CADFA;IAEAH,CAAC,GACE,CAACA,CAAC,GAAF,MAAA,IAAA,UAAA,IACE,CAAE,CAACA,CAAC,KAAF,EAAA,IAAD,UAAC,GAAF,MAAA,KADH,EAAC,IADHA,CAAAA;IAIAF,CAAC,IAADA,CAAAA;IACA,EAAA,CAAA;EACD;;EAED,QAAA,CAAA;IACE,KAAA,CAAA;MACEE,CAAC,IAAI,CAACD,GAAG,CAAHA,UAAAA,CAAeG,CAAC,GAAhBH,CAAAA,IAAD,IAAA,KAALC,EAAAA;;IAEF,KAAA,CAAA;MACEA,CAAC,IAAI,CAACD,GAAG,CAAHA,UAAAA,CAAeG,CAAC,GAAhBH,CAAAA,IAAD,IAAA,KAALC,CAAAA;;IAEF,KAAA,CAAA;MACEA,CAAC,IAAID,GAAG,CAAHA,UAAAA,CAAAA,CAAAA,IAALC,IAAAA;MACAA,CAAC,GACC,CAACA,CAAC,GAAF,MAAA,IAAA,UAAA,IACC,CAAE,CAACA,CAAC,KAAF,EAAA,IAAD,UAAC,GAAF,MAAA,KAFHA,EACE,CADFA;EATJ;;EAcAA,CAAC,IAAIA,CAAC,KAANA,EAAAA;EACAA,CAAC,GAAG,CAACA,CAAC,GAAF,MAAA,IAAA,UAAA,IAA6B,CAAE,CAACA,CAAC,KAAF,EAAA,IAAD,UAAC,GAAF,MAAA,KAAjCA,EAAI,CAAJA;EACAA,CAAC,IAAIA,CAAC,KAANA,EAAAA;EACA,OAAOA,CAAC,KAAR,CAAA;AACD;;AAED,IAAMI,IAAI,GAAG,SAAA,IAAA,CAAA,GAAA,EAA2B;EACtC,OAAOC,iBAAiB,CAAA,GAAA,EAAjBA,CAAiB,CAAjBA,CAAAA,QAAAA,CAAP,EAAOA,CAAP;AADF,CAAA;;AAIA,eAAA,IAAA","sourcesContent":["/* eslint-disable */\n//@ts-nocheck\n// This hash function is taken from react native web\n/**\n * JS Implementation of MurmurHash2\n *\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n *\n * @param {string} str ASCII only\n * @param {number} seed Positive integer only\n * @return {number} 32-bit positive integer hash\n */\nfunction murmurhash2_32_gc(str: string, seed: number) {\n  var l = str.length,\n    h = seed ^ l,\n    i = 0,\n    k;\n\n  while (l >= 4) {\n    k =\n      (str.charCodeAt(i) & 0xff) |\n      ((str.charCodeAt(++i) & 0xff) << 8) |\n      ((str.charCodeAt(++i) & 0xff) << 16) |\n      ((str.charCodeAt(++i) & 0xff) << 24);\n    k =\n      (k & 0xffff) * 0x5bd1e995 + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16);\n    k ^= k >>> 24;\n    k =\n      (k & 0xffff) * 0x5bd1e995 + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16);\n    h =\n      ((h & 0xffff) * 0x5bd1e995 +\n        ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16)) ^\n      k;\n    l -= 4;\n    ++i;\n  }\n\n  switch (l) {\n    case 3:\n      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      h ^= str.charCodeAt(i) & 0xff;\n      h =\n        (h & 0xffff) * 0x5bd1e995 +\n        ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16);\n  }\n\n  h ^= h >>> 13;\n  h = (h & 0xffff) * 0x5bd1e995 + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16);\n  h ^= h >>> 15;\n  return h >>> 0;\n}\n\nconst hash = function hash(str: string) {\n  return murmurhash2_32_gc(str, 1).toString(36);\n};\n\nexport default hash;\n"]},"metadata":{},"sourceType":"module"}