{"ast":null,"code":"import _objectWithoutProperties from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar _excluded = [\"theme\"];\nimport get from 'lodash.get';\nimport omit from 'lodash.omit';\nimport useWindowDimensions from \"react-native-web/dist/cjs/exports/useWindowDimensions\";\nimport Platform from \"react-native-web/dist/cjs/exports/Platform\";\nimport { useNativeBase } from './../useNativeBase';\nimport { omitUndefined, extractInObject } from './../../theme/tools/';\nimport { filterShadowProps } from './../../utils/filterShadowProps';\nimport { calculateProps } from './utils';\n\nvar filterAndCalculateProps = function filterAndCalculateProps(theme, colorModeProps, componentTheme, propsReceived, windowWidth) {\n  // Extracting out children and style, as they do not contribute in props calculation\n  // This is done as these props are passed as it is later in the development\n  // Required as some of these will trigger cyclic computation which may lead to error\n  var _extractInObject = extractInObject(propsReceived, ['children', 'style', 'onPress', 'icon', 'onOpen', 'onClose']),\n      _extractInObject2 = _slicedToArray(_extractInObject, 2),\n      ignoredProps = _extractInObject2[0],\n      props = _extractInObject2[1];\n\n  var newProps = calculateProps(theme, colorModeProps, componentTheme, props, windowWidth);\n  var mergedProps = filterShadowProps(newProps, ignoredProps, Platform.OS);\n  return omitUndefined(mergedProps);\n};\n\nexport function useThemeProps(component, propsReceived) {\n  _s();\n\n  var _useWindowDimensions;\n\n  var _useNativeBase = useNativeBase(),\n      theme = _useNativeBase.theme,\n      colorModeProps = _objectWithoutProperties(_useNativeBase, _excluded); // console.log('THEME = ', theme);\n\n\n  var componentTheme = get(theme, \"components.\".concat(component)); // console.log('COMPONENT THEME = ', componentTheme);\n\n  var windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width; // To pass the component theme props and component props seperately\n\n  return filterAndCalculateProps(omit(theme, ['components']), colorModeProps, componentTheme, propsReceived, windowWidth);\n}\n\n_s(useThemeProps, \"Lq4FZGfE5y4B4o823Cv+7BTl4mU=\", false, function () {\n  return [useNativeBase, useWindowDimensions];\n});\n\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/module/hooks/useThemeProps/useProps.js"],"names":["filterAndCalculateProps","ignoredProps","props","extractInObject","newProps","calculateProps","mergedProps","filterShadowProps","Platform","omitUndefined","useThemeProps","theme","colorModeProps","useNativeBase","componentTheme","get","windowWidth","_useWindowDimensions","useWindowDimensions","omit"],"mappings":";;;;;;AAAA,OAAA,GAAA,MAAA,YAAA;AACA,OAAA,IAAA,MAAA,aAAA;;;AAEA,SAAA,aAAA,QAAA,oBAAA;AACA,SAAA,aAAA,EAAA,eAAA,QAAA,sBAAA;AACA,SAAA,iBAAA,QAAA,iCAAA;AACA,SAAA,cAAA,QAAA,SAAA;;AAEA,IAAMA,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAA,KAAA,EAAA,cAAA,EAAA,cAAA,EAAA,aAAA,EAAA,WAAA,EAAuE;EACrG;EACA;EACA;EACA,IAAA,gBAAA,GAA4BG,eAAe,CAAA,aAAA,EAAgB,CAAA,UAAA,EAAA,OAAA,EAAA,SAAA,EAAA,MAAA,EAAA,QAAA,EAA3D,SAA2D,CAAhB,CAA3C;EAAA,IAAA,iBAAA,GAAA,cAAA,CAAA,gBAAA,EAAA,CAAA,CAAA;EAAA,IAAKF,YAAL,GAAA,iBAAA,CAAA,CAAA,CAAA;EAAA,IAAmBC,KAAnB,GAAA,iBAAA,CAAA,CAAA,CAAA;;EACA,IAAIE,QAAQ,GAAGC,cAAc,CAAA,KAAA,EAAA,cAAA,EAAA,cAAA,EAAA,KAAA,EAA7B,WAA6B,CAA7B;EACA,IAAIC,WAAW,GAAGC,iBAAiB,CAAA,QAAA,EAAA,YAAA,EAAyBC,QAAQ,CAApE,EAAmC,CAAnC;EACA,OAAOC,aAAa,CAApB,WAAoB,CAApB;AAPF,CAAA;;AAUA,OAAO,SAAA,aAAA,CAAA,SAAA,EAAA,aAAA,EAAiD;EAAA,EAAA;;EACtD,IAAA,oBAAA;;EAEA,IAAA,cAAA,GAGII,aAHJ,EAAA;EAAA,IACEF,KADF,GAAA,cAAA,CAAA,KAAA;EAAA,IAEKC,cAFL,GAAA,wBAAA,CAAA,cAAA,EAHsD,SAGtD,CAAA,CAHsD,CAMjC;;;EAErB,IAAME,cAAc,GAAGC,GAAG,CAAA,KAAA,EAAQ,cAAA,MAAA,CARoB,SAQpB,CAAR,CAA1B,CARsD,CAQc;;EAEpE,IAAMC,WAAW,GAAG,CAACC,oBAAoB,GAAGC,mBAAxB,EAAA,MAAA,IAAA,IAA2DD,oBAAoB,KAAK,KAApF,CAAA,GAA6F,KAA7F,CAAA,GAAsGA,oBAAoB,CAVxF,KAUtD,CAVsD,CAUgG;;EAEtJ,OAAOjB,uBAAuB,CAACmB,IAAI,CAAA,KAAA,EAAQ,CAAb,YAAa,CAAR,CAAL,EAAA,cAAA,EAAA,cAAA,EAAA,aAAA,EAA9B,WAA8B,CAA9B;AACD;;GAbeT,a;UAMVG,a,EAIwCK,mB","sourcesContent":["import get from 'lodash.get';\nimport omit from 'lodash.omit';\nimport { useWindowDimensions, Platform } from 'react-native';\nimport { useNativeBase } from './../useNativeBase';\nimport { omitUndefined, extractInObject } from './../../theme/tools/';\nimport { filterShadowProps } from './../../utils/filterShadowProps';\nimport { calculateProps } from './utils';\n\nconst filterAndCalculateProps = (theme, colorModeProps, componentTheme, propsReceived, windowWidth) => {\n  // Extracting out children and style, as they do not contribute in props calculation\n  // This is done as these props are passed as it is later in the development\n  // Required as some of these will trigger cyclic computation which may lead to error\n  let [ignoredProps, props] = extractInObject(propsReceived, ['children', 'style', 'onPress', 'icon', 'onOpen', 'onClose']);\n  let newProps = calculateProps(theme, colorModeProps, componentTheme, props, windowWidth);\n  let mergedProps = filterShadowProps(newProps, ignoredProps, Platform.OS);\n  return omitUndefined(mergedProps);\n};\n\nexport function useThemeProps(component, propsReceived) {\n  var _useWindowDimensions;\n\n  const {\n    theme,\n    ...colorModeProps\n  } = useNativeBase(); // console.log('THEME = ', theme);\n\n  const componentTheme = get(theme, \"components.\".concat(component)); // console.log('COMPONENT THEME = ', componentTheme);\n\n  const windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width; // To pass the component theme props and component props seperately\n\n  return filterAndCalculateProps(omit(theme, ['components']), colorModeProps, componentTheme, propsReceived, windowWidth);\n}\n//# sourceMappingURL=useProps.js.map"]},"metadata":{},"sourceType":"module"}