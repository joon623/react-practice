{"ast":null,"code":"import _objectWithoutProperties from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _s = $RefreshSig$();\n\nvar _excluded = [\"color\", \"size\", \"style\", \"testID\"];\nimport React, { memo, forwardRef } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/cjs/exports/ActivityIndicator\";\nimport { usePropsResolution, useStyledSystemPropsResolver } from '../../../hooks';\nimport { getColor } from '../../../theme';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useTheme } from '../../../hooks';\n\nvar Spinner = function Spinner(props, ref) {\n  _s();\n\n  var _usePropsResolution = usePropsResolution('Spinner', props),\n      color = _usePropsResolution.color,\n      size = _usePropsResolution.size,\n      style = _usePropsResolution.style,\n      testID = _usePropsResolution.testID,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  var resolvedColor = getColor(color, useTheme().colors, useTheme());\n  var resolvedStyle = useStyledSystemPropsResolver(resolvedProps); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(ActivityIndicator, {\n    testID: testID,\n    accessible: true,\n    accessibilityLabel: \"loading\",\n    color: resolvedColor,\n    ref: ref,\n    size: size,\n    style: [resolvedStyle, style]\n  });\n};\n\n_s(Spinner, \"hoDbfdUaqEkDR1aLU6qNFQZaH4g=\", false, function () {\n  return [usePropsResolution, useTheme, useTheme, useStyledSystemPropsResolver, useHasResponsiveProps];\n});\n\n_c = Spinner;\nexport default /*#__PURE__*/_c3 = /*#__PURE__*/memo( /*#__PURE__*/_c2 = /*#__PURE__*/forwardRef(Spinner));\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Spinner\");\n$RefreshReg$(_c2, \"%default%$memo\");\n$RefreshReg$(_c3, \"%default%\");\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/module/components/primitives/Spinner/index.js"],"names":["Spinner","color","size","style","testID","resolvedProps","usePropsResolution","resolvedColor","getColor","useTheme","resolvedStyle","useStyledSystemPropsResolver","useHasResponsiveProps","accessible","accessibilityLabel","ref","memo","forwardRef"],"mappings":";;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;;AAEA,SAAA,kBAAA,EAAA,4BAAA,QAAA,gBAAA;AACA,SAAA,QAAA,QAAA,gBAAA;AACA,SAAA,qBAAA,QAAA,sCAAA;AACA,SAAA,QAAA,QAAA,gBAAA;;AAEA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAAA,KAAA,EAAA,GAAA,EAAgB;EAAA,EAAA;;EAC9B,IAAA,mBAAA,GAMIM,kBAAkB,CAAA,SAAA,EANtB,KAMsB,CANtB;EAAA,IACEL,KADF,GAAA,mBAAA,CAAA,KAAA;EAAA,IAEEC,IAFF,GAAA,mBAAA,CAAA,IAAA;EAAA,IAGEC,KAHF,GAAA,mBAAA,CAAA,KAAA;EAAA,IAIEC,MAJF,GAAA,mBAAA,CAAA,MAAA;EAAA,IAKKC,aALL,GAAA,wBAAA,CAAA,mBAAA,EAAA,SAAA,CAAA;;EAOA,IAAME,aAAa,GAAGC,QAAQ,CAAA,KAAA,EAAQC,QAAQ,GAAhB,MAAA,EAA2BA,QAAzD,EAA8B,CAA9B;EACA,IAAMC,aAAa,GAAGC,4BAA4B,CATpB,aASoB,CAAlD,CAT8B,CASqC;;EAEnE,IAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EACD;;EAED,OAAO,aAAa,KAAK,CAAL,aAAA,CAAA,iBAAA,EAAuC;IACzDR,MAAM,EADmD,MAAA;IAEzDS,UAAU,EAF+C,IAAA;IAGzDC,kBAAkB,EAHuC,SAAA;IAIzDb,KAAK,EAJoD,aAAA;IAKzDc,GAAG,EALsD,GAAA;IAMzDb,IAAI,EANqD,IAAA;IAOzDC,KAAK,EAAE,CAAA,aAAA,EAAA,KAAA;EAPkD,CAAvC,CAApB;AAfF,CAAA;;GAAMH,O;UAOAM,kB,EACkCG,Q,EAAmBA,Q,EACnCE,4B,EAElBC,qB;;;KAXAZ,O;AA0BN,eAAe,aAAf,GAAA,GAAA,aAA4BgB,IAAI,EAAE,aAAF,GAAA,GAAA,aAAeC,UAAU,CAAzD,OAAyD,CAAzB,CAAhC","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ActivityIndicator } from 'react-native';\nimport { usePropsResolution, useStyledSystemPropsResolver } from '../../../hooks';\nimport { getColor } from '../../../theme';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useTheme } from '../../../hooks';\n\nconst Spinner = (props, ref) => {\n  const {\n    color,\n    size,\n    style,\n    testID,\n    ...resolvedProps\n  } = usePropsResolution('Spinner', props);\n  const resolvedColor = getColor(color, useTheme().colors, useTheme());\n  const resolvedStyle = useStyledSystemPropsResolver(resolvedProps); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(ActivityIndicator, {\n    testID: testID,\n    accessible: true,\n    accessibilityLabel: \"loading\",\n    color: resolvedColor,\n    ref: ref,\n    size: size,\n    style: [resolvedStyle, style]\n  });\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Spinner));\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}