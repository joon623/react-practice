{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _slicedToArray = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useClipboard = useClipboard;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/cjs/index\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction useClipboard() {\n  var _react$default$useSta = _react[\"default\"].useState(false),\n      _react$default$useSta2 = _slicedToArray(_react$default$useSta, 2),\n      hasCopied = _react$default$useSta2[0],\n      setHasCopied = _react$default$useSta2[1];\n\n  var _react$default$useSta3 = _react[\"default\"].useState(''),\n      _react$default$useSta4 = _slicedToArray(_react$default$useSta3, 2),\n      value = _react$default$useSta4[0],\n      setValue = _react$default$useSta4[1];\n\n  var onCopy = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(copiedValue) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!_reactNative.Clipboard) {\n                _context.next = 3;\n                break;\n              }\n\n              _context.next = 3;\n              return _reactNative.Clipboard.setString(copiedValue);\n\n            case 3:\n              setValue(copiedValue);\n              setHasCopied(true);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onCopy(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return {\n    value: value,\n    onCopy: onCopy,\n    hasCopied: hasCopied\n  };\n}","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/commonjs/hooks/useClipboard.js"],"names":["Object","value","exports","_react","_interopRequireDefault","require","obj","default","onCopy","_reactNative","setValue","setHasCopied","hasCopied"],"mappings":"AAAA;;;;;;;;AAEAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7CD;AAGAE,OAAO,CAAPA,YAAAA,GAAAA,YAAAA;;AAEA,IAAIC,MAAM,GAAGC,sBAAsB,CAACC,OAAO,CAA3C,OAA2C,CAAR,CAAnC;;;;AAIA,SAAA,sBAAA,CAAA,GAAA,EAAqC;EAAE,OAAOC,GAAG,IAAIA,GAAG,CAAVA,UAAAA,GAAAA,GAAAA,GAA8B;IAAEC,WAASD;EAAX,CAArC;AAAwD;;AAE/F,SAAA,YAAA,GAAwB;EACtB,4BAAkCH,MAAAA,WAAAA,CAAAA,QAAAA,CAAlC,KAAkCA,CAAlC;EAAA;EAAA,IAAM,SAAN;EAAA,IAAM,YAAN;;EAEA,6BAA0BA,MAAAA,WAAAA,CAAAA,QAAAA,CAA1B,EAA0BA,CAA1B;EAAA;EAAA,IAAM,KAAN;EAAA,IAAM,QAAN;;EAEA,IAAMK,MAAM;IAAA,oEAAG,iBAAA,WAAA;MAAA;QAAA;UAAA;YAAA;cAAA,KACTC,YAAY,CAAhB,SADa;gBAAA;gBAAA;cAAA;;cAAA;cAAA,OAELA,YAAY,CAAZA,SAAAA,CAAAA,SAAAA,CAAN,WAAMA,CAFK;;YAAA;cAKbC,QAAQ,CAARA,WAAQ,CAARA;cACAC,YAAY,CAAZA,IAAY,CAAZA;;YANa;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAANH,MAAM;MAAA;IAAA;EAAA,GAAZ;;EASA,OAAO;IACLP,KADK,EACLA,KADK;IAELO,MAFK,EAELA,MAFK;IAGLI,SAAAA,EAAAA;EAHK,CAAP;AAKD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useClipboard = useClipboard;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction useClipboard() {\n  const [hasCopied, setHasCopied] = _react.default.useState(false);\n\n  const [value, setValue] = _react.default.useState('');\n\n  const onCopy = async copiedValue => {\n    if (_reactNative.Clipboard) {\n      await _reactNative.Clipboard.setString(copiedValue);\n    }\n\n    setValue(copiedValue);\n    setHasCopied(true);\n  };\n\n  return {\n    value,\n    onCopy,\n    hasCopied\n  };\n}\n//# sourceMappingURL=useClipboard.js.map"]},"metadata":{},"sourceType":"script"}