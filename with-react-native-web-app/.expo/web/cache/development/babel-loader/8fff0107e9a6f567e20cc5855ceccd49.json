{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _Dimensions = _interopRequireDefault(require(\"../Dimensions\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * PixelRatio gives access to the device pixel density.\n */\n\n\nvar PixelRatio = /*#__PURE__*/function () {\n  function PixelRatio() {}\n  /**\n   * Returns the device pixel density.\n   */\n\n\n  PixelRatio.get = function get() {\n    return _Dimensions[\"default\"].get('window').scale;\n  }\n  /**\n   * No equivalent for Web\n   */\n  ;\n\n  PixelRatio.getFontScale = function getFontScale() {\n    return _Dimensions[\"default\"].get('window').fontScale || PixelRatio.get();\n  }\n  /**\n   * Converts a layout size (dp) to pixel size (px).\n   * Guaranteed to return an integer number.\n   */\n  ;\n\n  PixelRatio.getPixelSizeForLayoutSize = function getPixelSizeForLayoutSize(layoutSize) {\n    return Math.round(layoutSize * PixelRatio.get());\n  }\n  /**\n   * Rounds a layout size (dp) to the nearest layout size that corresponds to\n   * an integer number of pixels. For example, on a device with a PixelRatio\n   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\n   * exactly (8.33 * 3) = 25 pixels.\n   */\n  ;\n\n  PixelRatio.roundToNearestPixel = function roundToNearestPixel(layoutSize) {\n    var ratio = PixelRatio.get();\n    return Math.round(layoutSize * ratio) / ratio;\n  };\n\n  return PixelRatio;\n}();\n\nexports[\"default\"] = PixelRatio;\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/react-native-web/dist/cjs/exports/PixelRatio/index.js"],"names":["exports","_Dimensions","_interopRequireDefault","require","obj","default","PixelRatio","Math","layoutSize","ratio","module"],"mappings":"AAAA;;AAEAA,OAAO,CAAPA,UAAAA,GAAAA,IAAAA;AACAA,OAAAA,WAAAA,GAAkB,KAAlBA,CAAAA;;AAEA,IAAIC,WAAW,GAAGC,sBAAsB,CAACC,OAAO,CAAhD,eAAgD,CAAR,CAAxC;;AAEA,SAAA,sBAAA,CAAA,GAAA,EAAqC;EAAE,OAAOC,GAAG,IAAIA,GAAG,CAAVA,UAAAA,GAAAA,GAAAA,GAA8B;IAAEC,WAASD;EAAX,CAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,IAAIE,UAAU,GACd,aACA,YAAY;EACV,SAAA,UAAA,GAAsB,CAAE;EAExB;AACF;AACA;;;EACEA,UAAU,CAAVA,GAAAA,GAAiB,SAAA,GAAA,GAAe;IAC9B,OAAOL,WAAAA,WAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAAP,KAAA;EACD;EACD;AACF;AACA;EALEK;;EAQAA,UAAU,CAAVA,YAAAA,GAA0B,SAAA,YAAA,GAAwB;IAChD,OAAOL,WAAAA,WAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAAAA,SAAAA,IAA+CK,UAAU,CAAhE,GAAsDA,EAAtD;EACD;EACD;AACF;AACA;AACA;EANEA;;EASAA,UAAU,CAAVA,yBAAAA,GAAuC,SAAA,yBAAA,CAAA,UAAA,EAA+C;IACpF,OAAOC,IAAI,CAAJA,KAAAA,CAAWC,UAAU,GAAGF,UAAU,CAAzC,GAA+BA,EAAxBC,CAAP;EACD;EACD;AACF;AACA;AACA;AACA;AACA;EARED;;EAWAA,UAAU,CAAVA,mBAAAA,GAAiC,SAAA,mBAAA,CAAA,UAAA,EAAyC;IACxE,IAAIG,KAAK,GAAGH,UAAU,CAAtB,GAAYA,EAAZ;IACA,OAAOC,IAAI,CAAJA,KAAAA,CAAWC,UAAU,GAArBD,KAAAA,IAAP,KAAA;EAFFD,CAAAA;;EAKA,OAAA,UAAA;AAzCF,CAEA,EAFA;;AA4CAN,OAAAA,WAAAA,GAAAA,UAAAA;AACAU,MAAM,CAANA,OAAAA,GAAiBV,OAAjBU,WAAAA","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _Dimensions = _interopRequireDefault(require(\"../Dimensions\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * PixelRatio gives access to the device pixel density.\n */\nvar PixelRatio =\n/*#__PURE__*/\nfunction () {\n  function PixelRatio() {}\n\n  /**\n   * Returns the device pixel density.\n   */\n  PixelRatio.get = function get() {\n    return _Dimensions.default.get('window').scale;\n  }\n  /**\n   * No equivalent for Web\n   */\n  ;\n\n  PixelRatio.getFontScale = function getFontScale() {\n    return _Dimensions.default.get('window').fontScale || PixelRatio.get();\n  }\n  /**\n   * Converts a layout size (dp) to pixel size (px).\n   * Guaranteed to return an integer number.\n   */\n  ;\n\n  PixelRatio.getPixelSizeForLayoutSize = function getPixelSizeForLayoutSize(layoutSize) {\n    return Math.round(layoutSize * PixelRatio.get());\n  }\n  /**\n   * Rounds a layout size (dp) to the nearest layout size that corresponds to\n   * an integer number of pixels. For example, on a device with a PixelRatio\n   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\n   * exactly (8.33 * 3) = 25 pixels.\n   */\n  ;\n\n  PixelRatio.roundToNearestPixel = function roundToNearestPixel(layoutSize) {\n    var ratio = PixelRatio.get();\n    return Math.round(layoutSize * ratio) / ratio;\n  };\n\n  return PixelRatio;\n}();\n\nexports.default = PixelRatio;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}