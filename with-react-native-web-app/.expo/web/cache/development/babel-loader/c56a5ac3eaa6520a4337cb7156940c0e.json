{"ast":null,"code":"import _objectWithoutProperties from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"_web\", \"_ios\", \"_android\"];\nimport merge from 'lodash.merge';\nimport Platform from \"react-native-web/dist/cjs/exports/Platform\";\nexport var usePlatformProps = function usePlatformProps(props) {\n  var _web = props._web,\n      _ios = props._ios,\n      _android = props._android,\n      remainingProps = _objectWithoutProperties(props, _excluded);\n\n  var platformProps = function platformProps() {\n    switch (Platform.OS) {\n      case 'web':\n        return _web;\n\n      case 'ios':\n        return _ios;\n\n      case 'android':\n        return _android;\n\n      default:\n        return {};\n    }\n  };\n\n  return merge(remainingProps, platformProps());\n};\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/module/hooks/usePlatformProps.js"],"names":["usePlatformProps","_web","_ios","_android","remainingProps","props","platformProps","Platform","merge"],"mappings":";;AAAA,OAAA,KAAA,MAAA,cAAA;;AAEA,OAAO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,KAAA,EAAS;EACvC,IACEC,IADF,GAKII,KALJ,CAAA,IAAA;EAAA,IAEEH,IAFF,GAKIG,KALJ,CAAA,IAAA;EAAA,IAGEF,QAHF,GAKIE,KALJ,CAAA,QAAA;EAAA,IAIKD,cAJL,GAAA,wBAAA,CAAA,KAAA,EAAA,SAAA,CAAA;;EAOA,IAAME,aAAa,GAAG,SAAhBA,aAAgB,GAAM;IAC1B,QAAQC,QAAQ,CAAhB,EAAA;MACE,KAAA,KAAA;QACE,OAAA,IAAA;;MAEF,KAAA,KAAA;QACE,OAAA,IAAA;;MAEF,KAAA,SAAA;QACE,OAAA,QAAA;;MAEF;QACE,OAAA,EAAA;IAXJ;EADF,CAAA;;EAgBA,OAAOC,KAAK,CAAA,cAAA,EAAiBF,aAA7B,EAAY,CAAZ;AAxBK,CAAA","sourcesContent":["import merge from 'lodash.merge';\nimport { Platform } from 'react-native';\nexport const usePlatformProps = props => {\n  const {\n    _web,\n    _ios,\n    _android,\n    ...remainingProps\n  } = props;\n\n  const platformProps = () => {\n    switch (Platform.OS) {\n      case 'web':\n        return _web;\n\n      case 'ios':\n        return _ios;\n\n      case 'android':\n        return _android;\n\n      default:\n        return {};\n    }\n  };\n\n  return merge(remainingProps, platformProps());\n};\n//# sourceMappingURL=usePlatformProps.js.map"]},"metadata":{},"sourceType":"module"}