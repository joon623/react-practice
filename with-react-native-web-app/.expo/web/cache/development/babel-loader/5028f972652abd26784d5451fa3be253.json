{"ast":null,"code":"var _s = $RefreshSig$(); //@ts-ignore\n\n\nimport createCompileableStyle from 'react-native-web/dist/exports/StyleSheet/createCompileableStyle'; //@ts-ignore\n\nimport i18nStyle from 'react-native-web/dist/exports/StyleSheet/i18nStyle'; //@ts-ignore\n\nimport { atomic } from 'react-native-web/dist/exports/StyleSheet/compile'; //@ts-ignore\n\nimport styleResolver from 'react-native-web/dist/exports/StyleSheet/styleResolver';\nimport StyleSheet from \"react-native-web/dist/cjs/exports/StyleSheet\"; //@ts-ignore\n\nimport stableHash from 'stable-hash';\nimport hash from './hash';\nimport { useStableMemo } from './useStableMemo';\nimport { getResponsiveStylesImpl, useDimensionsWithEnable } from './common';\nimport { ResponsiveQueryContext } from './ResponsiveQueryProvider';\nimport React from 'react'; // 1. i18nStyle - Does swapping of ltr styles if enabled by user\n// 2. createCompileableStyle - Handles shadow/text shadow conversion from RN styles to web styles\n// 3. atomic - God function. Pure and memoizes input/output.\n// This is a great function, it handles prefixing, converting RN specific styles to web styles and generating the CSS selector\n// Input {marginTop: 10}\n// Output {\"r-margin-top-[hash]-10\": {\n//   property: \"marginTop\",\n//   value: \"10px\",\n//   identifier: \"r-margin-top-[hash]-10\",\n//   rules: [{`.r-margin-top-[hash]-10: {'margin-top': '10px;`} }]\n// }}\n// 4. styleResolver - holds the reference of sheet object used to inject CSS. This exposes 2 functions.\n// - getTextContent => for ssr style injection\n// - insert => for inserting styles in style tag\n// If we somehow manage to use these functions, we won't need any extra workarounds for ssr initial style injection or CSS declaration order specifictity\n// Here issue is that it internally uses a cache to verify if a css rule is inserted using selector name (class name generated by RN web)\n// refer line number 121 in `react-native-web/dist/exports/StyleSheet/createOrdererdCSSStyleSheetfile`.\n// We can trick this hash id generator by adding a comment on top of our media query rule in this format. /* media-query + data-attr {} */ then it'll start using media-query + data-attr as cache key\n\nvar MEDIA_QUERY_STYLESHEET_GROUP = 3;\nexport var useResponsiveQuery = function useResponsiveQuery(queries) {\n  _s();\n\n  var _queries$disableCSSMe;\n\n  var responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  var disableCSSMediaQueries = (_queries$disableCSSMe = queries === null || queries === void 0 ? void 0 : queries.disableCSSMediaQueries) !== null && _queries$disableCSSMe !== void 0 ? _queries$disableCSSMe : responsiveQueryContext.disableCSSMediaQueries; // Only attaches listener if disableCSSMediaQueries is true\n\n  var windowWidth = useDimensionsWithEnable({\n    enable: disableCSSMediaQueries\n  }).width;\n  var values = useStableMemo(function () {\n    // Use the non-media query responsive styling\n    if (disableCSSMediaQueries) {\n      var _getResponsiveStyles = getResponsiveStylesImpl(windowWidth);\n\n      if (queries) {\n        var _getResponsiveStyles2 = _getResponsiveStyles(queries),\n            styles = _getResponsiveStyles2.styles;\n\n        return {\n          styles: styles,\n          getResponsiveStyles: _getResponsiveStyles\n        };\n      } else {\n        return {\n          getResponsiveStyles: _getResponsiveStyles\n        };\n      }\n    } else {\n      if (queries) {\n        var _getResponsiveStyles3 = getResponsiveStyles(queries),\n            _styles = _getResponsiveStyles3.styles,\n            dataSet = _getResponsiveStyles3.dataSet;\n\n        return {\n          dataSet: dataSet,\n          styles: _styles,\n          getResponsiveStyles: getResponsiveStyles\n        };\n      } else {\n        return {\n          getResponsiveStyles: getResponsiveStyles\n        };\n      }\n    }\n  }, [queries, windowWidth, disableCSSMediaQueries]);\n  return values;\n};\n\n_s(useResponsiveQuery, \"LunrB/6JQas/sNLJU4UCTP1GWNk=\", false, function () {\n  return [useDimensionsWithEnable, useStableMemo];\n});\n\nvar getDataAttribute = function getDataAttribute(queryRule) {\n  if (typeof queryRule.minWidth === 'number' && typeof queryRule.maxWidth === 'number') {\n    return \"min-width-\".concat(queryRule.minWidth, \"-max-width-\").concat(queryRule.maxWidth);\n  } else if (typeof queryRule.minWidth === 'number') {\n    return \"min-width-\".concat(queryRule.minWidth);\n  } else if (typeof queryRule.maxWidth === 'number') {\n    return \"max-width-\".concat(queryRule.maxWidth);\n  }\n\n  return undefined;\n};\n\nvar getMediaQueryRule = function getMediaQueryRule(query, newRule) {\n  if (typeof query.minWidth === 'number' && typeof query.maxWidth === 'number') {\n    return \"@media only screen and (min-width: \".concat(query.minWidth, \"px) and (max-width: \").concat(query.maxWidth, \"px) { \").concat(newRule, \" }\");\n  } else if (typeof query.minWidth === 'number') {\n    return \"@media only screen and (min-width: \".concat(query.minWidth, \"px) { \").concat(newRule, \" }\");\n  } else if (typeof query.maxWidth === 'number') {\n    return \"@media only screen and (max-width: \".concat(query.maxWidth, \"px) { \").concat(newRule, \" }\");\n  }\n\n  return undefined;\n};\n\nvar getResponsiveStyles = function getResponsiveStyles(queries) {\n  var queryString = stableHash(queries.query);\n  var queriesHash = hash(queryString);\n  var styles = queries.initial ? [StyleSheet.create({\n    initial: StyleSheet.flatten(queries.initial)\n  }).initial] : undefined;\n  var dataSet = {};\n\n  if (queries.query) {\n    queries.query.forEach(function (queryRule) {\n      var queryHash = queriesHash + hash(stableHash(queryRule));\n      var dataAttribute = getDataAttribute(queryRule);\n\n      if (dataAttribute) {\n        var newIdentifier = \"[data-\".concat(dataAttribute, \"$=\\\"\").concat(queryHash, \"\\\"]\");\n        dataSet[dataAttribute] = queryHash;\n        var mediaRules = '';\n        var flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n        var newStyle = createCompileableStyle(i18nStyle(flattenQueryStyle));\n        var results = atomic(newStyle);\n        Object.keys(results).forEach(function (key) {\n          var oldIdentifier = results[key].identifier;\n\n          if (true) {\n            dataSet[dataAttribute] = oldIdentifier + ' ' + dataSet[dataAttribute];\n          }\n\n          results[key].rules.forEach(function (oldRule) {\n            // Rule returned by atomic has css selectors, so we'll replace it with data-attr selector\n            var newRule = oldRule.replace('.' + oldIdentifier, newIdentifier);\n            mediaRules += newRule;\n          });\n        });\n\n        if (mediaRules) {\n          var mediaQueryRule = getMediaQueryRule(queryRule, mediaRules); // Here by prepending the /*${queryHash}{}*/ comment, we're kind of tricking the regex used by rn-web to verify if a rule is inserted or not.\n          // Looks safe to me, just need to keep a check if there are any implementation changes in createStyleSheet file in rn-web in future.\n          // Second argument defines the order of the insertion. DataSet and class selectors have same CSS specificity so we need to make sure that media rules have higher precedence. Max precendence in RN web is around 2.2 so 3 ensures styles will be appended later\n\n          styleResolver.sheet.insert(\"/*\".concat(queryHash, \"{}*/\").concat(mediaQueryRule), MEDIA_QUERY_STYLESHEET_GROUP);\n        }\n      }\n    });\n  }\n\n  return {\n    styles: styles,\n    dataSet: dataSet\n  };\n};\n\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/module/utils/useResponsiveQuery/useResponsiveQuery.web.js"],"names":["MEDIA_QUERY_STYLESHEET_GROUP","useResponsiveQuery","responsiveQueryContext","React","disableCSSMediaQueries","_queries$disableCSSMe","queries","windowWidth","enable","values","useStableMemo","getResponsiveStyles","getResponsiveStylesImpl","styles","dataSet","getDataAttribute","queryRule","getMediaQueryRule","query","queryString","stableHash","queriesHash","hash","initial","StyleSheet","queryHash","dataAttribute","newIdentifier","mediaRules","flattenQueryStyle","newStyle","createCompileableStyle","i18nStyle","results","atomic","Object","oldIdentifier","newRule","oldRule","mediaQueryRule","styleResolver"],"mappings":"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","sourcesContent":["//@ts-ignore\nimport createCompileableStyle from 'react-native-web/dist/exports/StyleSheet/createCompileableStyle'; //@ts-ignore\n\nimport i18nStyle from 'react-native-web/dist/exports/StyleSheet/i18nStyle'; //@ts-ignore\n\nimport { atomic } from 'react-native-web/dist/exports/StyleSheet/compile'; //@ts-ignore\n\nimport styleResolver from 'react-native-web/dist/exports/StyleSheet/styleResolver';\nimport { StyleSheet } from 'react-native'; //@ts-ignore\n\nimport stableHash from 'stable-hash';\nimport hash from './hash';\nimport { useStableMemo } from './useStableMemo';\nimport { getResponsiveStylesImpl, useDimensionsWithEnable } from './common';\nimport { ResponsiveQueryContext } from './ResponsiveQueryProvider';\nimport React from 'react'; // 1. i18nStyle - Does swapping of ltr styles if enabled by user\n// 2. createCompileableStyle - Handles shadow/text shadow conversion from RN styles to web styles\n// 3. atomic - God function. Pure and memoizes input/output.\n// This is a great function, it handles prefixing, converting RN specific styles to web styles and generating the CSS selector\n// Input {marginTop: 10}\n// Output {\"r-margin-top-[hash]-10\": {\n//   property: \"marginTop\",\n//   value: \"10px\",\n//   identifier: \"r-margin-top-[hash]-10\",\n//   rules: [{`.r-margin-top-[hash]-10: {'margin-top': '10px;`} }]\n// }}\n// 4. styleResolver - holds the reference of sheet object used to inject CSS. This exposes 2 functions.\n// - getTextContent => for ssr style injection\n// - insert => for inserting styles in style tag\n// If we somehow manage to use these functions, we won't need any extra workarounds for ssr initial style injection or CSS declaration order specifictity\n// Here issue is that it internally uses a cache to verify if a css rule is inserted using selector name (class name generated by RN web)\n// refer line number 121 in `react-native-web/dist/exports/StyleSheet/createOrdererdCSSStyleSheetfile`.\n// We can trick this hash id generator by adding a comment on top of our media query rule in this format. /* media-query + data-attr {} */ then it'll start using media-query + data-attr as cache key\n\nconst MEDIA_QUERY_STYLESHEET_GROUP = 3;\nexport const useResponsiveQuery = queries => {\n  var _queries$disableCSSMe;\n\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = (_queries$disableCSSMe = queries === null || queries === void 0 ? void 0 : queries.disableCSSMediaQueries) !== null && _queries$disableCSSMe !== void 0 ? _queries$disableCSSMe : responsiveQueryContext.disableCSSMediaQueries; // Only attaches listener if disableCSSMediaQueries is true\n\n  const windowWidth = useDimensionsWithEnable({\n    enable: disableCSSMediaQueries\n  }).width;\n  const values = useStableMemo(() => {\n    // Use the non-media query responsive styling\n    if (disableCSSMediaQueries) {\n      const getResponsiveStyles = getResponsiveStylesImpl(windowWidth);\n\n      if (queries) {\n        const {\n          styles\n        } = getResponsiveStyles(queries);\n        return {\n          styles,\n          getResponsiveStyles\n        };\n      } else {\n        return {\n          getResponsiveStyles\n        };\n      }\n    } else {\n      if (queries) {\n        const {\n          styles,\n          dataSet\n        } = getResponsiveStyles(queries);\n        return {\n          dataSet,\n          styles,\n          getResponsiveStyles\n        };\n      } else {\n        return {\n          getResponsiveStyles\n        };\n      }\n    }\n  }, [queries, windowWidth, disableCSSMediaQueries]);\n  return values;\n};\n\nconst getDataAttribute = queryRule => {\n  if (typeof queryRule.minWidth === 'number' && typeof queryRule.maxWidth === 'number') {\n    return \"min-width-\".concat(queryRule.minWidth, \"-max-width-\").concat(queryRule.maxWidth);\n  } else if (typeof queryRule.minWidth === 'number') {\n    return \"min-width-\".concat(queryRule.minWidth);\n  } else if (typeof queryRule.maxWidth === 'number') {\n    return \"max-width-\".concat(queryRule.maxWidth);\n  }\n\n  return undefined;\n};\n\nconst getMediaQueryRule = (query, newRule) => {\n  if (typeof query.minWidth === 'number' && typeof query.maxWidth === 'number') {\n    return \"@media only screen and (min-width: \".concat(query.minWidth, \"px) and (max-width: \").concat(query.maxWidth, \"px) { \").concat(newRule, \" }\");\n  } else if (typeof query.minWidth === 'number') {\n    return \"@media only screen and (min-width: \".concat(query.minWidth, \"px) { \").concat(newRule, \" }\");\n  } else if (typeof query.maxWidth === 'number') {\n    return \"@media only screen and (max-width: \".concat(query.maxWidth, \"px) { \").concat(newRule, \" }\");\n  }\n\n  return undefined;\n};\n\nconst getResponsiveStyles = queries => {\n  const queryString = stableHash(queries.query);\n  const queriesHash = hash(queryString);\n  const styles = queries.initial ? [StyleSheet.create({\n    initial: StyleSheet.flatten(queries.initial)\n  }).initial] : undefined;\n  let dataSet = {};\n\n  if (queries.query) {\n    queries.query.forEach(queryRule => {\n      const queryHash = queriesHash + hash(stableHash(queryRule));\n      const dataAttribute = getDataAttribute(queryRule);\n\n      if (dataAttribute) {\n        const newIdentifier = \"[data-\".concat(dataAttribute, \"$=\\\"\").concat(queryHash, \"\\\"]\");\n        dataSet[dataAttribute] = queryHash;\n        let mediaRules = '';\n        const flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n        const newStyle = createCompileableStyle(i18nStyle(flattenQueryStyle));\n        const results = atomic(newStyle);\n        Object.keys(results).forEach(key => {\n          const oldIdentifier = results[key].identifier;\n\n          if (process.env.NODE_ENV !== 'production') {\n            dataSet[dataAttribute] = oldIdentifier + ' ' + dataSet[dataAttribute];\n          }\n\n          results[key].rules.forEach(oldRule => {\n            // Rule returned by atomic has css selectors, so we'll replace it with data-attr selector\n            const newRule = oldRule.replace('.' + oldIdentifier, newIdentifier);\n            mediaRules += newRule;\n          });\n        });\n\n        if (mediaRules) {\n          const mediaQueryRule = getMediaQueryRule(queryRule, mediaRules); // Here by prepending the /*${queryHash}{}*/ comment, we're kind of tricking the regex used by rn-web to verify if a rule is inserted or not.\n          // Looks safe to me, just need to keep a check if there are any implementation changes in createStyleSheet file in rn-web in future.\n          // Second argument defines the order of the insertion. DataSet and class selectors have same CSS specificity so we need to make sure that media rules have higher precedence. Max precendence in RN web is around 2.2 so 3 ensures styles will be appended later\n\n          styleResolver.sheet.insert(\"/*\".concat(queryHash, \"{}*/\").concat(mediaQueryRule), MEDIA_QUERY_STYLESHEET_GROUP);\n        }\n      }\n    });\n  }\n\n  return {\n    styles,\n    dataSet\n  };\n};\n//# sourceMappingURL=useResponsiveQuery.web.js.map"]},"metadata":{},"sourceType":"module"}