{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n/* eslint no-bitwise: 0 */\n'use strict';\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _AnimatedNode = _interopRequireDefault(require(\"./AnimatedNode\"));\n\nvar _AnimatedWithChildren2 = _interopRequireDefault(require(\"./AnimatedWithChildren\"));\n\nvar _NativeAnimatedHelper = _interopRequireDefault(require(\"../NativeAnimatedHelper\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _normalizeCssColor = _interopRequireDefault(require(\"normalize-css-color\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar linear = function linear(t) {\n  return t;\n};\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\n\n\nfunction createInterpolation(config) {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n\n  var outputRange = config.outputRange;\n  checkInfiniteRange('outputRange', outputRange);\n  var inputRange = config.inputRange;\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n  (0, _invariant[\"default\"])(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n  var easing = config.easing || linear;\n  var extrapolateLeft = 'extend';\n\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  var extrapolateRight = 'extend';\n\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return function (input) {\n    (0, _invariant[\"default\"])(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n    var range = findRange(input, inputRange);\n    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n  };\n}\n\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n  var result = input; // Extrapolate\n\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {// noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {// noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n\n    return outputMax;\n  } // Input Range\n\n\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  } // Easing\n\n\n  result = easing(result); // Output Range\n\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input) {\n  var int32Color = (0, _normalizeCssColor[\"default\"])(input);\n\n  if (int32Color === null) {\n    return input;\n  }\n\n  int32Color = int32Color || 0;\n  var r = (int32Color & 0xff000000) >>> 24;\n  var g = (int32Color & 0x00ff0000) >>> 16;\n  var b = (int32Color & 0x0000ff00) >>> 8;\n  var a = (int32Color & 0x000000ff) / 255;\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n}\n\nvar stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\n\nfunction createInterpolationFromStringOutputRange(config) {\n  var outputRange = config.outputRange;\n  (0, _invariant[\"default\"])(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange); // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n\n  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n    return [];\n  });\n  outputRange.forEach(function (value) {\n    /* $FlowFixMe(>=0.18.0): `value.match()` can return `null`. Need to guard\n     * against this possibility.\n     */\n    value.match(stringShapeRegex).forEach(function (number, i) {\n      outputRanges[i].push(+number);\n    });\n  });\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n\n  var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {\n    return createInterpolation(_objectSpread({}, config, {\n      outputRange: outputRanges[i]\n    }));\n  }); // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n\n  var shouldRound = isRgbOrRgba(outputRange[0]);\n  return function (input) {\n    var i = 0; // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n\n    return outputRange[0].replace(stringShapeRegex, function () {\n      var val = +interpolations[i++](input);\n\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n\n      return String(val);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr) {\n  var pattern = arr[0].replace(stringShapeRegex, '');\n\n  for (var i = 1; i < arr.length; ++i) {\n    (0, _invariant[\"default\"])(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n  }\n}\n\nfunction findRange(input, inputRange) {\n  var i;\n\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr) {\n  (0, _invariant[\"default\"])(arr.length >= 2, 'inputRange must have at least 2 elements');\n\n  for (var i = 1; i < arr.length; ++i) {\n    (0, _invariant[\"default\"])(arr[i] >= arr[i - 1],\n    /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n     * one or both of the operands may be something that doesn't cleanly\n     * convert to a string, like undefined, null, and object, etc. If you really\n     * mean this implicit string conversion, you can do something like\n     * String(myThing)\n     */\n    'inputRange must be monotonically non-decreasing ' + arr);\n  }\n}\n\nfunction checkInfiniteRange(name, arr) {\n  (0, _invariant[\"default\"])(arr.length >= 2, name + ' must have at least 2 elements');\n  (0, _invariant[\"default\"])(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n  /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n   * one or both of the operands may be something that doesn't cleanly convert\n   * to a string, like undefined, null, and object, etc. If you really mean\n   * this implicit string conversion, you can do something like\n   * String(myThing)\n   */\n  name + 'cannot be ]-infinity;+infinity[ ' + arr);\n}\n\nvar AnimatedInterpolation = /*#__PURE__*/function (_AnimatedWithChildren) {\n  _inheritsLoose(AnimatedInterpolation, _AnimatedWithChildren); // Export for testing.\n\n\n  function AnimatedInterpolation(parent, config) {\n    var _this;\n\n    _this = _AnimatedWithChildren.call(this) || this;\n    _this._parent = parent;\n    _this._config = config;\n    _this._interpolation = createInterpolation(config);\n    return _this;\n  }\n\n  var _proto = AnimatedInterpolation.prototype;\n\n  _proto.__makeNative = function __makeNative() {\n    this._parent.__makeNative();\n\n    _AnimatedWithChildren.prototype.__makeNative.call(this);\n  };\n\n  _proto.__getValue = function __getValue() {\n    var parentValue = this._parent.__getValue();\n\n    (0, _invariant[\"default\"])(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n    return this._interpolation(parentValue);\n  };\n\n  _proto.interpolate = function interpolate(config) {\n    return new AnimatedInterpolation(this, config);\n  };\n\n  _proto.__attach = function __attach() {\n    this._parent.__addChild(this);\n  };\n\n  _proto.__detach = function __detach() {\n    this._parent.__removeChild(this);\n\n    _AnimatedWithChildren.prototype.__detach.call(this);\n  };\n\n  _proto.__transformDataType = function __transformDataType(range) {\n    // $FlowFixMe\n    return range.map(_NativeAnimatedHelper[\"default\"].transformDataType);\n  };\n\n  _proto.__getNativeConfig = function __getNativeConfig() {\n    if (true) {\n      _NativeAnimatedHelper[\"default\"].validateInterpolation(this._config);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation'\n    };\n  };\n\n  return AnimatedInterpolation;\n}(_AnimatedWithChildren2[\"default\"]);\n\nAnimatedInterpolation.__createInterpolation = createInterpolation;\nvar _default = AnimatedInterpolation;\nexports[\"default\"] = _default;\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/react-native-web/dist/cjs/vendor/react-native/Animated/nodes/AnimatedInterpolation.js"],"names":["exports","_AnimatedNode","_interopRequireDefault","require","_AnimatedWithChildren2","_NativeAnimatedHelper","_invariant","_normalizeCssColor","obj","default","subClass","Object","superClass","keys","symbols","i","arguments","source","ownKeys","_defineProperty","key","value","enumerable","configurable","writable","linear","config","createInterpolationFromStringOutputRange","outputRange","checkInfiniteRange","inputRange","checkValidInputRange","easing","extrapolateLeft","extrapolateRight","range","findRange","interpolate","result","outputMin","inputMin","input","inputMax","outputMax","int32Color","r","g","b","a","stringShapeRegex","checkPattern","outputRanges","interpolations","createInterpolation","_objectSpread","shouldRound","isRgbOrRgba","val","Math","String","pattern","arr","name","AnimatedInterpolation","_inheritsLoose","_this","_AnimatedWithChildren","_proto","parentValue","type","_default","module"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n/* eslint no-bitwise: 0 */\n'use strict';\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _AnimatedNode = _interopRequireDefault(require(\"./AnimatedNode\"));\n\nvar _AnimatedWithChildren2 = _interopRequireDefault(require(\"./AnimatedWithChildren\"));\n\nvar _NativeAnimatedHelper = _interopRequireDefault(require(\"../NativeAnimatedHelper\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _normalizeCssColor = _interopRequireDefault(require(\"normalize-css-color\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar linear = function linear(t) {\n  return t;\n};\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\n\n\nfunction createInterpolation(config) {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n\n  var outputRange = config.outputRange;\n  checkInfiniteRange('outputRange', outputRange);\n  var inputRange = config.inputRange;\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n  (0, _invariant.default)(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n  var easing = config.easing || linear;\n  var extrapolateLeft = 'extend';\n\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  var extrapolateRight = 'extend';\n\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return function (input) {\n    (0, _invariant.default)(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n    var range = findRange(input, inputRange);\n    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n  };\n}\n\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n  var result = input; // Extrapolate\n\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {// noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {// noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n\n    return outputMax;\n  } // Input Range\n\n\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  } // Easing\n\n\n  result = easing(result); // Output Range\n\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input) {\n  var int32Color = (0, _normalizeCssColor.default)(input);\n\n  if (int32Color === null) {\n    return input;\n  }\n\n  int32Color = int32Color || 0;\n  var r = (int32Color & 0xff000000) >>> 24;\n  var g = (int32Color & 0x00ff0000) >>> 16;\n  var b = (int32Color & 0x0000ff00) >>> 8;\n  var a = (int32Color & 0x000000ff) / 255;\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n}\n\nvar stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\n\nfunction createInterpolationFromStringOutputRange(config) {\n  var outputRange = config.outputRange;\n  (0, _invariant.default)(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange); // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n\n  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n    return [];\n  });\n  outputRange.forEach(function (value) {\n    /* $FlowFixMe(>=0.18.0): `value.match()` can return `null`. Need to guard\n     * against this possibility.\n     */\n    value.match(stringShapeRegex).forEach(function (number, i) {\n      outputRanges[i].push(+number);\n    });\n  });\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n\n  var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {\n    return createInterpolation(_objectSpread({}, config, {\n      outputRange: outputRanges[i]\n    }));\n  }); // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n\n  var shouldRound = isRgbOrRgba(outputRange[0]);\n  return function (input) {\n    var i = 0; // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n\n    return outputRange[0].replace(stringShapeRegex, function () {\n      var val = +interpolations[i++](input);\n\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n\n      return String(val);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr) {\n  var pattern = arr[0].replace(stringShapeRegex, '');\n\n  for (var i = 1; i < arr.length; ++i) {\n    (0, _invariant.default)(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n  }\n}\n\nfunction findRange(input, inputRange) {\n  var i;\n\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr) {\n  (0, _invariant.default)(arr.length >= 2, 'inputRange must have at least 2 elements');\n\n  for (var i = 1; i < arr.length; ++i) {\n    (0, _invariant.default)(arr[i] >= arr[i - 1],\n    /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n     * one or both of the operands may be something that doesn't cleanly\n     * convert to a string, like undefined, null, and object, etc. If you really\n     * mean this implicit string conversion, you can do something like\n     * String(myThing)\n     */\n    'inputRange must be monotonically non-decreasing ' + arr);\n  }\n}\n\nfunction checkInfiniteRange(name, arr) {\n  (0, _invariant.default)(arr.length >= 2, name + ' must have at least 2 elements');\n  (0, _invariant.default)(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n  /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n   * one or both of the operands may be something that doesn't cleanly convert\n   * to a string, like undefined, null, and object, etc. If you really mean\n   * this implicit string conversion, you can do something like\n   * String(myThing)\n   */\n  name + 'cannot be ]-infinity;+infinity[ ' + arr);\n}\n\nvar AnimatedInterpolation =\n/*#__PURE__*/\nfunction (_AnimatedWithChildren) {\n  _inheritsLoose(AnimatedInterpolation, _AnimatedWithChildren);\n\n  // Export for testing.\n  function AnimatedInterpolation(parent, config) {\n    var _this;\n\n    _this = _AnimatedWithChildren.call(this) || this;\n    _this._parent = parent;\n    _this._config = config;\n    _this._interpolation = createInterpolation(config);\n    return _this;\n  }\n\n  var _proto = AnimatedInterpolation.prototype;\n\n  _proto.__makeNative = function __makeNative() {\n    this._parent.__makeNative();\n\n    _AnimatedWithChildren.prototype.__makeNative.call(this);\n  };\n\n  _proto.__getValue = function __getValue() {\n    var parentValue = this._parent.__getValue();\n\n    (0, _invariant.default)(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n    return this._interpolation(parentValue);\n  };\n\n  _proto.interpolate = function interpolate(config) {\n    return new AnimatedInterpolation(this, config);\n  };\n\n  _proto.__attach = function __attach() {\n    this._parent.__addChild(this);\n  };\n\n  _proto.__detach = function __detach() {\n    this._parent.__removeChild(this);\n\n    _AnimatedWithChildren.prototype.__detach.call(this);\n  };\n\n  _proto.__transformDataType = function __transformDataType(range) {\n    // $FlowFixMe\n    return range.map(_NativeAnimatedHelper.default.transformDataType);\n  };\n\n  _proto.__getNativeConfig = function __getNativeConfig() {\n    if (process.env.NODE_ENV !== 'production') {\n      _NativeAnimatedHelper.default.validateInterpolation(this._config);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation'\n    };\n  };\n\n  return AnimatedInterpolation;\n}(_AnimatedWithChildren2.default);\n\nAnimatedInterpolation.__createInterpolation = createInterpolation;\nvar _default = AnimatedInterpolation;\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}