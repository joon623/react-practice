{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\nimport { resolveValueWithBreakpoint } from './useThemeProps/utils';\nimport { useTheme } from './../hooks/useTheme';\nexport var useBreakpointResolvedProps = function useBreakpointResolvedProps(props) {\n  _s();\n\n  var currentBreakpoint = useNativeBaseConfig('useBreakpointResolvedProps').currentBreakpoint;\n  var theme = useTheme();\n  var newProps = React.useMemo(function () {\n    var newProps = {};\n\n    for (var _key in props) {\n      var rawValue = props[_key];\n      var value = resolveValueWithBreakpoint(rawValue, theme.breakpoints, currentBreakpoint, _key);\n      newProps[_key] = value;\n    }\n\n    return newProps;\n  }, [props, currentBreakpoint, theme.breakpoints]);\n  return newProps;\n};\n\n_s(useBreakpointResolvedProps, \"psOESu3MytYHfT66ChUSPTZOkAo=\", false, function () {\n  return [useNativeBaseConfig, useTheme];\n});\n\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/hooks/useBreakpointResolvedProps.ts"],"names":["useBreakpointResolvedProps","currentBreakpoint","useNativeBaseConfig","theme","useTheme","newProps","rawValue","props","value","resolveValueWithBreakpoint"],"mappings":";;AAAA,OAAA,KAAA,MAAA,OAAA;AAEA,SAAA,mBAAA,QAAA,2BAAA;AACA,SAAA,0BAAA,QAAA,uBAAA;AACA,SAAA,QAAA,QAAA,qBAAA;AAUA,OAAO,IAAMA,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAA,KAAA,EAAmB;EAAA,EAAA;;EAC3D,IAAMC,iBAAiB,GAAGC,mBAAmB,CAAnBA,4BAAmB,CAAnBA,CAA1B,iBAAA;EAEA,IAAMC,KAAK,GAAGC,QAAd,EAAA;EACA,IAAMC,QAAmB,GAAG,KAAK,CAAL,OAAA,CAAc,YAAM;IAC9C,IAAIA,QAAmB,GAAvB,EAAA;;IACA,KAAK,IAAL,IAAA,IAAA,KAAA,EAAuB;MACrB,IAAMC,QAAQ,GAAGC,KAAK,CAAtB,IAAsB,CAAtB;MACA,IAAMC,KAAK,GAAGC,0BAA0B,CAAA,QAAA,EAEtCN,KAAK,CAFiC,WAAA,EAAA,iBAAA,EAAxC,IAAwC,CAAxC;MAMAE,QAAQ,CAARA,IAAQ,CAARA,GAAAA,KAAAA;IACD;;IACD,OAAA,QAAA;EAZ0B,CAAA,EAazB,CAAA,KAAA,EAAA,iBAAA,EAA2BF,KAAK,CAbnC,WAaG,CAbyB,CAA5B;EAeA,OAAA,QAAA;AAnBK,CAAA;;GAAMH,0B;UACeE,mB,EAEZE,Q","sourcesContent":["import React from 'react';\nimport type { ResponsiveValue } from '../components/types';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\nimport { resolveValueWithBreakpoint } from './useThemeProps/utils';\nimport { useTheme } from './../hooks/useTheme';\n\ntype IProps = {\n  [key: string]: ResponsiveValue<number | string>;\n};\n\ntype INewProps = {\n  [key: string]: number | string;\n};\n\nexport const useBreakpointResolvedProps = (props: IProps) => {\n  const currentBreakpoint = useNativeBaseConfig('useBreakpointResolvedProps')\n    .currentBreakpoint;\n  const theme = useTheme();\n  const newProps: INewProps = React.useMemo(() => {\n    let newProps: INewProps = {};\n    for (let key in props) {\n      const rawValue = props[key];\n      const value = resolveValueWithBreakpoint(\n        rawValue,\n        theme.breakpoints,\n        currentBreakpoint,\n        key\n      );\n      newProps[key] = value;\n    }\n    return newProps;\n  }, [props, currentBreakpoint, theme.breakpoints]);\n\n  return newProps;\n};\n"]},"metadata":{},"sourceType":"module"}