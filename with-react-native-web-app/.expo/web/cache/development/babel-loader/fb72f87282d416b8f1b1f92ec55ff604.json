{"ast":null,"code":"var _slicedToArray = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray\");\n\nvar $1rDpM$reactstatelyutils = require(\"@react-stately/utils\");\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      }\n    });\n  });\n  return dest;\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $5076d97fb6884665$exports = {};\n$parcel$export($5076d97fb6884665$exports, \"useOverlayTriggerState\", function () {\n  return $5076d97fb6884665$export$61c6a8c84e605fb6;\n});\n\nfunction $5076d97fb6884665$export$61c6a8c84e605fb6(props) {\n  var _$1rDpM$reactstatelyu = $1rDpM$reactstatelyutils.useControlledState(props.isOpen, props.defaultOpen || false, props.onOpenChange),\n      _$1rDpM$reactstatelyu2 = _slicedToArray(_$1rDpM$reactstatelyu, 2),\n      isOpen = _$1rDpM$reactstatelyu2[0],\n      setOpen = _$1rDpM$reactstatelyu2[1];\n\n  return {\n    isOpen: isOpen,\n    setOpen: setOpen,\n    open: function open() {\n      setOpen(true);\n    },\n    close: function close() {\n      setOpen(false);\n    },\n    toggle: function toggle() {\n      setOpen(!isOpen);\n    }\n  };\n}\n\n$parcel$exportWildcard(module.exports, $5076d97fb6884665$exports);","map":{"version":3,"sources":["packages/@react-stately/overlays/src/useOverlayTriggerState.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAgCgB,yC,CAAuB,K,EAAkD;EACvF,4BAAwB,wBAAA,CAAA,kBAAA,CAAmB,KAAK,CAAC,MAAzB,EAAiC,KAAK,CAAC,WAAN,IAAqB,KAAtD,EAA6D,KAAK,CAAC,YAAnE,CAAxB;EAAA;EAAA,IAAK,MAAL;EAAA,IAAa,OAAb;;EAEA,OAAO;YACL,MADK;aAEL,OAFK;IAGL,IAHK,kBAGE;MACL,OAAO,CAAC,IAAD,CAAP;IACD,CALI;IAML,KANK,mBAMG;MACN,OAAO,CAAC,KAAD,CAAP;IACD,CARI;IASL,MATK,oBASI;MACP,OAAO,CAAA,CAAE,MAAF,CAAP;IACD;EAXI,CAAP;AAaD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {OverlayTriggerProps} from '@react-types/overlays';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface OverlayTriggerState {\n  /** Whether the overlay is currently open. */\n  readonly isOpen: boolean,\n  /** Sets whether the overlay is open. */\n  setOpen(isOpen: boolean): void,\n  /** Opens the overlay. */\n  open(): void,\n  /** Closes the overlay. */\n  close(): void,\n  /** Toggles the overlay's visibility. */\n  toggle(): void\n}\n\n/**\n * Manages state for an overlay trigger. Tracks whether the overlay is open, and provides\n * methods to toggle this state.\n */\nexport function useOverlayTriggerState(props: OverlayTriggerProps): OverlayTriggerState  {\n  let [isOpen, setOpen] = useControlledState(props.isOpen, props.defaultOpen || false, props.onOpenChange);\n\n  return {\n    isOpen,\n    setOpen,\n    open() {\n      setOpen(true);\n    },\n    close() {\n      setOpen(false);\n    },\n    toggle() {\n      setOpen(!isOpen);\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"script"}