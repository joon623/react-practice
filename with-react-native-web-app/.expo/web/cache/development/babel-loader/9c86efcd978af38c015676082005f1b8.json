{"ast":null,"code":"var _toConsumableArray = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray\");\n\nvar _defineProperty = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty\");\n\nvar _slicedToArray = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray\");\n\nvar _objectWithoutProperties = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _classCallCheck = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/createClass\");\n\nvar _excluded = [\"register\"],\n    _excluded2 = [\"onPress\", \"onPressChange\", \"onPressStart\", \"onPressEnd\", \"onPressUp\", \"isDisabled\", \"isPressed\", \"preventFocusOnPress\", \"shouldCancelOnPointerExit\", \"allowTextSelectionOnPress\", \"ref\"],\n    _excluded3 = [\"children\"],\n    _excluded4 = [\"children\"];\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar $goTMa$reactariautils = require(\"@react-aria/utils\");\n\nvar $goTMa$react = require(\"react\");\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      }\n    });\n  });\n  return dest;\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a[\"default\"] : a;\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $e1dbec26039c051d$exports = {};\n$parcel$export($e1dbec26039c051d$exports, \"Pressable\", function () {\n  return $e1dbec26039c051d$export$27c701ed9e449e99;\n});\nvar $0294ea432cd92340$exports = {};\n$parcel$export($0294ea432cd92340$exports, \"usePress\", function () {\n  return $0294ea432cd92340$export$45712eceda6fad21;\n}); // Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\n\nvar $f7e14e656343df57$var$state = 'default';\nvar $f7e14e656343df57$var$savedUserSelect = '';\nvar $f7e14e656343df57$var$modifiedElementMap = new WeakMap();\n\nfunction $f7e14e656343df57$export$16a4697467175487(target) {\n  if ($goTMa$reactariautils.isIOS()) {\n    if ($f7e14e656343df57$var$state === 'default') {\n      $f7e14e656343df57$var$savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = 'none';\n    }\n\n    $f7e14e656343df57$var$state = 'disabled';\n  } else if (target) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    $f7e14e656343df57$var$modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = 'none';\n  }\n}\n\nfunction $f7e14e656343df57$export$b0d6fa1ab32e3295(target) {\n  if ($goTMa$reactariautils.isIOS()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if ($f7e14e656343df57$var$state !== 'disabled') return;\n    $f7e14e656343df57$var$state = 'restoring'; // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n\n    setTimeout(function () {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      $goTMa$reactariautils.runAfterTransition(function () {\n        // Avoid race conditions\n        if ($f7e14e656343df57$var$state === 'restoring') {\n          if (document.documentElement.style.webkitUserSelect === 'none') document.documentElement.style.webkitUserSelect = $f7e14e656343df57$var$savedUserSelect || '';\n          $f7e14e656343df57$var$savedUserSelect = '';\n          $f7e14e656343df57$var$state = 'default';\n        }\n      });\n    }, 300);\n  } else // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    if (target && $f7e14e656343df57$var$modifiedElementMap.has(target)) {\n      var targetOldUserSelect = $f7e14e656343df57$var$modifiedElementMap.get(target);\n      if (target.style.userSelect === 'none') target.style.userSelect = targetOldUserSelect;\n      if (target.getAttribute('style') === '') target.removeAttribute('style');\n      $f7e14e656343df57$var$modifiedElementMap[\"delete\"](target);\n    }\n}\n\nfunction $625cf83917e112ad$export$60278871457622de(event) {\n  // JAWS/NVDA with Firefox.\n  if (event.mozInputSource === 0 && event.isTrusted) return true;\n  return event.detail === 0 && !event.pointerType;\n}\n\nvar $625cf83917e112ad$export$905e7fc544a71f36 = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function $625cf83917e112ad$export$905e7fc544a71f36(type, nativeEvent) {\n    _classCallCheck(this, $625cf83917e112ad$export$905e7fc544a71f36);\n\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target;\n    this.currentTarget = nativeEvent.currentTarget;\n    this.relatedTarget = nativeEvent.relatedTarget;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n\n  _createClass($625cf83917e112ad$export$905e7fc544a71f36, [{\n    key: \"isDefaultPrevented\",\n    value: function isDefaultPrevented() {\n      return this.nativeEvent.defaultPrevented;\n    }\n  }, {\n    key: \"preventDefault\",\n    value: function preventDefault() {\n      this.defaultPrevented = true;\n      this.nativeEvent.preventDefault();\n    }\n  }, {\n    key: \"stopPropagation\",\n    value: function stopPropagation() {\n      this.nativeEvent.stopPropagation();\n\n      this.isPropagationStopped = function () {\n        return true;\n      };\n    }\n  }, {\n    key: \"isPropagationStopped\",\n    value: function isPropagationStopped() {\n      return false;\n    }\n  }, {\n    key: \"persist\",\n    value: function persist() {}\n  }]);\n\n  return $625cf83917e112ad$export$905e7fc544a71f36;\n}();\n\nfunction $625cf83917e112ad$export$715c682d09d639cc(onBlur) {\n  var stateRef = $goTMa$react.useRef({\n    isFocused: false,\n    onBlur: onBlur,\n    observer: null\n  });\n  stateRef.current.onBlur = onBlur; // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n\n  $goTMa$reactariautils.useLayoutEffect(function () {\n    var state = stateRef.current;\n    return function () {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []); // This function is called during a React onFocus event.\n\n  return $goTMa$react.useCallback(function (e1) {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (e1.target instanceof HTMLButtonElement || e1.target instanceof HTMLInputElement || e1.target instanceof HTMLTextAreaElement || e1.target instanceof HTMLSelectElement) {\n      stateRef.current.isFocused = true;\n      var target = e1.target;\n\n      var onBlurHandler = function onBlurHandler(e) {\n        var // For backward compatibility, dispatch a (fake) React synthetic event.\n        _current, ref;\n\n        stateRef.current.isFocused = false;\n        if (target.disabled) (ref = (_current = stateRef.current).onBlur) === null || ref === void 0 ? void 0 : ref.call(_current, new $625cf83917e112ad$export$905e7fc544a71f36('blur', e)); // We no longer need the MutationObserver once the target is blurred.\n\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n\n      target.addEventListener('focusout', onBlurHandler, {\n        once: true\n      });\n      stateRef.current.observer = new MutationObserver(function () {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer.disconnect();\n          target.dispatchEvent(new FocusEvent('blur'));\n          target.dispatchEvent(new FocusEvent('focusout', {\n            bubbles: true\n          }));\n        }\n      });\n      stateRef.current.observer.observe(target, {\n        attributes: true,\n        attributeFilter: ['disabled']\n      });\n    }\n  }, []);\n}\n\nvar $01d3f539e91688c8$export$5165eccb35aaadb5 = $parcel$interopDefault($goTMa$react).createContext(null);\n$01d3f539e91688c8$export$5165eccb35aaadb5.displayName = 'PressResponderContext';\n\nfunction $0294ea432cd92340$var$usePressResponderContext(props) {\n  // Consume context from <PressResponder> and merge with props.\n  var context = $goTMa$react.useContext($01d3f539e91688c8$export$5165eccb35aaadb5);\n\n  if (context) {\n    var register = context.register,\n        contextProps = _objectWithoutProperties(context, _excluded);\n\n    props = $goTMa$reactariautils.mergeProps(contextProps, props);\n    register();\n  }\n\n  $goTMa$reactariautils.useSyncRef(context, props.ref);\n  return props;\n}\n\nfunction $0294ea432cd92340$export$45712eceda6fad21(props) {\n  var _$0294ea432cd92340$va = $0294ea432cd92340$var$usePressResponderContext(props),\n      onPress1 = _$0294ea432cd92340$va.onPress,\n      onPressChange1 = _$0294ea432cd92340$va.onPressChange,\n      onPressStart1 = _$0294ea432cd92340$va.onPressStart,\n      onPressEnd1 = _$0294ea432cd92340$va.onPressEnd,\n      onPressUp1 = _$0294ea432cd92340$va.onPressUp,\n      isDisabled1 = _$0294ea432cd92340$va.isDisabled,\n      isPressedProp = _$0294ea432cd92340$va.isPressed,\n      preventFocusOnPress = _$0294ea432cd92340$va.preventFocusOnPress,\n      shouldCancelOnPointerExit = _$0294ea432cd92340$va.shouldCancelOnPointerExit,\n      allowTextSelectionOnPress = _$0294ea432cd92340$va.allowTextSelectionOnPress,\n      _ = _$0294ea432cd92340$va.ref,\n      domProps = _objectWithoutProperties(_$0294ea432cd92340$va, _excluded2);\n\n  var propsRef = $goTMa$react.useRef(null);\n  propsRef.current = {\n    onPress: onPress1,\n    onPressChange: onPressChange1,\n    onPressStart: onPressStart1,\n    onPressEnd: onPressEnd1,\n    onPressUp: onPressUp1,\n    isDisabled: isDisabled1,\n    shouldCancelOnPointerExit: shouldCancelOnPointerExit\n  };\n\n  var _$goTMa$react$useStat = $goTMa$react.useState(false),\n      _$goTMa$react$useStat2 = _slicedToArray(_$goTMa$react$useStat, 2),\n      isPressed = _$goTMa$react$useStat2[0],\n      setPressed = _$goTMa$react$useStat2[1];\n\n  var ref = $goTMa$react.useRef({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n\n  var _$goTMa$reactariautil = $goTMa$reactariautils.useGlobalListeners(),\n      addGlobalListener = _$goTMa$reactariautil.addGlobalListener,\n      removeAllGlobalListeners = _$goTMa$reactariautil.removeAllGlobalListeners;\n\n  var pressProps1 = $goTMa$react.useMemo(function () {\n    var state = ref.current;\n\n    var triggerPressStart = function triggerPressStart(originalEvent, pointerType) {\n      var _propsRef$current = propsRef.current,\n          onPressStart = _propsRef$current.onPressStart,\n          onPressChange = _propsRef$current.onPressChange,\n          isDisabled = _propsRef$current.isDisabled;\n      if (isDisabled || state.didFirePressStart) return;\n      if (onPressStart) onPressStart({\n        type: 'pressstart',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n      if (onPressChange) onPressChange(true);\n      state.didFirePressStart = true;\n      setPressed(true);\n    };\n\n    var triggerPressEnd = function triggerPressEnd(originalEvent, pointerType) {\n      var wasPressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var _propsRef$current2 = propsRef.current,\n          onPressEnd = _propsRef$current2.onPressEnd,\n          onPressChange = _propsRef$current2.onPressChange,\n          onPress = _propsRef$current2.onPress,\n          isDisabled = _propsRef$current2.isDisabled;\n      if (!state.didFirePressStart) return;\n      state.ignoreClickAfterPress = true;\n      state.didFirePressStart = false;\n      if (onPressEnd) onPressEnd({\n        type: 'pressend',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n      if (onPressChange) onPressChange(false);\n      setPressed(false);\n      if (onPress && wasPressed && !isDisabled) onPress({\n        type: 'press',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    var triggerPressUp = function triggerPressUp(originalEvent, pointerType) {\n      var _propsRef$current3 = propsRef.current,\n          onPressUp = _propsRef$current3.onPressUp,\n          isDisabled = _propsRef$current3.isDisabled;\n      if (isDisabled) return;\n      if (onPressUp) onPressUp({\n        type: 'pressup',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    var cancel = function cancel(e) {\n      if (state.isPressed) {\n        if (state.isOverTarget) triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType, false);\n        state.isPressed = false;\n        state.isOverTarget = false;\n        state.activePointerId = null;\n        state.pointerType = null;\n        removeAllGlobalListeners();\n        if (!allowTextSelectionOnPress) $f7e14e656343df57$export$b0d6fa1ab32e3295(state.target);\n      }\n    };\n\n    var pressProps = {\n      onKeyDown: function onKeyDown(e) {\n        if ($0294ea432cd92340$var$isValidKeyboardEvent(e.nativeEvent) && e.currentTarget.contains(e.target)) {\n          if ($0294ea432cd92340$var$shouldPreventDefaultKeyboard(e.target)) e.preventDefault();\n          e.stopPropagation(); // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            triggerPressStart(e, 'keyboard'); // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n\n            addGlobalListener(document, 'keyup', onKeyUp, false);\n          }\n        }\n      },\n      onKeyUp: function onKeyUp(e) {\n        if ($0294ea432cd92340$var$isValidKeyboardEvent(e.nativeEvent) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp($0294ea432cd92340$var$createEvent(state.target, e), 'keyboard');\n      },\n      onClick: function onClick(e) {\n        if (e && !e.currentTarget.contains(e.target)) return;\n\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled1) e.preventDefault(); // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || $625cf83917e112ad$export$60278871457622de(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled1 && !preventFocusOnPress) $goTMa$reactariautils.focusWithoutScrolling(e.currentTarget);\n            triggerPressStart(e, 'virtual');\n            triggerPressUp(e, 'virtual');\n            triggerPressEnd(e, 'virtual');\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n    };\n\n    var onKeyUp = function onKeyUp(e) {\n      if (state.isPressed && $0294ea432cd92340$var$isValidKeyboardEvent(e)) {\n        if ($0294ea432cd92340$var$shouldPreventDefaultKeyboard(e.target)) e.preventDefault();\n        e.stopPropagation();\n        state.isPressed = false;\n        var target = e.target;\n        triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners(); // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n\n        if (state.target.contains(target) && $0294ea432cd92340$var$isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link') state.target.click();\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = function (e) {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return; // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n\n        if ($0294ea432cd92340$var$isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        } // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n\n\n        if ($0294ea432cd92340$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        state.pointerType = e.pointerType;\n        e.stopPropagation();\n\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n          if (!isDisabled1 && !preventFocusOnPress) $goTMa$reactariautils.focusWithoutScrolling(e.currentTarget);\n          if (!allowTextSelectionOnPress) $f7e14e656343df57$export$16a4697467175487(state.target);\n          triggerPressStart(e, state.pointerType);\n          addGlobalListener(document, 'pointermove', onPointerMove, false);\n          addGlobalListener(document, 'pointerup', onPointerUp, false);\n          addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n        }\n      };\n\n      pressProps.onMouseDown = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if ($0294ea432cd92340$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = function (e) {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target) || state.pointerType === 'virtual') return; // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n\n        if (e.button === 0 && $0294ea432cd92340$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);\n      }; // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n\n\n      var onPointerMove = function onPointerMove(e) {\n        if (e.pointerId !== state.activePointerId) return;\n\n        if ($0294ea432cd92340$var$isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n\n      var onPointerUp = function onPointerUp(e) {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if ($0294ea432cd92340$var$isOverTarget(e, state.target)) triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType, false);\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) $f7e14e656343df57$export$b0d6fa1ab32e3295(state.target);\n        }\n      };\n\n      var onPointerCancel = function onPointerCancel(e) {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = function (e) {\n        if (!e.currentTarget.contains(e.target)) return; // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = function (e) {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return; // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n\n        if ($0294ea432cd92340$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) return;\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = $625cf83917e112ad$export$60278871457622de(e.nativeEvent) ? 'virtual' : 'mouse';\n        if (!isDisabled1 && !preventFocusOnPress) $goTMa$reactariautils.focusWithoutScrolling(e.currentTarget);\n        triggerPressStart(e, state.pointerType);\n        addGlobalListener(document, 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, state.pointerType);\n        }\n      };\n\n      pressProps.onMouseLeave = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n\n      pressProps.onMouseUp = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType);\n      };\n\n      var onMouseUp = function onMouseUp(e) {\n        // Only handle left clicks\n        if (e.button !== 0) return;\n        state.isPressed = false;\n        removeAllGlobalListeners();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if ($0294ea432cd92340$var$isOverTarget(e, state.target)) triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType, false);\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        var touch = $0294ea432cd92340$var$getTouchFromEvent(e.nativeEvent);\n        if (!touch) return;\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch'; // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n\n        if (!isDisabled1 && !preventFocusOnPress) $goTMa$reactariautils.focusWithoutScrolling(e.currentTarget);\n        if (!allowTextSelectionOnPress) $f7e14e656343df57$export$16a4697467175487(state.target);\n        triggerPressStart(e, state.pointerType);\n        addGlobalListener(window, 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (!state.isPressed) return;\n        var touch = $0294ea432cd92340$var$getTouchById(e.nativeEvent, state.activePointerId);\n\n        if (touch && $0294ea432cd92340$var$isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n\n      pressProps.onTouchEnd = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (!state.isPressed) return;\n        var touch = $0294ea432cd92340$var$getTouchById(e.nativeEvent, state.activePointerId);\n\n        if (touch && $0294ea432cd92340$var$isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) triggerPressEnd(e, state.pointerType, false);\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) $f7e14e656343df57$export$b0d6fa1ab32e3295(state.target);\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed) cancel(e);\n      };\n\n      var onScroll = function onScroll(e) {\n        if (state.isPressed && e.target.contains(state.target)) cancel({\n          currentTarget: state.target,\n          shiftKey: false,\n          ctrlKey: false,\n          metaKey: false,\n          altKey: false\n        });\n      };\n\n      pressProps.onDragStart = function (e) {\n        if (!e.currentTarget.contains(e.target)) return;\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [addGlobalListener, isDisabled1, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]); // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n\n  $goTMa$react.useEffect(function () {\n    return function () {\n      if (!allowTextSelectionOnPress) $f7e14e656343df57$export$b0d6fa1ab32e3295(ref.current.target);\n    };\n  }, [allowTextSelectionOnPress]);\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: $goTMa$reactariautils.mergeProps(domProps, pressProps1)\n  };\n}\n\nfunction $0294ea432cd92340$var$isHTMLAnchorLink(target) {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction $0294ea432cd92340$var$isValidKeyboardEvent(event) {\n  var key = event.key,\n      code = event.code,\n      target = event.target;\n  var element = target;\n  var tagName = element.tagName,\n      isContentEditable = element.isContentEditable;\n  var role = element.getAttribute('role'); // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n\n  return (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') && tagName !== 'INPUT' && tagName !== 'TEXTAREA' && isContentEditable !== true && (!$0294ea432cd92340$var$isHTMLAnchorLink(element) || role === 'button' && key !== 'Enter') && // An element with role='link' should only trigger with Enter key\n  !(role === 'link' && key !== 'Enter');\n}\n\nfunction $0294ea432cd92340$var$getTouchFromEvent(event) {\n  var targetTouches = event.targetTouches;\n  if (targetTouches.length > 0) return targetTouches[0];\n  return null;\n}\n\nfunction $0294ea432cd92340$var$getTouchById(event, pointerId) {\n  var changedTouches = event.changedTouches;\n\n  for (var i = 0; i < changedTouches.length; i++) {\n    var touch = changedTouches[i];\n    if (touch.identifier === pointerId) return touch;\n  }\n\n  return null;\n}\n\nfunction $0294ea432cd92340$var$createEvent(target, e) {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\n\nfunction $0294ea432cd92340$var$getPointClientRect(point) {\n  var offsetX = point.width / 2 || point.radiusX || 0;\n  var offsetY = point.height / 2 || point.radiusY || 0;\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction $0294ea432cd92340$var$areRectanglesOverlapping(a, b) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) return false; // check if they cannot overlap on y axis\n\n  if (a.top > b.bottom || b.top > a.bottom) return false;\n  return true;\n}\n\nfunction $0294ea432cd92340$var$isOverTarget(point, target) {\n  var rect = target.getBoundingClientRect();\n  var pointRect = $0294ea432cd92340$var$getPointClientRect(point);\n  return $0294ea432cd92340$var$areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction $0294ea432cd92340$var$shouldPreventDefault(target) {\n  // We cannot prevent default if the target is a draggable element.\n  return !target.draggable;\n}\n\nfunction $0294ea432cd92340$var$shouldPreventDefaultKeyboard(target) {\n  return !((target.tagName === 'INPUT' || target.tagName === 'BUTTON') && target.type === 'submit');\n}\n\nfunction $0294ea432cd92340$var$isVirtualPointerEvent(event) {\n  // If the pointer size is zero, then we assume it's from a screen reader.\n  // Android TalkBack double tap will sometimes return a event with width and height of 1\n  // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.\n  // Cannot use \"event.pressure === 0\" as the sole check due to Safari pointer events always returning pressure === 0\n  // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush\n  // Talkback double tap from Windows Firefox touch screen press\n  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === 'mouse';\n}\n\nvar $e1dbec26039c051d$export$27c701ed9e449e99 = /*#__PURE__*/$parcel$interopDefault($goTMa$react).forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded3);\n\n  var newRef = $goTMa$react.useRef();\n  ref = ref !== null && ref !== void 0 ? ref : newRef;\n\n  var _$0294ea432cd92340$ex = $0294ea432cd92340$export$45712eceda6fad21(_objectSpread(_objectSpread({}, props), {}, {\n    ref: ref\n  })),\n      pressProps = _$0294ea432cd92340$ex.pressProps;\n\n  var child = $parcel$interopDefault($goTMa$react).Children.only(children);\n  return /*#__PURE__*/$parcel$interopDefault($goTMa$react).cloneElement(child, // @ts-ignore\n  _objectSpread({\n    ref: ref\n  }, $goTMa$reactariautils.mergeProps(child.props, pressProps)));\n});\nvar $3596bae48579386f$exports = {};\n$parcel$export($3596bae48579386f$exports, \"PressResponder\", function () {\n  return $3596bae48579386f$export$3351871ee4b288b8;\n});\nvar $3596bae48579386f$export$3351871ee4b288b8 = /*#__PURE__*/$parcel$interopDefault($goTMa$react).forwardRef(function (_ref2, ref) {\n  var children = _ref2.children,\n      props = _objectWithoutProperties(_ref2, _excluded4);\n\n  var isRegistered = $goTMa$react.useRef(false);\n  var prevContext = $goTMa$react.useContext($01d3f539e91688c8$export$5165eccb35aaadb5);\n  var context = $goTMa$reactariautils.mergeProps(prevContext || {}, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),\n    register: function register() {\n      isRegistered.current = true;\n      if (prevContext) prevContext.register();\n    }\n  }));\n  $goTMa$reactariautils.useSyncRef(prevContext, ref);\n  $goTMa$react.useEffect(function () {\n    if (!isRegistered.current) console.warn(\"A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.\");\n  }, []);\n  return /*#__PURE__*/$parcel$interopDefault($goTMa$react).createElement($01d3f539e91688c8$export$5165eccb35aaadb5.Provider, {\n    value: context\n  }, children);\n});\nvar $5cb73d0ce355b0dc$exports = {};\n$parcel$export($5cb73d0ce355b0dc$exports, \"useFocus\", function () {\n  return $5cb73d0ce355b0dc$export$f8168d8dd8fd66e6;\n});\n\nfunction $5cb73d0ce355b0dc$export$f8168d8dd8fd66e6(props) {\n  var isDisabled = props.isDisabled,\n      onFocusProp = props.onFocus,\n      onBlurProp = props.onBlur,\n      onFocusChange = props.onFocusChange;\n  var onBlur = $goTMa$react.useCallback(function (e) {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) onBlurProp(e);\n      if (onFocusChange) onFocusChange(false);\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n  var onSyntheticFocus = $625cf83917e112ad$export$715c682d09d639cc(onBlur);\n  var onFocus = $goTMa$react.useCallback(function (e) {\n    if (e.target === e.currentTarget) {\n      if (onFocusProp) onFocusProp(e);\n      if (onFocusChange) onFocusChange(true);\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n  return {\n    focusProps: {\n      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,\n      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : null\n    }\n  };\n}\n\nvar $e77252a287ef94ab$exports = {};\n$parcel$export($e77252a287ef94ab$exports, \"isFocusVisible\", function () {\n  return $e77252a287ef94ab$export$b9b3dfddab17db27;\n});\n$parcel$export($e77252a287ef94ab$exports, \"getInteractionModality\", function () {\n  return $e77252a287ef94ab$export$630ff653c5ada6a9;\n});\n$parcel$export($e77252a287ef94ab$exports, \"setInteractionModality\", function () {\n  return $e77252a287ef94ab$export$8397ddfc504fdb9a;\n});\n$parcel$export($e77252a287ef94ab$exports, \"useInteractionModality\", function () {\n  return $e77252a287ef94ab$export$98e20ec92f614cfe;\n});\n$parcel$export($e77252a287ef94ab$exports, \"useFocusVisible\", function () {\n  return $e77252a287ef94ab$export$ffd9e5021c1fb2d6;\n});\n$parcel$export($e77252a287ef94ab$exports, \"useFocusVisibleListener\", function () {\n  return $e77252a287ef94ab$export$ec71b4b83ac08ec3;\n});\nvar $e77252a287ef94ab$var$currentModality = null;\nvar $e77252a287ef94ab$var$changeHandlers = new Set();\nvar $e77252a287ef94ab$var$hasSetupGlobalListeners = false;\nvar $e77252a287ef94ab$var$hasEventBeforeFocus = false;\nvar $e77252a287ef94ab$var$hasBlurredWindowRecently = false; // Only Tab or Esc keys will make focus visible on text input elements\n\nvar $e77252a287ef94ab$var$FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\n\nfunction $e77252a287ef94ab$var$triggerChangeHandlers(modality, e) {\n  var _iterator = _createForOfIteratorHelper($e77252a287ef94ab$var$changeHandlers),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var handler = _step.value;\n      handler(modality, e);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\n\n\nfunction $e77252a287ef94ab$var$isValidKey(e) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || !$goTMa$reactariautils.isMac() && e.altKey || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\n\nfunction $e77252a287ef94ab$var$handleKeyboardEvent(e) {\n  $e77252a287ef94ab$var$hasEventBeforeFocus = true;\n\n  if ($e77252a287ef94ab$var$isValidKey(e)) {\n    $e77252a287ef94ab$var$currentModality = 'keyboard';\n    $e77252a287ef94ab$var$triggerChangeHandlers('keyboard', e);\n  }\n}\n\nfunction $e77252a287ef94ab$var$handlePointerEvent(e) {\n  $e77252a287ef94ab$var$currentModality = 'pointer';\n\n  if (e.type === 'mousedown' || e.type === 'pointerdown') {\n    $e77252a287ef94ab$var$hasEventBeforeFocus = true;\n    $e77252a287ef94ab$var$triggerChangeHandlers('pointer', e);\n  }\n}\n\nfunction $e77252a287ef94ab$var$handleClickEvent(e) {\n  if ($625cf83917e112ad$export$60278871457622de(e)) {\n    $e77252a287ef94ab$var$hasEventBeforeFocus = true;\n    $e77252a287ef94ab$var$currentModality = 'virtual';\n  }\n}\n\nfunction $e77252a287ef94ab$var$handleFocusEvent(e) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) return; // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n\n  if (!$e77252a287ef94ab$var$hasEventBeforeFocus && !$e77252a287ef94ab$var$hasBlurredWindowRecently) {\n    $e77252a287ef94ab$var$currentModality = 'virtual';\n    $e77252a287ef94ab$var$triggerChangeHandlers('virtual', e);\n  }\n\n  $e77252a287ef94ab$var$hasEventBeforeFocus = false;\n  $e77252a287ef94ab$var$hasBlurredWindowRecently = false;\n}\n\nfunction $e77252a287ef94ab$var$handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  $e77252a287ef94ab$var$hasEventBeforeFocus = false;\n  $e77252a287ef94ab$var$hasBlurredWindowRecently = true;\n}\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\n\n\nfunction $e77252a287ef94ab$var$setupGlobalFocusEvents() {\n  if (typeof window === 'undefined' || $e77252a287ef94ab$var$hasSetupGlobalListeners) return; // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n\n  var focus = HTMLElement.prototype.focus;\n\n  HTMLElement.prototype.focus = function () {\n    $e77252a287ef94ab$var$hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n\n  document.addEventListener('keydown', $e77252a287ef94ab$var$handleKeyboardEvent, true);\n  document.addEventListener('keyup', $e77252a287ef94ab$var$handleKeyboardEvent, true);\n  document.addEventListener('click', $e77252a287ef94ab$var$handleClickEvent, true); // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n\n  window.addEventListener('focus', $e77252a287ef94ab$var$handleFocusEvent, true);\n  window.addEventListener('blur', $e77252a287ef94ab$var$handleWindowBlur, false);\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', $e77252a287ef94ab$var$handlePointerEvent, true);\n    document.addEventListener('pointermove', $e77252a287ef94ab$var$handlePointerEvent, true);\n    document.addEventListener('pointerup', $e77252a287ef94ab$var$handlePointerEvent, true);\n  } else {\n    document.addEventListener('mousedown', $e77252a287ef94ab$var$handlePointerEvent, true);\n    document.addEventListener('mousemove', $e77252a287ef94ab$var$handlePointerEvent, true);\n    document.addEventListener('mouseup', $e77252a287ef94ab$var$handlePointerEvent, true);\n  }\n\n  $e77252a287ef94ab$var$hasSetupGlobalListeners = true;\n}\n\nif (typeof document !== 'undefined') {\n  if (document.readyState !== 'loading') $e77252a287ef94ab$var$setupGlobalFocusEvents();else document.addEventListener('DOMContentLoaded', $e77252a287ef94ab$var$setupGlobalFocusEvents);\n}\n\nfunction $e77252a287ef94ab$export$b9b3dfddab17db27() {\n  return $e77252a287ef94ab$var$currentModality !== 'pointer';\n}\n\nfunction $e77252a287ef94ab$export$630ff653c5ada6a9() {\n  return $e77252a287ef94ab$var$currentModality;\n}\n\nfunction $e77252a287ef94ab$export$8397ddfc504fdb9a(modality) {\n  $e77252a287ef94ab$var$currentModality = modality;\n  $e77252a287ef94ab$var$triggerChangeHandlers(modality, null);\n}\n\nfunction $e77252a287ef94ab$export$98e20ec92f614cfe() {\n  $e77252a287ef94ab$var$setupGlobalFocusEvents();\n\n  var _$goTMa$react$useStat3 = $goTMa$react.useState($e77252a287ef94ab$var$currentModality),\n      _$goTMa$react$useStat4 = _slicedToArray(_$goTMa$react$useStat3, 2),\n      modality = _$goTMa$react$useStat4[0],\n      setModality = _$goTMa$react$useStat4[1];\n\n  $goTMa$react.useEffect(function () {\n    var handler = function handler() {\n      setModality($e77252a287ef94ab$var$currentModality);\n    };\n\n    $e77252a287ef94ab$var$changeHandlers.add(handler);\n    return function () {\n      $e77252a287ef94ab$var$changeHandlers[\"delete\"](handler);\n    };\n  }, []);\n  return modality;\n}\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\n\n\nfunction $e77252a287ef94ab$var$isKeyboardFocusEvent(isTextInput, modality, e) {\n  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !$e77252a287ef94ab$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\n\nfunction $e77252a287ef94ab$export$ffd9e5021c1fb2d6() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var isTextInput = props.isTextInput,\n      autoFocus = props.autoFocus;\n\n  var _$goTMa$react$useStat5 = $goTMa$react.useState(autoFocus || $e77252a287ef94ab$export$b9b3dfddab17db27()),\n      _$goTMa$react$useStat6 = _slicedToArray(_$goTMa$react$useStat5, 2),\n      isFocusVisibleState = _$goTMa$react$useStat6[0],\n      setFocusVisible = _$goTMa$react$useStat6[1];\n\n  $e77252a287ef94ab$export$ec71b4b83ac08ec3(function ($e77252a287ef94ab$export$b9b3dfddab17db27) {\n    setFocusVisible($e77252a287ef94ab$export$b9b3dfddab17db27);\n  }, [isTextInput], {\n    isTextInput: isTextInput\n  });\n  return {\n    isFocusVisible: isFocusVisibleState\n  };\n}\n\nfunction $e77252a287ef94ab$export$ec71b4b83ac08ec3(fn, deps, opts) {\n  $e77252a287ef94ab$var$setupGlobalFocusEvents();\n  $goTMa$react.useEffect(function () {\n    var handler = function handler(modality, e) {\n      if (!$e77252a287ef94ab$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;\n      fn($e77252a287ef94ab$export$b9b3dfddab17db27());\n    };\n\n    $e77252a287ef94ab$var$changeHandlers.add(handler);\n    return function () {\n      $e77252a287ef94ab$var$changeHandlers[\"delete\"](handler);\n    };\n  }, deps);\n}\n\nvar $d16842bbd0359d1b$exports = {};\n$parcel$export($d16842bbd0359d1b$exports, \"useFocusWithin\", function () {\n  return $d16842bbd0359d1b$export$420e68273165f4ec;\n});\n\nfunction $d16842bbd0359d1b$export$420e68273165f4ec(props) {\n  var isDisabled = props.isDisabled,\n      onBlurWithin = props.onBlurWithin,\n      onFocusWithin = props.onFocusWithin,\n      onFocusWithinChange = props.onFocusWithinChange;\n  var state = $goTMa$react.useRef({\n    isFocusWithin: false\n  });\n  var onBlur = $goTMa$react.useCallback(function (e) {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {\n      state.current.isFocusWithin = false;\n      if (onBlurWithin) onBlurWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(false);\n    }\n  }, [onBlurWithin, onFocusWithinChange, state]);\n  var onSyntheticFocus = $625cf83917e112ad$export$715c682d09d639cc(onBlur);\n  var onFocus = $goTMa$react.useCallback(function (e) {\n    if (!state.current.isFocusWithin) {\n      if (onFocusWithin) onFocusWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(true);\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);\n  if (isDisabled) return {\n    focusWithinProps: {\n      onFocus: null,\n      onBlur: null\n    }\n  };\n  return {\n    focusWithinProps: {\n      onFocus: onFocus,\n      onBlur: onBlur\n    }\n  };\n}\n\nvar $ffbc150311c75f01$exports = {};\n$parcel$export($ffbc150311c75f01$exports, \"useHover\", function () {\n  return $ffbc150311c75f01$export$ae780daf29e6d456;\n}); // iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\n\nvar $ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents = false;\nvar $ffbc150311c75f01$var$hoverCount = 0;\n\nfunction $ffbc150311c75f01$var$setGlobalIgnoreEmulatedMouseEvents() {\n  $ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents = true; // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n\n  setTimeout(function () {\n    $ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\n\nfunction $ffbc150311c75f01$var$handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') $ffbc150311c75f01$var$setGlobalIgnoreEmulatedMouseEvents();\n}\n\nfunction $ffbc150311c75f01$var$setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') return;\n  if (typeof PointerEvent !== 'undefined') document.addEventListener('pointerup', $ffbc150311c75f01$var$handleGlobalPointerEvent);else document.addEventListener('touchend', $ffbc150311c75f01$var$setGlobalIgnoreEmulatedMouseEvents);\n  $ffbc150311c75f01$var$hoverCount++;\n  return function () {\n    $ffbc150311c75f01$var$hoverCount--;\n    if ($ffbc150311c75f01$var$hoverCount > 0) return;\n    if (typeof PointerEvent !== 'undefined') document.removeEventListener('pointerup', $ffbc150311c75f01$var$handleGlobalPointerEvent);else document.removeEventListener('touchend', $ffbc150311c75f01$var$setGlobalIgnoreEmulatedMouseEvents);\n  };\n}\n\nfunction $ffbc150311c75f01$export$ae780daf29e6d456(props) {\n  var onHoverStart = props.onHoverStart,\n      onHoverChange = props.onHoverChange,\n      onHoverEnd = props.onHoverEnd,\n      isDisabled = props.isDisabled;\n\n  var _$goTMa$react$useStat7 = $goTMa$react.useState(false),\n      _$goTMa$react$useStat8 = _slicedToArray(_$goTMa$react$useStat7, 2),\n      isHovered = _$goTMa$react$useStat8[0],\n      setHovered = _$goTMa$react$useStat8[1];\n\n  var state = $goTMa$react.useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: '',\n    target: null\n  }).current;\n  $goTMa$react.useEffect($ffbc150311c75f01$var$setupGlobalTouchEvents, []);\n\n  var _$goTMa$react$useMemo = $goTMa$react.useMemo(function () {\n    var triggerHoverStart = function triggerHoverStart(event, pointerType) {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) return;\n      state.isHovered = true;\n      var target = event.currentTarget;\n      state.target = target;\n      if (onHoverStart) onHoverStart({\n        type: 'hoverstart',\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(true);\n      setHovered(true);\n    };\n\n    var triggerHoverEnd = function triggerHoverEnd(event, pointerType) {\n      state.pointerType = '';\n      state.target = null;\n      if (pointerType === 'touch' || !state.isHovered) return;\n      state.isHovered = false;\n      var target = event.currentTarget;\n      if (onHoverEnd) onHoverEnd({\n        type: 'hoverend',\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(false);\n      setHovered(false);\n    };\n\n    var hoverProps = {};\n\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = function (e) {\n        if ($ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') return;\n        triggerHoverStart(e, e.pointerType);\n      };\n\n      hoverProps.onPointerLeave = function (e) {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);\n      };\n    } else {\n      hoverProps.onTouchStart = function () {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n\n      hoverProps.onMouseEnter = function (e) {\n        if (!state.ignoreEmulatedMouseEvents && !$ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, 'mouse');\n        state.ignoreEmulatedMouseEvents = false;\n      };\n\n      hoverProps.onMouseLeave = function (e) {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, 'mouse');\n      };\n    }\n\n    return {\n      hoverProps: hoverProps,\n      triggerHoverEnd: triggerHoverEnd\n    };\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]),\n      hoverProps1 = _$goTMa$react$useMemo.hoverProps,\n      triggerHoverEnd1 = _$goTMa$react$useMemo.triggerHoverEnd;\n\n  $goTMa$react.useEffect(function () {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) triggerHoverEnd1({\n      currentTarget: state.target\n    }, state.pointerType);\n  }, [isDisabled]);\n  return {\n    hoverProps: hoverProps1,\n    isHovered: isHovered\n  };\n}\n\nvar $edcfa848c42f94f4$exports = {};\n$parcel$export($edcfa848c42f94f4$exports, \"useInteractOutside\", function () {\n  return $edcfa848c42f94f4$export$872b660ac5a1ff98;\n});\n\nfunction $edcfa848c42f94f4$export$872b660ac5a1ff98(props) {\n  var ref = props.ref,\n      onInteractOutside = props.onInteractOutside,\n      isDisabled = props.isDisabled,\n      onInteractOutsideStart = props.onInteractOutsideStart;\n  var stateRef = $goTMa$react.useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n    onInteractOutside: onInteractOutside,\n    onInteractOutsideStart: onInteractOutsideStart\n  });\n  var state = stateRef.current;\n  state.onInteractOutside = onInteractOutside;\n  state.onInteractOutsideStart = onInteractOutsideStart;\n  $goTMa$react.useEffect(function () {\n    if (isDisabled) return;\n\n    var onPointerDown = function onPointerDown(e) {\n      if ($edcfa848c42f94f4$var$isValidEvent(e, ref) && state.onInteractOutside) {\n        if (state.onInteractOutsideStart) state.onInteractOutsideStart(e);\n        state.isPointerDown = true;\n      }\n    }; // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n\n\n    if (typeof PointerEvent !== 'undefined') {\n      var onPointerUp = function onPointerUp(e) {\n        if (state.isPointerDown && state.onInteractOutside && $edcfa848c42f94f4$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      }; // changing these to capture phase fixed combobox\n\n\n      document.addEventListener('pointerdown', onPointerDown, true);\n      document.addEventListener('pointerup', onPointerUp, true);\n      return function () {\n        document.removeEventListener('pointerdown', onPointerDown, true);\n        document.removeEventListener('pointerup', onPointerUp, true);\n      };\n    } else {\n      var onMouseUp = function onMouseUp(e) {\n        if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;else if (state.isPointerDown && state.onInteractOutside && $edcfa848c42f94f4$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      var onTouchEnd = function onTouchEnd(e) {\n        state.ignoreEmulatedMouseEvents = true;\n\n        if (state.onInteractOutside && state.isPointerDown && $edcfa848c42f94f4$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      document.addEventListener('mousedown', onPointerDown, true);\n      document.addEventListener('mouseup', onMouseUp, true);\n      document.addEventListener('touchstart', onPointerDown, true);\n      document.addEventListener('touchend', onTouchEnd, true);\n      return function () {\n        document.removeEventListener('mousedown', onPointerDown, true);\n        document.removeEventListener('mouseup', onMouseUp, true);\n        document.removeEventListener('touchstart', onPointerDown, true);\n        document.removeEventListener('touchend', onTouchEnd, true);\n      };\n    }\n  }, [ref, state, isDisabled]);\n}\n\nfunction $edcfa848c42f94f4$var$isValidEvent(event, ref) {\n  if (event.button > 0) return false; // if the event target is no longer in the document\n\n  if (event.target) {\n    var ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;\n  }\n\n  return ref.current && !ref.current.contains(event.target);\n}\n\nvar $892d64db2a3c53b0$exports = {};\n$parcel$export($892d64db2a3c53b0$exports, \"useKeyboard\", function () {\n  return $892d64db2a3c53b0$export$8f71654801c2f7cd;\n});\n\nfunction $951fbcbbca8db6ce$export$48d1ea6320830260(handler) {\n  if (!handler) return;\n  var shouldStopPropagation = true;\n  return function (e) {\n    var event = _objectSpread(_objectSpread({}, e), {}, {\n      preventDefault: function preventDefault() {\n        e.preventDefault();\n      },\n      isDefaultPrevented: function isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n      stopPropagation: function stopPropagation() {\n        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n      },\n      continuePropagation: function continuePropagation() {\n        shouldStopPropagation = false;\n      }\n    });\n\n    handler(event);\n    if (shouldStopPropagation) e.stopPropagation();\n  };\n}\n\nfunction $892d64db2a3c53b0$export$8f71654801c2f7cd(props) {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: $951fbcbbca8db6ce$export$48d1ea6320830260(props.onKeyDown),\n      onKeyUp: $951fbcbbca8db6ce$export$48d1ea6320830260(props.onKeyUp)\n    }\n  };\n}\n\nvar $c09386fc48fa427d$exports = {};\n$parcel$export($c09386fc48fa427d$exports, \"useMove\", function () {\n  return $c09386fc48fa427d$export$36da96379f79f245;\n});\n\nfunction $c09386fc48fa427d$export$36da96379f79f245(props) {\n  var onMoveStart = props.onMoveStart,\n      onMove = props.onMove,\n      onMoveEnd = props.onMoveEnd;\n  var state = $goTMa$react.useRef({\n    didMove: false,\n    lastPosition: null,\n    id: null\n  });\n\n  var _$goTMa$reactariautil2 = $goTMa$reactariautils.useGlobalListeners(),\n      addGlobalListener = _$goTMa$reactariautil2.addGlobalListener,\n      removeGlobalListener = _$goTMa$reactariautil2.removeGlobalListener;\n\n  var moveProps1 = $goTMa$react.useMemo(function () {\n    var moveProps = {};\n\n    var start = function start() {\n      $f7e14e656343df57$export$16a4697467175487();\n      state.current.didMove = false;\n    };\n\n    var move = function move(originalEvent, pointerType, deltaX, deltaY) {\n      if (deltaX === 0 && deltaY === 0) return;\n\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({\n          type: 'movestart',\n          pointerType: pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      onMove({\n        type: 'move',\n        pointerType: pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    var end = function end(originalEvent, pointerType) {\n      $f7e14e656343df57$export$b0d6fa1ab32e3295();\n      if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({\n        type: 'moveend',\n        pointerType: pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    if (typeof PointerEvent === 'undefined') {\n      var onMouseMove = function onMouseMove(e) {\n        if (e.button === 0) {\n          move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n\n      var onMouseUp = function onMouseUp(e) {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      moveProps.onMouseDown = function (e) {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      var onTouchMove = function onTouchMove(e) {\n        var touch = _toConsumableArray(e.changedTouches).findIndex(function (_ref3) {\n          var identifier = _ref3.identifier;\n          return identifier === state.current.id;\n        });\n\n        if (touch >= 0) {\n          var _e$changedTouches$tou = e.changedTouches[touch],\n              pageX = _e$changedTouches$tou.pageX,\n              pageY = _e$changedTouches$tou.pageY;\n          move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: pageX,\n            pageY: pageY\n          };\n        }\n      };\n\n      var onTouchEnd = function onTouchEnd(e) {\n        var touch = _toConsumableArray(e.changedTouches).findIndex(function (_ref4) {\n          var identifier = _ref4.identifier;\n          return identifier === state.current.id;\n        });\n\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n\n      moveProps.onTouchStart = function (e) {\n        if (e.changedTouches.length === 0 || state.current.id != null) return;\n        var _e$changedTouches$ = e.changedTouches[0],\n            pageX = _e$changedTouches$.pageX,\n            pageY = _e$changedTouches$.pageY,\n            identifier = _e$changedTouches$.identifier;\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {\n          pageX: pageX,\n          pageY: pageY\n        };\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      var onPointerMove = function onPointerMove(e) {\n        if (e.pointerId === state.current.id) {\n          var pointerType = e.pointerType || 'mouse'; // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n\n      var onPointerUp = function onPointerUp(e) {\n        if (e.pointerId === state.current.id) {\n          var pointerType = e.pointerType || 'mouse';\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n\n      moveProps.onPointerDown = function (e) {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n\n    var triggerKeyboardMove = function triggerKeyboardMove(e, deltaX, deltaY) {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n\n    moveProps.onKeyDown = function (e) {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n  return {\n    moveProps: moveProps1\n  };\n}\n\nvar $a3dbce0aed7087e2$exports = {};\n$parcel$export($a3dbce0aed7087e2$exports, \"useScrollWheel\", function () {\n  return $a3dbce0aed7087e2$export$2123ff2b87c81ca;\n});\n\nfunction $a3dbce0aed7087e2$export$2123ff2b87c81ca(props, ref) {\n  var onScroll = props.onScroll,\n      isDisabled = props.isDisabled;\n  var onScrollHandler = $goTMa$react.useCallback(function (e) {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) return; // stop scrolling the page\n\n    e.preventDefault();\n    e.stopPropagation();\n    if (onScroll) onScroll({\n      deltaX: e.deltaX,\n      deltaY: e.deltaY\n    });\n  }, [onScroll]);\n  $goTMa$reactariautils.useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);\n}\n\nvar $3cd7b5d0eebf0ca9$exports = {};\n$parcel$export($3cd7b5d0eebf0ca9$exports, \"useLongPress\", function () {\n  return $3cd7b5d0eebf0ca9$export$c24ed0104d07eab9;\n});\nvar $3cd7b5d0eebf0ca9$var$DEFAULT_THRESHOLD = 500;\n\nfunction $3cd7b5d0eebf0ca9$export$c24ed0104d07eab9(props) {\n  var isDisabled = props.isDisabled,\n      onLongPressStart = props.onLongPressStart,\n      onLongPressEnd = props.onLongPressEnd,\n      onLongPress = props.onLongPress,\n      _props$threshold = props.threshold,\n      threshold = _props$threshold === void 0 ? $3cd7b5d0eebf0ca9$var$DEFAULT_THRESHOLD : _props$threshold,\n      accessibilityDescription = props.accessibilityDescription;\n  var timeRef = $goTMa$react.useRef(null);\n\n  var _$goTMa$reactariautil3 = $goTMa$reactariautils.useGlobalListeners(),\n      addGlobalListener = _$goTMa$reactariautil3.addGlobalListener,\n      removeGlobalListener = _$goTMa$reactariautil3.removeGlobalListener;\n\n  var _$0294ea432cd92340$ex2 = $0294ea432cd92340$export$45712eceda6fad21({\n    isDisabled: isDisabled,\n    onPressStart: function onPressStart(e1) {\n      if (e1.pointerType === 'mouse' || e1.pointerType === 'touch') {\n        if (onLongPressStart) onLongPressStart(_objectSpread(_objectSpread({}, e1), {}, {\n          type: 'longpressstart'\n        }));\n        timeRef.current = setTimeout(function () {\n          // Prevent other usePress handlers from also handling this event.\n          e1.target.dispatchEvent(new PointerEvent('pointercancel', {\n            bubbles: true\n          }));\n          if (onLongPress) onLongPress(_objectSpread(_objectSpread({}, e1), {}, {\n            type: 'longpress'\n          }));\n          timeRef.current = null;\n        }, threshold); // Prevent context menu, which may be opened on long press on touch devices\n\n        // Prevent context menu, which may be opened on long press on touch devices\n        if (e1.pointerType === 'touch') {\n          var onContextMenu = function onContextMenu(e) {\n            e.preventDefault();\n          };\n\n          addGlobalListener(e1.target, 'contextmenu', onContextMenu, {\n            once: true\n          });\n          addGlobalListener(window, 'pointerup', function () {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(function () {\n              removeGlobalListener(e1.target, 'contextmenu', onContextMenu);\n            }, 30);\n          }, {\n            once: true\n          });\n        }\n      }\n    },\n    onPressEnd: function onPressEnd(e) {\n      if (timeRef.current) clearTimeout(timeRef.current);\n      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) onLongPressEnd(_objectSpread(_objectSpread({}, e), {}, {\n        type: 'longpressend'\n      }));\n    }\n  }),\n      pressProps = _$0294ea432cd92340$ex2.pressProps;\n\n  var descriptionProps = $goTMa$reactariautils.useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);\n  return {\n    longPressProps: $goTMa$reactariautils.mergeProps(pressProps, descriptionProps)\n  };\n}\n\n$parcel$exportWildcard(module.exports, $e1dbec26039c051d$exports);\n$parcel$exportWildcard(module.exports, $3596bae48579386f$exports);\n$parcel$exportWildcard(module.exports, $5cb73d0ce355b0dc$exports);\n$parcel$exportWildcard(module.exports, $e77252a287ef94ab$exports);\n$parcel$exportWildcard(module.exports, $d16842bbd0359d1b$exports);\n$parcel$exportWildcard(module.exports, $ffbc150311c75f01$exports);\n$parcel$exportWildcard(module.exports, $edcfa848c42f94f4$exports);\n$parcel$exportWildcard(module.exports, $892d64db2a3c53b0$exports);\n$parcel$exportWildcard(module.exports, $c09386fc48fa427d$exports);\n$parcel$exportWildcard(module.exports, $0294ea432cd92340$exports);\n$parcel$exportWildcard(module.exports, $a3dbce0aed7087e2$exports);\n$parcel$exportWildcard(module.exports, $3cd7b5d0eebf0ca9$exports);","map":{"version":3,"sources":["packages/@react-aria/interactions/src/Pressable.tsx","packages/@react-aria/interactions/src/usePress.ts","packages/@react-aria/interactions/src/textSelection.ts","packages/@react-aria/interactions/src/utils.ts","packages/@react-aria/interactions/src/context.ts","packages/@react-aria/interactions/src/PressResponder.tsx","packages/@react-aria/interactions/src/useFocus.ts","packages/@react-aria/interactions/src/useFocusVisible.ts","packages/@react-aria/interactions/src/useFocusWithin.ts","packages/@react-aria/interactions/src/useHover.ts","packages/@react-aria/interactions/src/useInteractOutside.ts","packages/@react-aria/interactions/src/useKeyboard.ts","packages/@react-aria/interactions/src/createEventHandler.ts","packages/@react-aria/interactions/src/useMove.ts","packages/@react-aria/interactions/src/useScrollWheel.ts","packages/@react-aria/interactions/src/useLongPress.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {mergeProps} from '@react-aria/utils';\nimport {PressProps, usePress} from './usePress';\nimport React, {HTMLAttributes, ReactElement, RefObject, useRef} from 'react';\n\ninterface PressableProps extends PressProps {\n  children: ReactElement<HTMLAttributes<HTMLElement>, string>\n}\n\nexport const Pressable = React.forwardRef(({children, ...props}: PressableProps, ref: RefObject<HTMLElement>) => {\n  let newRef = useRef();\n  ref = ref ?? newRef;\n  let {pressProps} = usePress({...props, ref});\n  let child = React.Children.only(children);\n  return React.cloneElement(\n    child,\n    // @ts-ignore\n    {ref, ...mergeProps(child.props, pressProps)}\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {disableTextSelection, restoreTextSelection} from './textSelection';\nimport {focusWithoutScrolling, mergeProps, useGlobalListeners, useSyncRef} from '@react-aria/utils';\nimport {HTMLAttributes, RefObject, useContext, useEffect, useMemo, useRef, useState} from 'react';\nimport {isVirtualClick} from './utils';\nimport {PointerType, PressEvents} from '@react-types/shared';\nimport {PressResponderContext} from './context';\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean,\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean,\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean,\n  /**\n   * Whether press events should be canceled when the pointer leaves the target while pressed.\n   * By default, this is `false`, which means if the pointer returns back over the target while\n   * still pressed, onPressStart will be fired again. If set to `true`, the press is canceled\n   * when the pointer leaves the target and onPressStart will not be fired if the pointer returns.\n   */\n  shouldCancelOnPointerExit?: boolean,\n  /** Whether text selection should be enabled on the pressable element. */\n  allowTextSelectionOnPress?: boolean\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<HTMLElement>\n}\n\ninterface PressState {\n  isPressed: boolean,\n  ignoreEmulatedMouseEvents: boolean,\n  ignoreClickAfterPress: boolean,\n  didFirePressStart: boolean,\n  activePointerId: any,\n  target: HTMLElement | null,\n  isOverTarget: boolean,\n  pointerType: PointerType,\n  userSelect?: string\n}\n\ninterface EventBase {\n  currentTarget: EventTarget,\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\nexport interface PressResult {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean,\n  /** Props to spread on the target element. */\n  pressProps: HTMLAttributes<HTMLElement>\n}\n\nfunction usePressResponderContext(props: PressHookProps): PressHookProps {\n  // Consume context from <PressResponder> and merge with props.\n  let context = useContext(PressResponderContext);\n  if (context) {\n    let {register, ...contextProps} = context;\n    props = mergeProps(contextProps, props) as PressHookProps;\n    register();\n  }\n  useSyncRef(context, props.ref);\n\n  return props;\n}\n\n/**\n * Handles press interactions across mouse, touch, keyboard, and screen readers.\n * It normalizes behavior across browsers and platforms, and handles many nuances\n * of dealing with pointer and keyboard events.\n */\nexport function usePress(props: PressHookProps): PressResult {\n  let {\n    onPress,\n    onPressChange,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    isDisabled,\n    isPressed: isPressedProp,\n    preventFocusOnPress,\n    shouldCancelOnPointerExit,\n    allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _, // Removing `ref` from `domProps` because TypeScript is dumb\n    ...domProps\n  } = usePressResponderContext(props);\n  let propsRef = useRef<PressHookProps>(null);\n  propsRef.current = {onPress, onPressChange, onPressStart, onPressEnd, onPressUp, isDisabled, shouldCancelOnPointerExit};\n\n  let [isPressed, setPressed] = useState(false);\n  let ref = useRef<PressState>({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n\n  let {addGlobalListener, removeAllGlobalListeners} = useGlobalListeners();\n\n  let pressProps = useMemo(() => {\n    let state = ref.current;\n    let triggerPressStart = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressStart, onPressChange, isDisabled} = propsRef.current;\n      if (isDisabled || state.didFirePressStart) {\n        return;\n      }\n\n      if (onPressStart) {\n        onPressStart({\n          type: 'pressstart',\n          pointerType,\n          target: originalEvent.currentTarget as HTMLElement,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(true);\n      }\n\n      state.didFirePressStart = true;\n      setPressed(true);\n    };\n\n    let triggerPressEnd = (originalEvent: EventBase, pointerType: PointerType, wasPressed = true) => {\n      let {onPressEnd, onPressChange, onPress, isDisabled} = propsRef.current;\n      if (!state.didFirePressStart) {\n        return;\n      }\n\n      state.ignoreClickAfterPress = true;\n      state.didFirePressStart = false;\n\n      if (onPressEnd) {\n        onPressEnd({\n          type: 'pressend',\n          pointerType,\n          target: originalEvent.currentTarget as HTMLElement,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(false);\n      }\n\n      setPressed(false);\n\n      if (onPress && wasPressed && !isDisabled) {\n        onPress({\n          type: 'press',\n          pointerType,\n          target: originalEvent.currentTarget as HTMLElement,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let triggerPressUp = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressUp, isDisabled} = propsRef.current;\n      if (isDisabled) {\n        return;\n      }\n\n      if (onPressUp) {\n        onPressUp({\n          type: 'pressup',\n          pointerType,\n          target: originalEvent.currentTarget as HTMLElement,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let cancel = (e: EventBase) => {\n      if (state.isPressed) {\n        if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n        state.isPressed = false;\n        state.isOverTarget = false;\n        state.activePointerId = null;\n        state.pointerType = null;\n        removeAllGlobalListeners();\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n      }\n    };\n\n    let pressProps: HTMLAttributes<HTMLElement> = {\n      onKeyDown(e) {\n        if (isValidKeyboardEvent(e.nativeEvent) && e.currentTarget.contains(e.target as HTMLElement)) {\n          if (shouldPreventDefaultKeyboard(e.target as Element)) {\n            e.preventDefault();\n          }\n          e.stopPropagation();\n\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget as HTMLElement;\n            state.isPressed = true;\n            triggerPressStart(e, 'keyboard');\n\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n            addGlobalListener(document, 'keyup', onKeyUp, false);\n          }\n        }\n      },\n      onKeyUp(e) {\n        if (isValidKeyboardEvent(e.nativeEvent) && !e.repeat && e.currentTarget.contains(e.target as HTMLElement)) {\n          triggerPressUp(createEvent(state.target, e), 'keyboard');\n        }\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled) {\n            e.preventDefault();\n          }\n\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || isVirtualClick(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled && !preventFocusOnPress) {\n              focusWithoutScrolling(e.currentTarget);\n            }\n\n            triggerPressStart(e, 'virtual');\n            triggerPressUp(e, 'virtual');\n            triggerPressEnd(e, 'virtual');\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n    };\n\n    let onKeyUp = (e: KeyboardEvent) => {\n      if (state.isPressed && isValidKeyboardEvent(e)) {\n        if (shouldPreventDefaultKeyboard(e.target as Element)) {\n          e.preventDefault();\n        }\n        e.stopPropagation();\n\n        state.isPressed = false;\n        let target = e.target as HTMLElement;\n        triggerPressEnd(createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners();\n\n        // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n        if (state.target.contains(target) && isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link') {\n          state.target.click();\n        }\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = (e) => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if (isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget as HTMLElement)) {\n          e.preventDefault();\n        }\n\n        state.pointerType = e.pointerType;\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n\n          if (!isDisabled && !preventFocusOnPress) {\n            focusWithoutScrolling(e.currentTarget);\n          }\n\n          if (!allowTextSelectionOnPress) {\n            disableTextSelection(state.target);\n          }\n\n          triggerPressStart(e, state.pointerType);\n\n          addGlobalListener(document, 'pointermove', onPointerMove, false);\n          addGlobalListener(document, 'pointerup', onPointerUp, false);\n          addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n        }\n      };\n\n      pressProps.onMouseDown = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if (shouldPreventDefault(e.currentTarget as HTMLElement)) {\n            e.preventDefault();\n          }\n\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = (e) => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target as HTMLElement) || state.pointerType === 'virtual') {\n          return;\n        }\n\n        // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n        if (e.button === 0 && isOverTarget(e, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType || e.pointerType);\n        }\n      };\n\n      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId !== state.activePointerId) {\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if (isOverTarget(e, state.target)) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType);\n          } else if (state.isOverTarget) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          }\n\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) {\n            restoreTextSelection(state.target);\n          }\n        }\n      };\n\n      let onPointerCancel = (e: PointerEvent) => {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = (e) => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget as HTMLElement)) {\n          e.preventDefault();\n        }\n\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) {\n          return;\n        }\n\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';\n\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(document, 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, state.pointerType);\n        }\n      };\n\n      pressProps.onMouseLeave = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onMouseUp = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) {\n          triggerPressUp(e, state.pointerType);\n        }\n      };\n\n      let onMouseUp = (e: MouseEvent) => {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        }\n\n        state.isPressed = false;\n        removeAllGlobalListeners();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        let touch = getTouchFromEvent(e.nativeEvent);\n        if (!touch) {\n          return;\n        }\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        if (!allowTextSelectionOnPress) {\n          disableTextSelection(state.target);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(window, 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onTouchEnd = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(e, state.pointerType, false);\n        }\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed) {\n          cancel(e);\n        }\n      };\n\n      let onScroll = (e: Event) => {\n        if (state.isPressed && (e.target as HTMLElement).contains(state.target)) {\n          cancel({\n            currentTarget: state.target,\n            shiftKey: false,\n            ctrlKey: false,\n            metaKey: false,\n            altKey: false\n          });\n        }\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]);\n\n  // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if (!allowTextSelectionOnPress) {\n        restoreTextSelection(ref.current.target);\n      }\n    };\n  }, [allowTextSelectionOnPress]);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: mergeProps(domProps, pressProps)\n  };\n}\n\nfunction isHTMLAnchorLink(target: HTMLElement): boolean {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction isValidKeyboardEvent(event: KeyboardEvent): boolean {\n  const {key, code, target} = event;\n  const element = target as HTMLElement;\n  const {tagName, isContentEditable} = element;\n  const role = element.getAttribute('role');\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (\n    (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') &&\n    (tagName !== 'INPUT' &&\n      tagName !== 'TEXTAREA' &&\n      isContentEditable !== true) &&\n    // A link with a valid href should be handled natively,\n    // unless it also has role='button' and was triggered using Space.\n    (!isHTMLAnchorLink(element) || (role === 'button' && key !== 'Enter')) &&\n    // An element with role='link' should only trigger with Enter key\n    !(role === 'link' && key !== 'Enter')\n  );\n}\n\nfunction getTouchFromEvent(event: TouchEvent): Touch | null {\n  const {targetTouches} = event;\n  if (targetTouches.length > 0) {\n    return targetTouches[0];\n  }\n  return null;\n}\n\nfunction getTouchById(\n  event: TouchEvent,\n  pointerId: null | number\n): null | Touch {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) {\n      return touch;\n    }\n  }\n  return null;\n}\n\nfunction createEvent(target: HTMLElement, e: EventBase): EventBase {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\n\ninterface Rect {\n  top: number,\n  right: number,\n  bottom: number,\n  left: number\n}\n\ninterface EventPoint {\n  clientX: number,\n  clientY: number,\n  width?: number,\n  height?: number,\n  radiusX?: number,\n  radiusY?: number\n}\n\nfunction getPointClientRect(point: EventPoint): Rect {\n  let offsetX = (point.width / 2) || point.radiusX || 0;\n  let offsetY = (point.height / 2) || point.radiusY || 0;\n\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction areRectanglesOverlapping(a: Rect, b: Rect) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) {\n    return false;\n  }\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) {\n    return false;\n  }\n  return true;\n}\n\nfunction isOverTarget(point: EventPoint, target: HTMLElement) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = getPointClientRect(point);\n  return areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction shouldPreventDefault(target: HTMLElement) {\n  // We cannot prevent default if the target is a draggable element.\n  return !target.draggable;\n}\n\nfunction shouldPreventDefaultKeyboard(target: Element) {\n  return !((target.tagName === 'INPUT' || target.tagName === 'BUTTON') && (target as HTMLButtonElement | HTMLInputElement).type === 'submit');\n}\n\nfunction isVirtualPointerEvent(event: PointerEvent) {\n  // If the pointer size is zero, then we assume it's from a screen reader.\n  // Android TalkBack double tap will sometimes return a event with width and height of 1\n  // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.\n  // Cannot use \"event.pressure === 0\" as the sole check due to Safari pointer events always returning pressure === 0\n  // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush\n  // Talkback double tap from Windows Firefox touch screen press\n  return (\n    (event.width === 0 && event.height === 0) ||\n    (event.width === 1 &&\n      event.height === 1 &&\n      event.pressure === 0 &&\n      event.detail === 0 &&\n      event.pointerType === 'mouse'\n    )\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isIOS, runAfterTransition} from '@react-aria/utils';\n\n// Safari on iOS starts selecting text on long press. The only way to avoid this, it seems,\n// is to add user-select: none to the entire page. Adding it to the pressable element prevents\n// that element from being selected, but nearby elements may still receive selection. We add\n// user-select: none on touch start, and remove it again on touch end to prevent this.\n// This must be implemented using global state to avoid race conditions between multiple elements.\n\n// There are three possible states due to the delay before removing user-select: none after\n// pointer up. The 'default' state always transitions to the 'disabled' state, which transitions\n// to 'restoring'. The 'restoring' state can either transition back to 'disabled' or 'default'.\n\n// For non-iOS devices, we apply user-select: none to the pressed element instead to avoid possible\n// performance issues that arise from applying and removing user-select: none to the entire page\n// (see https://github.com/adobe/react-spectrum/issues/1609).\ntype State = 'default' | 'disabled' | 'restoring';\n\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet state: State = 'default';\nlet savedUserSelect = '';\nlet modifiedElementMap = new WeakMap<HTMLElement, string>();\n\nexport function disableTextSelection(target?: HTMLElement) {\n  if (isIOS()) {\n    if (state === 'default') {\n      savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = 'none';\n    }\n\n    state = 'disabled';\n  } else if (target) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = 'none';\n  }\n}\n\nexport function restoreTextSelection(target?: HTMLElement) {\n  if (isIOS()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if (state !== 'disabled') {\n      return;\n    }\n\n    state = 'restoring';\n\n    // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      runAfterTransition(() => {\n        // Avoid race conditions\n        if (state === 'restoring') {\n          if (document.documentElement.style.webkitUserSelect === 'none') {\n            document.documentElement.style.webkitUserSelect = savedUserSelect || '';\n          }\n\n          savedUserSelect = '';\n          state = 'default';\n        }\n      });\n    }, 300);\n  } else {\n    // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    if (target && modifiedElementMap.has(target)) {\n      let targetOldUserSelect = modifiedElementMap.get(target);\n\n      if (target.style.userSelect === 'none') {\n        target.style.userSelect = targetOldUserSelect;\n      }\n\n      if (target.getAttribute('style') === '') {\n        target.removeAttribute('style');\n      }\n      modifiedElementMap.delete(target);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvent as ReactFocusEvent, useCallback, useRef} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\n// Original licensing for the following method can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/blob/3c713d513195a53788b3f8bb4b70279d68b15bcc/packages/react-interactions/events/src/dom/shared/index.js#L74-L87\n\n// Keyboards, Assistive Technologies, and element.click() all produce a \"virtual\"\n// click event. This is a method of inferring such clicks. Every browser except\n// IE 11 only sets a zero value of \"detail\" for click events that are \"virtual\".\n// However, IE 11 uses a zero value for all click events. For IE 11 we rely on\n// the quirk that it produces click events that are of type PointerEvent, and\n// where only the \"virtual\" click lacks a pointerType field.\n\nexport function isVirtualClick(event: MouseEvent | PointerEvent): boolean {\n  // JAWS/NVDA with Firefox.\n  if ((event as any).mozInputSource === 0 && event.isTrusted) {\n    return true;\n  }\n\n  return event.detail === 0 && !(event as PointerEvent).pointerType;\n}\n\nexport class SyntheticFocusEvent implements ReactFocusEvent {\n  nativeEvent: FocusEvent;\n  target: Element;\n  currentTarget: Element;\n  relatedTarget: Element;\n  bubbles: boolean;\n  cancelable: boolean;\n  defaultPrevented: boolean;\n  eventPhase: number;\n  isTrusted: boolean;\n  timeStamp: number;\n  type: string;\n\n  constructor(type: string, nativeEvent: FocusEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target as Element;\n    this.currentTarget = nativeEvent.currentTarget as Element;\n    this.relatedTarget = nativeEvent.relatedTarget as Element;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n\n  isDefaultPrevented(): boolean {\n    return this.nativeEvent.defaultPrevented;\n  }\n\n  preventDefault(): void {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n\n  stopPropagation(): void {\n    this.nativeEvent.stopPropagation();\n    this.isPropagationStopped = () => true;\n  }\n\n  isPropagationStopped(): boolean {\n    return false;\n  }\n\n  persist() {}\n}\n\nexport function useSyntheticBlurEvent(onBlur: (e: ReactFocusEvent) => void) {\n  let stateRef = useRef({\n    isFocused: false,\n    onBlur,\n    observer: null as MutationObserver\n  });\n  stateRef.current.onBlur = onBlur;\n\n  // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n  useLayoutEffect(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []);\n\n  // This function is called during a React onFocus event.\n  return useCallback((e: ReactFocusEvent) => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (\n      e.target instanceof HTMLButtonElement ||\n      e.target instanceof HTMLInputElement ||\n      e.target instanceof HTMLTextAreaElement ||\n      e.target instanceof HTMLSelectElement\n    ) {\n      stateRef.current.isFocused = true;\n\n      let target = e.target;\n      let onBlurHandler = (e: FocusEvent) => {\n        stateRef.current.isFocused = false;\n\n        if (target.disabled) {\n          // For backward compatibility, dispatch a (fake) React synthetic event.\n          stateRef.current.onBlur?.(new SyntheticFocusEvent('blur', e));\n        }\n\n        // We no longer need the MutationObserver once the target is blurred.\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n\n      target.addEventListener('focusout', onBlurHandler, {once: true});\n\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer.disconnect();\n          target.dispatchEvent(new FocusEvent('blur'));\n          target.dispatchEvent(new FocusEvent('focusout', {bubbles: true}));\n        }\n      });\n\n      stateRef.current.observer.observe(target, {attributes: true, attributeFilter: ['disabled']});\n    }\n  }, []);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PressProps} from './usePress';\nimport React, {MutableRefObject} from 'react';\n\ninterface IPressResponderContext extends PressProps {\n  register(): void,\n  ref?: MutableRefObject<HTMLElement>\n}\n\nexport const PressResponderContext = React.createContext<IPressResponderContext>(null);\nPressResponderContext.displayName = 'PressResponderContext';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {mergeProps, useSyncRef} from '@react-aria/utils';\nimport {PressProps} from './usePress';\nimport {PressResponderContext} from './context';\nimport React, {ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\n\ninterface PressResponderProps extends PressProps {\n  children: ReactNode\n}\n\nexport const PressResponder = React.forwardRef(({children, ...props}: PressResponderProps, ref: RefObject<HTMLElement>) => {\n  let isRegistered = useRef(false);\n  let prevContext = useContext(PressResponderContext);\n  let context = mergeProps(prevContext || {}, {\n    ...props,\n    ref: ref || prevContext?.ref,\n    register() {\n      isRegistered.current = true;\n      if (prevContext) {\n        prevContext.register();\n      }\n    }\n  });\n\n  useSyncRef(prevContext, ref);\n\n  useEffect(() => {\n    if (!isRegistered.current) {\n      console.warn(\n        'A PressResponder was rendered without a pressable child. ' +\n        'Either call the usePress hook, or wrap your DOM node with <Pressable> component.'\n      );\n    }\n  }, []);\n\n  return (\n    <PressResponderContext.Provider value={context}>\n      {children}\n    </PressResponderContext.Provider>\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {FocusEvent, HTMLAttributes, useCallback} from 'react';\nimport {FocusEvents} from '@react-types/shared';\nimport {useSyntheticBlurEvent} from './utils';\n\ninterface FocusProps extends FocusEvents {\n  /** Whether the focus events should be disabled. */\n  isDisabled?: boolean\n}\n\ninterface FocusResult {\n  /** Props to spread onto the target element. */\n  focusProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles focus events for the immediate target.\n * Focus events on child elements will be ignored.\n */\nexport function useFocus(props: FocusProps): FocusResult {\n  let {\n    isDisabled,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onFocusChange\n  } = props;\n\n  const onBlur: FocusProps['onBlur'] = useCallback((e: FocusEvent) => {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) {\n        onBlurProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(false);\n      }\n\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n\n\n  const onSyntheticFocus = useSyntheticBlurEvent(onBlur);\n\n  const onFocus: FocusProps['onFocus'] = useCallback((e: FocusEvent) => {\n    if (e.target === e.currentTarget) {\n      if (onFocusProp) {\n        onFocusProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(true);\n      }\n\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n\n  return {\n    focusProps: {\n      onFocus: (!isDisabled && (onFocusProp || onFocusChange || onBlurProp)) ? onFocus : undefined,\n      onBlur: (!isDisabled && (onBlurProp || onFocusChange)) ? onBlur : null\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {isMac} from '@react-aria/utils';\nimport {isVirtualClick} from './utils';\nimport {useEffect, useState} from 'react';\n\ntype Modality = 'keyboard' | 'pointer' | 'virtual';\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent;\ntype Handler = (modality: Modality, e: HandlerEvent) => void;\ntype FocusVisibleHandler = (isFocusVisible: boolean) => void;\ninterface FocusVisibleProps {\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\ninterface FocusVisibleResult {\n  /** Whether keyboard focus is visible globally. */\n  isFocusVisible: boolean\n}\n\nlet currentModality = null;\nlet changeHandlers = new Set<Handler>();\nlet hasSetupGlobalListeners = false;\nlet hasEventBeforeFocus = false;\nlet hasBlurredWindowRecently = false;\n\n// Only Tab or Esc keys will make focus visible on text input elements\nconst FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\n\nfunction triggerChangeHandlers(modality: Modality, e: HandlerEvent) {\n  for (let handler of changeHandlers) {\n    handler(modality, e);\n  }\n}\n\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\nfunction isValidKey(e: KeyboardEvent) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || (!isMac() && e.altKey) || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\n\n\nfunction handleKeyboardEvent(e: KeyboardEvent) {\n  hasEventBeforeFocus = true;\n  if (isValidKey(e)) {\n    currentModality = 'keyboard';\n    triggerChangeHandlers('keyboard', e);\n  }\n}\n\nfunction handlePointerEvent(e: PointerEvent | MouseEvent) {\n  currentModality = 'pointer';\n  if (e.type === 'mousedown' || e.type === 'pointerdown') {\n    hasEventBeforeFocus = true;\n    triggerChangeHandlers('pointer', e);\n  }\n}\n\nfunction handleClickEvent(e: MouseEvent) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true;\n    currentModality = 'virtual';\n  }\n}\n\nfunction handleFocusEvent(e: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) {\n    return;\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    currentModality = 'virtual';\n    triggerChangeHandlers('virtual', e);\n  }\n\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = false;\n}\n\nfunction handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = true;\n}\n\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\nfunction setupGlobalFocusEvents() {\n  if (typeof window === 'undefined' || hasSetupGlobalListeners) {\n    return;\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  let focus = HTMLElement.prototype.focus;\n  HTMLElement.prototype.focus = function () {\n    hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n\n  document.addEventListener('keydown', handleKeyboardEvent, true);\n  document.addEventListener('keyup', handleKeyboardEvent, true);\n  document.addEventListener('click', handleClickEvent, true);\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener('focus', handleFocusEvent, true);\n  window.addEventListener('blur', handleWindowBlur, false);\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', handlePointerEvent, true);\n    document.addEventListener('pointermove', handlePointerEvent, true);\n    document.addEventListener('pointerup', handlePointerEvent, true);\n  } else {\n    document.addEventListener('mousedown', handlePointerEvent, true);\n    document.addEventListener('mousemove', handlePointerEvent, true);\n    document.addEventListener('mouseup', handlePointerEvent, true);\n  }\n\n  hasSetupGlobalListeners = true;\n}\n\nif (typeof document !== 'undefined') {\n  if (document.readyState !== 'loading') {\n    setupGlobalFocusEvents();\n  } else {\n    document.addEventListener('DOMContentLoaded', setupGlobalFocusEvents);\n  }\n}\n\n/**\n * If true, keyboard focus is visible.\n */\nexport function isFocusVisible(): boolean {\n  return currentModality !== 'pointer';\n}\n\nexport function getInteractionModality(): Modality {\n  return currentModality;\n}\n\nexport function setInteractionModality(modality: Modality) {\n  currentModality = modality;\n  triggerChangeHandlers(modality, null);\n}\n\n/**\n * Keeps state of the current modality.\n */\nexport function useInteractionModality(): Modality {\n  setupGlobalFocusEvents();\n\n  let [modality, setModality] = useState(currentModality);\n  useEffect(() => {\n    let handler = () => {\n      setModality(currentModality);\n    };\n\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  }, []);\n\n  return modality;\n}\n\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\nfunction isKeyboardFocusEvent(isTextInput: boolean, modality: Modality, e: HandlerEvent) {\n  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\n\n/**\n * Manages focus visible state for the page, and subscribes individual components for updates.\n */\nexport function useFocusVisible(props: FocusVisibleProps = {}): FocusVisibleResult {\n  let {isTextInput, autoFocus} = props;\n  let [isFocusVisibleState, setFocusVisible] = useState(autoFocus || isFocusVisible());\n  useFocusVisibleListener((isFocusVisible) => {\n    setFocusVisible(isFocusVisible);\n  }, [isTextInput], {isTextInput});\n\n  return {isFocusVisible: isFocusVisibleState};\n}\n\n/**\n * Listens for trigger change and reports if focus is visible (i.e., modality is not pointer).\n */\nexport function useFocusVisibleListener(fn: FocusVisibleHandler, deps: ReadonlyArray<any>, opts?: {isTextInput?: boolean}): void {\n  setupGlobalFocusEvents();\n\n  useEffect(() => {\n    let handler = (modality: Modality, e: HandlerEvent) => {\n      if (!isKeyboardFocusEvent(opts?.isTextInput, modality, e)) {\n        return;\n      }\n      fn(isFocusVisible());\n    };\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  }, deps);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {FocusEvent, HTMLAttributes, useCallback, useRef} from 'react';\nimport {useSyntheticBlurEvent} from './utils';\n\ninterface FocusWithinProps {\n  /** Whether the focus within events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when the target element or a descendant receives focus. */\n  onFocusWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the target element and all descendants lose focus. */\n  onBlurWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the the focus within state changes. */\n  onFocusWithinChange?: (isFocusWithin: boolean) => void\n}\n\ninterface FocusWithinResult {\n  /** Props to spread onto the target element. */\n  focusWithinProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles focus events for the target and its descendants.\n */\nexport function useFocusWithin(props: FocusWithinProps): FocusWithinResult {\n  let {\n    isDisabled,\n    onBlurWithin,\n    onFocusWithin,\n    onFocusWithinChange\n  } = props;\n  let state = useRef({\n    isFocusWithin: false\n  });\n\n  let onBlur = useCallback((e: FocusEvent) => {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.current.isFocusWithin && !(e.currentTarget as Element).contains(e.relatedTarget as Element)) {\n      state.current.isFocusWithin = false;\n\n      if (onBlurWithin) {\n        onBlurWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(false);\n      }\n    }\n  }, [onBlurWithin, onFocusWithinChange, state]);\n\n  let onSyntheticFocus = useSyntheticBlurEvent(onBlur);\n  let onFocus = useCallback((e: FocusEvent) => {\n    if (!state.current.isFocusWithin) {\n      if (onFocusWithin) {\n        onFocusWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(true);\n      }\n\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);\n\n  if (isDisabled) {\n    return {\n      focusWithinProps: {\n        onFocus: null,\n        onBlur: null\n      }\n    };\n  }\n\n  return {\n    focusWithinProps: {\n      onFocus,\n      onBlur\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {HoverEvents} from '@react-types/shared';\nimport {HTMLAttributes, useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface HoverProps extends HoverEvents {\n  /** Whether the hover events should be disabled. */\n  isDisabled?: boolean\n}\n\ninterface HoverResult {\n  /** Props to spread on the target element. */\n  hoverProps: HTMLAttributes<HTMLElement>,\n  isHovered: boolean\n}\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet globalIgnoreEmulatedMouseEvents = false;\nlet hoverCount = 0;\n\nfunction setGlobalIgnoreEmulatedMouseEvents() {\n  globalIgnoreEmulatedMouseEvents = true;\n\n  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n  setTimeout(() => {\n    globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\n\nfunction handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') {\n    setGlobalIgnoreEmulatedMouseEvents();\n  }\n}\n\nfunction setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerup', handleGlobalPointerEvent);\n  } else {\n    document.addEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n  }\n\n  hoverCount++;\n  return () => {\n    hoverCount--;\n    if (hoverCount > 0) {\n      return;\n    }\n\n    if (typeof PointerEvent !== 'undefined') {\n      document.removeEventListener('pointerup', handleGlobalPointerEvent);\n    } else {\n      document.removeEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n    }\n  };\n}\n\n/**\n * Handles pointer hover interactions for an element. Normalizes behavior\n * across browsers and platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useHover(props: HoverProps): HoverResult {\n  let {\n    onHoverStart,\n    onHoverChange,\n    onHoverEnd,\n    isDisabled\n  } = props;\n\n  let [isHovered, setHovered] = useState(false);\n  let state = useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: '',\n    target: null\n  }).current;\n\n  useEffect(setupGlobalTouchEvents, []);\n\n  let {hoverProps, triggerHoverEnd} = useMemo(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) {\n        return;\n      }\n\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n\n      if (onHoverStart) {\n        onHoverStart({\n          type: 'hoverstart',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(true);\n      }\n\n      setHovered(true);\n    };\n\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = '';\n      state.target = null;\n\n      if (pointerType === 'touch' || !state.isHovered) {\n        return;\n      }\n\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) {\n        onHoverEnd({\n          type: 'hoverend',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(false);\n      }\n\n      setHovered(false);\n    };\n\n    let hoverProps: HTMLAttributes<HTMLElement> = {};\n\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = (e) => {\n        if (globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') {\n          return;\n        }\n\n        triggerHoverStart(e, e.pointerType);\n      };\n\n      hoverProps.onPointerLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as HTMLElement)) {\n          triggerHoverEnd(e, e.pointerType);\n        }\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n\n      hoverProps.onMouseEnter = (e) => {\n        if (!state.ignoreEmulatedMouseEvents && !globalIgnoreEmulatedMouseEvents) {\n          triggerHoverStart(e, 'mouse');\n        }\n\n        state.ignoreEmulatedMouseEvents = false;\n      };\n\n      hoverProps.onMouseLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as HTMLElement)) {\n          triggerHoverEnd(e, 'mouse');\n        }\n      };\n    }\n    return {hoverProps, triggerHoverEnd};\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n\n  useEffect(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) {\n      triggerHoverEnd({currentTarget: state.target}, state.pointerType);\n    }\n  }, [isDisabled]);\n\n  return {\n    hoverProps,\n    isHovered\n  };\n}\n\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {RefObject, SyntheticEvent, useEffect, useRef} from 'react';\n\ninterface InteractOutsideProps {\n  ref: RefObject<Element>,\n  onInteractOutside?: (e: SyntheticEvent) => void,\n  onInteractOutsideStart?: (e: SyntheticEvent) => void,\n  /** Whether the interact outside events should be disabled. */\n  isDisabled?: boolean\n}\n\n/**\n * Example, used in components like Dialogs and Popovers so they can close\n * when a user clicks outside them.\n */\nexport function useInteractOutside(props: InteractOutsideProps) {\n  let {ref, onInteractOutside, isDisabled, onInteractOutsideStart} = props;\n  let stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n    onInteractOutside,\n    onInteractOutsideStart\n  });\n  let state = stateRef.current;\n  state.onInteractOutside = onInteractOutside;\n  state.onInteractOutsideStart = onInteractOutsideStart;\n\n  useEffect(() => {\n    if (isDisabled) {\n      return;\n    }\n\n    let onPointerDown = (e) => {\n      if (isValidEvent(e, ref) && state.onInteractOutside) {\n        if (state.onInteractOutsideStart) {\n          state.onInteractOutsideStart(e);\n        }\n        state.isPointerDown = true;\n      }\n    };\n\n    // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n    if (typeof PointerEvent !== 'undefined') {\n      let onPointerUp = (e) => {\n        if (state.isPointerDown && state.onInteractOutside && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      // changing these to capture phase fixed combobox\n      document.addEventListener('pointerdown', onPointerDown, true);\n      document.addEventListener('pointerup', onPointerUp, true);\n\n      return () => {\n        document.removeEventListener('pointerdown', onPointerDown, true);\n        document.removeEventListener('pointerup', onPointerUp, true);\n      };\n    } else {\n      let onMouseUp = (e) => {\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n        } else if (state.isPointerDown && state.onInteractOutside && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      let onTouchEnd = (e) => {\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.onInteractOutside && state.isPointerDown && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      document.addEventListener('mousedown', onPointerDown, true);\n      document.addEventListener('mouseup', onMouseUp, true);\n      document.addEventListener('touchstart', onPointerDown, true);\n      document.addEventListener('touchend', onTouchEnd, true);\n\n      return () => {\n        document.removeEventListener('mousedown', onPointerDown, true);\n        document.removeEventListener('mouseup', onMouseUp, true);\n        document.removeEventListener('touchstart', onPointerDown, true);\n        document.removeEventListener('touchend', onTouchEnd, true);\n      };\n    }\n  }, [ref, state, isDisabled]);\n}\n\nfunction isValidEvent(event, ref) {\n  if (event.button > 0) {\n    return false;\n  }\n\n  // if the event target is no longer in the document\n  if (event.target) {\n    const ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) {\n      return false;\n    }\n  }\n\n  return ref.current && !ref.current.contains(event.target);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {createEventHandler} from './createEventHandler';\nimport {HTMLAttributes} from 'react';\nimport {KeyboardEvents} from '@react-types/shared';\n\nexport interface KeyboardProps extends KeyboardEvents {\n  /** Whether the keyboard events should be disabled. */\n  isDisabled?: boolean\n}\n\ninterface KeyboardResult {\n  /** Props to spread onto the target element. */\n  keyboardProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles keyboard interactions for a focusable element.\n */\nexport function useKeyboard(props: KeyboardProps): KeyboardResult {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: createEventHandler(props.onKeyDown),\n      onKeyUp: createEventHandler(props.onKeyUp)\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BaseEvent} from '@react-types/shared';\nimport {SyntheticEvent} from 'react';\n\n/**\n * This function wraps a React event handler to make stopPropagation the default, and support continuePropagation instead.\n */\nexport function createEventHandler<T extends SyntheticEvent>(handler: (e: BaseEvent<T>) => void): (e: T) => void {\n  if (!handler) {\n    return;\n  }\n\n  let shouldStopPropagation = true;\n  return (e: T) => {\n    let event: BaseEvent<T> = {\n      ...e,\n      preventDefault() {\n        e.preventDefault();\n      },\n      isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n      stopPropagation() {\n        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n      },\n      continuePropagation() {\n        shouldStopPropagation = false;\n      }\n    };\n\n    handler(event);\n\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {disableTextSelection, restoreTextSelection}  from './textSelection';\nimport {MoveEvents, PointerType} from '@react-types/shared';\nimport React, {HTMLAttributes, useMemo, useRef} from 'react';\nimport {useGlobalListeners} from '@react-aria/utils';\n\ninterface MoveResult {\n  /** Props to spread on the target element. */\n  moveProps: HTMLAttributes<HTMLElement>\n}\n\ninterface EventBase {\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\n/**\n * Handles move interactions across mouse, touch, and keyboard, including dragging with\n * the mouse or touch, and using the arrow keys. Normalizes behavior across browsers and\n * platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useMove(props: MoveEvents): MoveResult {\n  let {onMoveStart, onMove, onMoveEnd} = props;\n\n  let state = useRef<{\n    didMove: boolean,\n    lastPosition: {pageX: number, pageY: number} | null,\n    id: number | null\n  }>({didMove: false, lastPosition: null, id: null});\n\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let moveProps = useMemo(() => {\n    let moveProps: HTMLAttributes<HTMLElement> = {};\n\n    let start = () => {\n      disableTextSelection();\n      state.current.didMove = false;\n    };\n    let move = (originalEvent: EventBase, pointerType: PointerType, deltaX: number, deltaY: number) => {\n      if (deltaX === 0 && deltaY === 0) {\n        return;\n      }\n\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart?.({\n          type: 'movestart',\n          pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n      onMove({\n        type: 'move',\n        pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    let end = (originalEvent: EventBase, pointerType: PointerType) => {\n      restoreTextSelection();\n      if (state.current.didMove) {\n        onMoveEnd?.({\n          type: 'moveend',\n          pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    if (typeof PointerEvent === 'undefined') {\n      let onMouseMove = (e: MouseEvent) => {\n        if (e.button === 0) {\n          move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n      let onMouseUp = (e: MouseEvent) => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = (e: React.MouseEvent) => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          let {pageX, pageY} = e.changedTouches[touch];\n          move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX, pageY};\n        }\n      };\n      let onTouchEnd = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = (e: React.TouchEvent) => {\n        if (e.changedTouches.length === 0 || state.current.id != null) {\n          return;\n        }\n\n        let {pageX, pageY, identifier} = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {pageX, pageY};\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n\n          // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n\n      moveProps.onPointerDown = (e: React.PointerEvent) => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n\n    let triggerKeyboardMove = (e: EventBase, deltaX: number, deltaY: number) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n\n    moveProps.onKeyDown = (e) => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n\n  return {moveProps};\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RefObject, useCallback} from 'react';\nimport {ScrollEvents} from '@react-types/shared';\nimport {useEvent} from '@react-aria/utils';\n\nexport interface ScrollWheelProps extends ScrollEvents {\n  /** Whether the scroll listener should be disabled. */\n  isDisabled?: boolean\n}\n\n// scroll wheel needs to be added not passively so it's cancelable, small helper hook to remember that\nexport function useScrollWheel(props: ScrollWheelProps, ref: RefObject<HTMLElement>): void {\n  let {onScroll, isDisabled} = props;\n  let onScrollHandler = useCallback((e) => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) {\n      return;\n    }\n\n    // stop scrolling the page\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (onScroll) {\n      onScroll({deltaX: e.deltaX, deltaY: e.deltaY});\n    }\n  }, [onScroll]);\n\n  useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, useRef} from 'react';\nimport {LongPressEvent} from '@react-types/shared';\nimport {mergeProps, useDescription, useGlobalListeners} from '@react-aria/utils';\nimport {usePress} from './usePress';\n\ninterface LongPressProps {\n  /** Whether long press events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when a long press interaction starts. */\n  onLongPressStart?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when a long press interaction ends, either\n   * over the target or when the pointer leaves the target.\n   */\n  onLongPressEnd?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when the threshold time is met while\n   * the press is over the target.\n   */\n  onLongPress?: (e: LongPressEvent) => void,\n  /**\n   * The amount of time in milliseconds to wait before triggering a long press.\n   * @default 500ms\n   */\n  threshold?: number,\n  /**\n   * A description for assistive techology users indicating that a long press\n   * action is available, e.g. \"Long press to open menu\".\n   */\n  accessibilityDescription?: string\n}\n\ninterface LongPressResult {\n  /** Props to spread on the target element. */\n  longPressProps: HTMLAttributes<HTMLElement>\n}\n\nconst DEFAULT_THRESHOLD = 500;\n\n/**\n * Handles long press interactions across mouse and touch devices. Supports a customizable time threshold,\n * accessibility description, and normalizes behavior across browsers and devices.\n */\nexport function useLongPress(props: LongPressProps): LongPressResult {\n  let {\n    isDisabled,\n    onLongPressStart,\n    onLongPressEnd,\n    onLongPress,\n    threshold = DEFAULT_THRESHOLD,\n    accessibilityDescription\n  } = props;\n\n  const timeRef = useRef(null);\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let {pressProps} = usePress({\n    isDisabled,\n    onPressStart(e) {\n      if (e.pointerType === 'mouse' || e.pointerType === 'touch') {\n        if (onLongPressStart) {\n          onLongPressStart({\n            ...e,\n            type: 'longpressstart'\n          });\n        }\n\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e.target.dispatchEvent(new PointerEvent('pointercancel', {bubbles: true}));\n          if (onLongPress) {\n            onLongPress({\n              ...e,\n              type: 'longpress'\n            });\n          }\n          timeRef.current = null;\n        }, threshold);\n\n        // Prevent context menu, which may be opened on long press on touch devices\n        if (e.pointerType === 'touch') {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n\n          addGlobalListener(e.target, 'contextmenu', onContextMenu, {once: true});\n          addGlobalListener(window, 'pointerup', () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e.target, 'contextmenu', onContextMenu);\n            }, 30);\n          }, {once: true});\n        }\n      }\n    },\n    onPressEnd(e) {\n      if (timeRef.current) {\n        clearTimeout(timeRef.current);\n      }\n\n      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) {\n        onLongPressEnd({\n          ...e,\n          type: 'longpressend'\n        });\n      }\n    }\n  });\n\n  let descriptionProps = useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);\n\n  return {\n    longPressProps: mergeProps(pressProps, descriptionProps)\n  };\n}\n"]},"metadata":{},"sourceType":"script"}