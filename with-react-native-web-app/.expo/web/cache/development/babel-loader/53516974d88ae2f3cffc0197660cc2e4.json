{"ast":null,"code":"import _slicedToArray from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport Keyboard from \"react-native-web/dist/cjs/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/cjs/exports/Platform\";\nexport var useKeyboardBottomInset = function useKeyboardBottomInset() {\n  _s();\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      bottom = _React$useState2[0],\n      setBottom = _React$useState2[1];\n\n  var subscriptions = React.useRef([]);\n  React.useEffect(function () {\n    function onKeyboardChange(e) {\n      if (e.startCoordinates && e.endCoordinates.screenY <= e.startCoordinates.screenY) setBottom(e.endCoordinates.height / 2);else setBottom(0);\n    }\n\n    if (Platform.OS === 'ios') {\n      subscriptions.current = [Keyboard.addListener('keyboardWillChangeFrame', onKeyboardChange)];\n    } else {\n      subscriptions.current = [Keyboard.addListener('keyboardDidHide', onKeyboardChange), Keyboard.addListener('keyboardDidShow', onKeyboardChange)];\n    }\n\n    return function () {\n      subscriptions.current.forEach(function (subscription) {\n        subscription.remove();\n      });\n    };\n  }, [setBottom, subscriptions]);\n  return bottom;\n};\n\n_s(useKeyboardBottomInset, \"s9B7TcVJeBf+EetQ4OpQAEGca5s=\");\n\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/utils/useKeyboardBottomInset.ts"],"names":["useKeyboardBottomInset","bottom","setBottom","React","subscriptions","e","Platform","Keyboard","subscription"],"mappings":";;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAGA,OAAO,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;EAAA,EAAA;;EAC1C,IAAA,eAAA,GAA4BG,KAAK,CAALA,QAAAA,CAA5B,CAA4BA,CAA5B;EAAA,IAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;EAAA,IAAOF,MAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;EAAA,IAAeC,SAAf,GAAA,gBAAA,CAAA,CAAA,CAAA;;EACA,IAAME,aAAa,GAAGD,KAAK,CAALA,MAAAA,CAAtB,EAAsBA,CAAtB;EAEAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,SAAA,gBAAA,CAAA,CAAA,EAA4C;MAC1C,IACEE,CAAC,CAADA,gBAAAA,IACAA,CAAC,CAADA,cAAAA,CAAAA,OAAAA,IAA4BA,CAAC,CAADA,gBAAAA,CAF9B,OAAA,EAIEH,SAAS,CAACG,CAAC,CAADA,cAAAA,CAAAA,MAAAA,GAJZ,CAIW,CAATH,CAJF,KAKKA,SAAS,CAATA,CAAS,CAATA;IACN;;IAED,IAAII,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;MACzBF,aAAa,CAAbA,OAAAA,GAAwB,CACtBG,QAAQ,CAARA,WAAAA,CAAAA,yBAAAA,EADFH,gBACEG,CADsB,CAAxBH;IADF,CAAA,MAIO;MACLA,aAAa,CAAbA,OAAAA,GAAwB,CACtBG,QAAQ,CAARA,WAAAA,CAAAA,iBAAAA,EADsB,gBACtBA,CADsB,EAEtBA,QAAQ,CAARA,WAAAA,CAAAA,iBAAAA,EAFFH,gBAEEG,CAFsB,CAAxBH;IAID;;IACD,OAAO,YAAM;MACXA,aAAa,CAAbA,OAAAA,CAAAA,OAAAA,CAA8B,UAAA,YAAA,EAAkB;QAC9CI,YAAY,CAAZA,MAAAA;MADFJ,CAAAA;IADF,CAAA;EApBFD,CAAAA,EAyBG,CAAA,SAAA,EAzBHA,aAyBG,CAzBHA;EA2BA,OAAA,MAAA;AA/BK,CAAA;;GAAMH,sB","sourcesContent":["import * as React from 'react';\nimport { Keyboard, Platform, KeyboardEvent } from 'react-native';\n\nexport const useKeyboardBottomInset = () => {\n  const [bottom, setBottom] = React.useState(0);\n  const subscriptions = React.useRef<any[]>([]);\n\n  React.useEffect(() => {\n    function onKeyboardChange(e: KeyboardEvent) {\n      if (\n        e.startCoordinates &&\n        e.endCoordinates.screenY <= e.startCoordinates.screenY\n      )\n        setBottom(e.endCoordinates.height / 2);\n      else setBottom(0);\n    }\n\n    if (Platform.OS === 'ios') {\n      subscriptions.current = [\n        Keyboard.addListener('keyboardWillChangeFrame', onKeyboardChange),\n      ];\n    } else {\n      subscriptions.current = [\n        Keyboard.addListener('keyboardDidHide', onKeyboardChange),\n        Keyboard.addListener('keyboardDidShow', onKeyboardChange),\n      ];\n    }\n    return () => {\n      subscriptions.current.forEach((subscription) => {\n        subscription.remove();\n      });\n    };\n  }, [setBottom, subscriptions]);\n\n  return bottom;\n};\n"]},"metadata":{},"sourceType":"module"}