{"ast":null,"code":"import _slicedToArray from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport Dimensions from \"react-native-web/dist/cjs/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/cjs/exports/StyleSheet\";\nimport React from 'react';\nexport var getResponsiveStylesImpl = function getResponsiveStylesImpl(width) {\n  return function (queries) {\n    if (typeof width === 'number') {\n      var styles = queries.initial ? [StyleSheet.create({\n        initial: StyleSheet.flatten(queries.initial)\n      }).initial] : [];\n\n      if (queries.query) {\n        queries.query.forEach(function (queryRule) {\n          if (queryRule.style) {\n            var flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n\n            if (typeof queryRule.maxWidth === 'number' && typeof queryRule.minWidth === 'number') {\n              if (width >= queryRule.minWidth && width <= queryRule.maxWidth) {\n                styles.push(StyleSheet.create({\n                  rangeStyle: flattenQueryStyle\n                }).rangeStyle);\n              }\n            } else if (typeof queryRule.minWidth === 'number') {\n              if (width >= queryRule.minWidth) {\n                styles.push(StyleSheet.create({\n                  minWidthStyle: flattenQueryStyle\n                }).minWidthStyle);\n              }\n            } else if (typeof queryRule.maxWidth === 'number') {\n              if (width <= queryRule.maxWidth) {\n                styles.push(StyleSheet.create({\n                  maxWidthStyle: flattenQueryStyle\n                }).maxWidthStyle);\n              }\n            }\n          }\n        });\n        return {\n          styles: styles\n        };\n      }\n    }\n\n    return {};\n  };\n}; // The below implementation is taken from React Native's source and added a flag to conditionally attach/remove listeners\n\nexport var useDimensionsWithEnable = function useDimensionsWithEnable(_ref) {\n  _s();\n\n  var enable = _ref.enable;\n\n  var _React$useState = React.useState(function () {\n    return Dimensions.get('window');\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dimensions = _React$useState2[0],\n      setDimensions = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (enable) {\n      var handleChange = function handleChange(_ref2) {\n        var window = _ref2.window;\n\n        if (dimensions.width !== window.width || dimensions.height !== window.height || dimensions.scale !== window.scale || dimensions.fontScale !== window.fontScale) {\n          setDimensions(window);\n        }\n      };\n\n      Dimensions.addEventListener('change', handleChange); // We might have missed an update between calling `get` in render and\n      // `addEventListener` in this handler, so we set it here. If there was\n      // no change, React will filter out this update as a no-op.\n\n      handleChange({\n        window: Dimensions.get('window')\n      });\n      return function () {\n        Dimensions.removeEventListener('change', handleChange);\n      };\n    }\n\n    return function () {};\n  }, [dimensions, enable]);\n  return dimensions;\n};\n\n_s(useDimensionsWithEnable, \"DVtLGvUSPsK3kjde05SOnJlu4S0=\");\n\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/utils/useResponsiveQuery/common.ts"],"names":["getResponsiveStylesImpl","styles","initial","StyleSheet","queries","queryRule","flattenQueryStyle","width","rangeStyle","minWidthStyle","maxWidthStyle","useDimensionsWithEnable","enable","dimensions","setDimensions","Dimensions","React","handleChange","window"],"mappings":"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","sourcesContent":["import type {\n  GetResponsiveStylesParams,\n  GetResponsiveStylesReturnType,\n} from './types';\nimport { Dimensions, ScaledSize, StyleSheet } from 'react-native';\nimport React from 'react';\n\nexport const getResponsiveStylesImpl = (width: number) => (\n  queries: GetResponsiveStylesParams\n): GetResponsiveStylesReturnType => {\n  if (typeof width === 'number') {\n    let styles = queries.initial\n      ? [\n          StyleSheet.create({ initial: StyleSheet.flatten(queries.initial) })\n            .initial,\n        ]\n      : [];\n\n    if (queries.query) {\n      queries.query.forEach((queryRule) => {\n        if (queryRule.style) {\n          const flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n\n          if (\n            typeof queryRule.maxWidth === 'number' &&\n            typeof queryRule.minWidth === 'number'\n          ) {\n            if (width >= queryRule.minWidth && width <= queryRule.maxWidth) {\n              styles.push(\n                StyleSheet.create({ rangeStyle: flattenQueryStyle }).rangeStyle\n              );\n            }\n          } else if (typeof queryRule.minWidth === 'number') {\n            if (width >= queryRule.minWidth) {\n              styles.push(\n                StyleSheet.create({ minWidthStyle: flattenQueryStyle })\n                  .minWidthStyle\n              );\n            }\n          } else if (typeof queryRule.maxWidth === 'number') {\n            if (width <= queryRule.maxWidth) {\n              styles.push(\n                StyleSheet.create({ maxWidthStyle: flattenQueryStyle })\n                  .maxWidthStyle\n              );\n            }\n          }\n        }\n      });\n      return { styles };\n    }\n  }\n\n  return {};\n};\n\n// The below implementation is taken from React Native's source and added a flag to conditionally attach/remove listeners\nexport const useDimensionsWithEnable = ({ enable }: { enable?: boolean }) => {\n  const [dimensions, setDimensions] = React.useState(() =>\n    Dimensions.get('window')\n  );\n\n  React.useEffect(() => {\n    if (enable) {\n      function handleChange({ window }: { window: ScaledSize }) {\n        if (\n          dimensions.width !== window.width ||\n          dimensions.height !== window.height ||\n          dimensions.scale !== window.scale ||\n          dimensions.fontScale !== window.fontScale\n        ) {\n          setDimensions(window);\n        }\n      }\n      Dimensions.addEventListener('change', handleChange);\n      // We might have missed an update between calling `get` in render and\n      // `addEventListener` in this handler, so we set it here. If there was\n      // no change, React will filter out this update as a no-op.\n      handleChange({ window: Dimensions.get('window') });\n\n      return () => {\n        Dimensions.removeEventListener('change', handleChange);\n      };\n    }\n    return () => {};\n  }, [dimensions, enable]);\n  return dimensions;\n};\n"]},"metadata":{},"sourceType":"module"}