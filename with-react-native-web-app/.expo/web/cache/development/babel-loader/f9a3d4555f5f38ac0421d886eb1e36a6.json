{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport useWindowDimensions from \"react-native-web/dist/cjs/exports/useWindowDimensions\";\nimport { getClosestBreakpoint, hasValidBreakpointFormat, findLastValidBreakpoint } from '../theme/tools';\nimport { useTheme } from './../hooks/useTheme';\nexport function useBreakpointValue(values) {\n  _s();\n\n  var _useWindowDimensions;\n\n  var windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width;\n  var theme = useTheme();\n\n  if (hasValidBreakpointFormat(values, theme.breakpoints)) {\n    var currentBreakpoint = getClosestBreakpoint(theme.breakpoints, windowWidth);\n    return findLastValidBreakpoint(values, theme.breakpoints, currentBreakpoint);\n  } else {\n    return values;\n  }\n}\n\n_s(useBreakpointValue, \"RBaeiZNWQpZdtGaPRzSi03Cm9Cc=\", false, function () {\n  return [useWindowDimensions, useTheme];\n});\n\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/hooks/useBreakpointValue.ts"],"names":["useBreakpointValue","windowWidth","useWindowDimensions","theme","useTheme","hasValidBreakpointFormat","currentBreakpoint","getClosestBreakpoint","findLastValidBreakpoint"],"mappings":";;;AACA,SAAA,oBAAA,EAAA,wBAAA,EAAA,uBAAA,QAAA,gBAAA;AAKA,SAAA,QAAA,QAAA,qBAAA;AAOA,OAAO,SAAA,kBAAA,CAAA,MAAA,EAA6D;EAAA,EAAA;;EAAA,IAAA,oBAAA;;EAClE,IAAIC,WAAW,GAAA,CAAA,oBAAA,GAAGC,mBAAH,EAAA,MAAA,IAAA,IAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,oBAAAA,CAAlB,KAAA;EACA,IAAMC,KAAK,GAAGC,QAAd,EAAA;;EAEA,IAAIC,wBAAwB,CAAA,MAAA,EAASF,KAAK,CAA1C,WAA4B,CAA5B,EAAyD;IACvD,IAAIG,iBAAiB,GAAGC,oBAAoB,CAC1CJ,KAAK,CADqC,WAAA,EAA5C,WAA4C,CAA5C;IAIA,OAAOK,uBAAuB,CAAA,MAAA,EAE5BL,KAAK,CAFuB,WAAA,EAA9B,iBAA8B,CAA9B;EALF,CAAA,MAUO;IACL,OAAA,MAAA;EACD;AACF;;GAjBeH,kB;UACIE,mB,EACJE,Q","sourcesContent":["import { useWindowDimensions } from 'react-native';\nimport {\n  getClosestBreakpoint,\n  hasValidBreakpointFormat,\n  findLastValidBreakpoint,\n} from '../theme/tools';\nimport { useTheme } from './../hooks/useTheme';\nimport type { ITheme } from '../theme/index';\n\ntype UseBreakpointValueParam =\n  | { [key in keyof ITheme['breakpoints']]?: any }\n  | Array<any>;\n\nexport function useBreakpointValue(values: UseBreakpointValueParam) {\n  let windowWidth = useWindowDimensions()?.width;\n  const theme = useTheme();\n\n  if (hasValidBreakpointFormat(values, theme.breakpoints)) {\n    let currentBreakpoint = getClosestBreakpoint(\n      theme.breakpoints,\n      windowWidth\n    );\n    return findLastValidBreakpoint(\n      values,\n      theme.breakpoints,\n      currentBreakpoint\n    );\n  } else {\n    return values;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}