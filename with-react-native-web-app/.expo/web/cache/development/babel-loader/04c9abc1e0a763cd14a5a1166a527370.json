{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _slicedToArray = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useColorModeValue = useColorModeValue;\nexports.useModeManager = useModeManager;\nexports.useAccessibleColors = useAccessibleColors;\nexports.useColorMode = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _Context = require(\"./../hybrid-overlay/Context\");\n\nvar _reactNative = require(\"react-native-web/dist/cjs/index\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nvar useColorMode = function useColorMode() {\n  var _react$default$useCon = _react[\"default\"].useContext(_Context.HybridContext),\n      colorModeContext = _react$default$useCon.colorMode;\n\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n\n  return colorModeContext;\n};\n\nexports.useColorMode = useColorMode;\n\nfunction useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return colorMode === 'dark' ? dark : light;\n}\n\nfunction useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  var systemColorMode = (0, _reactNative.useColorScheme)();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  var _ref = (0, _react.useState)(initialColorMode),\n      _ref2 = _slicedToArray(_ref, 2),\n      colorMode = _ref2[0],\n      setRawMode = _ref2[1];\n\n  var setColorMode = _react[\"default\"].useCallback( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(val) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!colorModeManager) {\n                _context.next = 3;\n                break;\n              }\n\n              _context.next = 3;\n              return colorModeManager.set(val);\n\n            case 3:\n              setRawMode(val);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), [colorModeManager]); // For initial setting initial color mode from storage\n\n\n  (0, _react.useEffect)(function () {\n    if (colorModeManager) {\n      (function () {\n        var _getMode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          var value;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return colorModeManager.get(initialColorMode);\n\n                case 2:\n                  value = _context2.sent;\n\n                  if (value && value !== colorMode) {\n                    setRawMode(value);\n                  }\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        function getMode() {\n          return _getMode.apply(this, arguments);\n        }\n\n        return getMode;\n      })()();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]); // Set system color mode only when user has not passed a colorModeManager\n\n  (0, _react.useEffect)(function () {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  };\n}\n\nfunction useAccessibleColors() {\n  var _react$default$useCon2 = _react[\"default\"].useContext(_Context.HybridContext),\n      colorModeContext = _react$default$useCon2.colorMode;\n\n  var toggleAccessibleColors = function toggleAccessibleColors() {\n    return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  };\n\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/commonjs/core/color-mode/hooks.js"],"names":["Object","value","exports","_react","_interopRequireWildcard","require","_Context","cache","_getRequireWildcardCache","obj","default","newObj","hasPropertyDescriptor","desc","useColorMode","colorMode","colorModeContext","systemColorMode","_reactNative","initialColorMode","setColorMode","colorModeManager","setRawMode","toggleAccessibleColors"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useColorModeValue = useColorModeValue;\nexports.useModeManager = useModeManager;\nexports.useAccessibleColors = useAccessibleColors;\nexports.useColorMode = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _Context = require(\"./../hybrid-overlay/Context\");\n\nvar _reactNative = require(\"react-native\");\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nconst useColorMode = () => {\n  const {\n    colorMode: colorModeContext\n  } = _react.default.useContext(_Context.HybridContext);\n\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n\n  return colorModeContext;\n};\n\nexports.useColorMode = useColorMode;\n\nfunction useColorModeValue(light, dark) {\n  const {\n    colorMode\n  } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nfunction useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  const systemColorMode = (0, _reactNative.useColorScheme)();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = (0, _react.useState)(initialColorMode);\n\n  const setColorMode = _react.default.useCallback(async val => {\n    if (colorModeManager) {\n      await colorModeManager.set(val);\n    }\n\n    setRawMode(val);\n  }, [colorModeManager]); // For initial setting initial color mode from storage\n\n\n  (0, _react.useEffect)(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]); // Set system color mode only when user has not passed a colorModeManager\n\n  (0, _react.useEffect)(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode,\n    setColorMode\n  };\n}\n\nfunction useAccessibleColors() {\n  const {\n    colorMode: colorModeContext\n  } = _react.default.useContext(_Context.HybridContext);\n\n  const toggleAccessibleColors = () => colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}\n//# sourceMappingURL=hooks.js.map"]},"metadata":{},"sourceType":"script"}