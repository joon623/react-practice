{"ast":null,"code":"var _defineProperty = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar $eFCLV$reactariautils = require(\"@react-aria/utils\");\n\nvar $eFCLV$reactariainteractions = require(\"@react-aria/interactions\");\n\nvar $eFCLV$reactarialabel = require(\"@react-aria/label\");\n\nvar $eFCLV$reactariaselection = require(\"@react-aria/selection\");\n\nvar $eFCLV$reactstatelycollections = require(\"@react-stately/collections\");\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      }\n    });\n  });\n  return dest;\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $a3ce5bb3074610af$exports = {};\n$parcel$export($a3ce5bb3074610af$exports, \"useListBox\", function () {\n  return $a3ce5bb3074610af$export$50eacbbf140a3141;\n});\nvar $87beb89ab4a308fd$exports = {};\n$parcel$export($87beb89ab4a308fd$exports, \"listData\", function () {\n  return $87beb89ab4a308fd$export$3585ede4d035bf14;\n});\n$parcel$export($87beb89ab4a308fd$exports, \"getItemId\", function () {\n  return $87beb89ab4a308fd$export$9145995848b05025;\n});\nvar $87beb89ab4a308fd$export$3585ede4d035bf14 = new WeakMap();\n\nfunction $87beb89ab4a308fd$var$normalizeKey(key) {\n  if (typeof key === 'string') return key.replace(/\\s*/g, '');\n  return '' + key;\n}\n\nfunction $87beb89ab4a308fd$export$9145995848b05025(state, itemKey) {\n  var data = $87beb89ab4a308fd$export$3585ede4d035bf14.get(state);\n  if (!data) throw new Error('Unknown list');\n  return \"\".concat(data.id, \"-option-\").concat($87beb89ab4a308fd$var$normalizeKey(itemKey));\n}\n\nfunction $a3ce5bb3074610af$export$50eacbbf140a3141(props, state, ref) {\n  var domProps = $eFCLV$reactariautils.filterDOMProps(props, {\n    labelable: true\n  });\n\n  var _$eFCLV$reactariasele = $eFCLV$reactariaselection.useSelectableList(_objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  })),\n      listProps = _$eFCLV$reactariasele.listProps;\n\n  var _$eFCLV$reactariainte = $eFCLV$reactariainteractions.useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  }),\n      focusWithinProps = _$eFCLV$reactariainte.focusWithinProps; // Share list id and some props with child options.\n\n\n  var id = $eFCLV$reactariautils.useId(props.id);\n  $87beb89ab4a308fd$export$3585ede4d035bf14.set(state, {\n    id: id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized\n  });\n\n  var _$eFCLV$reactarialabe = $eFCLV$reactarialabel.useLabel(_objectSpread(_objectSpread({}, props), {}, {\n    id: id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  })),\n      labelProps = _$eFCLV$reactarialabe.labelProps,\n      fieldProps = _$eFCLV$reactarialabe.fieldProps;\n\n  return {\n    labelProps: labelProps,\n    listBoxProps: $eFCLV$reactariautils.mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, _objectSpread({\n      role: 'listbox'\n    }, $eFCLV$reactariautils.mergeProps(fieldProps, listProps)))\n  };\n}\n\nvar $c164f9f79f4cef2d$exports = {};\n$parcel$export($c164f9f79f4cef2d$exports, \"useOption\", function () {\n  return $c164f9f79f4cef2d$export$497855f14858aa34;\n});\n\nfunction $c164f9f79f4cef2d$export$497855f14858aa34(props, state, ref) {\n  var key = props.key;\n  var data = $87beb89ab4a308fd$export$3585ede4d035bf14.get(state);\n\n  var _isDisabled;\n\n  var isDisabled = (_isDisabled = props.isDisabled) !== null && _isDisabled !== void 0 ? _isDisabled : state.disabledKeys.has(key);\n\n  var _isSelected;\n\n  var isSelected = (_isSelected = props.isSelected) !== null && _isSelected !== void 0 ? _isSelected : state.selectionManager.isSelected(key);\n  var isFocused = state.selectionManager.focusedKey === key;\n\n  var _shouldSelectOnPressUp;\n\n  var shouldSelectOnPressUp = (_shouldSelectOnPressUp = props.shouldSelectOnPressUp) !== null && _shouldSelectOnPressUp !== void 0 ? _shouldSelectOnPressUp : data.shouldSelectOnPressUp;\n\n  var _shouldFocusOnHover;\n\n  var shouldFocusOnHover = (_shouldFocusOnHover = props.shouldFocusOnHover) !== null && _shouldFocusOnHover !== void 0 ? _shouldFocusOnHover : data.shouldFocusOnHover;\n\n  var _shouldUseVirtualFocus;\n\n  var shouldUseVirtualFocus = (_shouldUseVirtualFocus = props.shouldUseVirtualFocus) !== null && _shouldUseVirtualFocus !== void 0 ? _shouldUseVirtualFocus : data.shouldUseVirtualFocus;\n\n  var _isVirtualized;\n\n  var isVirtualized = (_isVirtualized = props.isVirtualized) !== null && _isVirtualized !== void 0 ? _isVirtualized : data.isVirtualized;\n  var labelId = $eFCLV$reactariautils.useSlotId();\n  var descriptionId = $eFCLV$reactariautils.useSlotId();\n  var optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  }; // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n\n  if (!($eFCLV$reactariautils.isMac() && $eFCLV$reactariautils.isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = $eFCLV$reactstatelycollections.getItemCount(state.collection);\n  }\n\n  var _$eFCLV$reactariasele2 = $eFCLV$reactariaselection.useSelectableItem({\n    selectionManager: state.selectionManager,\n    key: key,\n    ref: ref,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    allowsDifferentPressOrigin: shouldSelectOnPressUp,\n    isVirtualized: isVirtualized,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    isDisabled: isDisabled\n  }),\n      itemProps = _$eFCLV$reactariasele2.itemProps,\n      isPressed = _$eFCLV$reactariasele2.isPressed;\n\n  var _$eFCLV$reactariainte2 = $eFCLV$reactariainteractions.useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart: function onHoverStart() {\n      if (!$eFCLV$reactariainteractions.isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  }),\n      hoverProps = _$eFCLV$reactariainte2.hoverProps;\n\n  return {\n    optionProps: _objectSpread(_objectSpread(_objectSpread({}, optionProps), $eFCLV$reactariautils.mergeProps(itemProps, hoverProps)), {}, {\n      id: $87beb89ab4a308fd$export$9145995848b05025(state, key)\n    }),\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused: isFocused,\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    isPressed: isPressed\n  };\n}\n\nvar $f32afd5f225c3320$exports = {};\n$parcel$export($f32afd5f225c3320$exports, \"useListBoxSection\", function () {\n  return $f32afd5f225c3320$export$c3f9f39876e4bc7;\n});\n\nfunction $f32afd5f225c3320$export$c3f9f39876e4bc7(props) {\n  var heading = props.heading,\n      ariaLabel = props['aria-label'];\n  var headingId = $eFCLV$reactariautils.useId();\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n\n$parcel$exportWildcard(module.exports, $a3ce5bb3074610af$exports);\n$parcel$exportWildcard(module.exports, $c164f9f79f4cef2d$exports);\n$parcel$exportWildcard(module.exports, $f32afd5f225c3320$exports);\n$parcel$exportWildcard(module.exports, $87beb89ab4a308fd$exports);","map":{"version":3,"sources":["packages/@react-aria/listbox/src/useListBox.ts","packages/@react-aria/listbox/src/utils.ts","packages/@react-aria/listbox/src/useOption.ts","packages/@react-aria/listbox/src/useListBoxSection.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaListBoxProps} from '@react-types/listbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes, ReactNode, RefObject} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {listData} from './utils';\nimport {ListState} from '@react-stately/list';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useId} from '@react-aria/utils';\nimport {useLabel} from '@react-aria/label';\nimport {useSelectableList} from '@react-aria/selection';\n\ninterface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: HTMLAttributes<HTMLElement>,\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\nexport interface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n\n  /**\n   * Whether the listbox items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n\n  /** Whether options should be focused when the user hovers over them. */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * An optional visual label for the listbox.\n   */\n  label?: ReactNode\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(props: AriaListBoxOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement>): ListBoxAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  // Share list id and some props with child options.\n  let id = useId(props.id);\n  listData.set(state, {\n    id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized\n  });\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  return {\n    labelProps,\n    listBoxProps: mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps)\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {ListState} from '@react-stately/list';\n\ninterface ListData {\n  id: string,\n  shouldSelectOnPressUp?: boolean,\n  shouldFocusOnHover?: boolean,\n  shouldUseVirtualFocus?: boolean,\n  isVirtualized?: boolean\n}\n\nexport const listData = new WeakMap<ListState<unknown>, ListData>();\n\nfunction normalizeKey(key: Key): string {\n  if (typeof key === 'string') {\n    return key.replace(/\\s*/g, '');\n  }\n\n  return '' + key;\n}\n\nexport function getItemId<T>(state: ListState<T>, itemKey: Key): string {\n  let data = listData.get(state);\n\n  if (!data) {\n    throw new Error('Unknown list');\n  }\n\n  return `${data.id}-option-${normalizeKey(itemKey)}`;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {getItemCount} from '@react-stately/collections';\nimport {getItemId, listData} from './utils';\nimport {HTMLAttributes, Key, RefObject} from 'react';\nimport {isFocusVisible, useHover} from '@react-aria/interactions';\nimport {isMac, isWebKit, mergeProps, useSlotId} from '@react-aria/utils';\nimport {ListState} from '@react-stately/list';\nimport {useSelectableItem} from '@react-aria/selection';\n\ninterface OptionAria {\n  /** Props for the option element. */\n  optionProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the main text element inside the option. */\n  labelProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: HTMLAttributes<HTMLElement>,\n\n  /** Whether the option is currently focused. */\n  isFocused: boolean,\n  /** Whether the option is currently selected. */\n  isSelected: boolean,\n  /** Whether the option is currently in a pressed state. */\n  isPressed: boolean,\n  /** Whether the option is disabled. */\n  isDisabled: boolean\n}\n\ninterface AriaOptionProps {\n  /**\n   * Whether the option is disabled.\n   * @deprecated\n   */\n  isDisabled?: boolean,\n\n  /**\n   * Whether the option is selected.\n   * @deprecated\n   */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string,\n\n  /** The unique key for the option. */\n  key: Key,\n\n  /**\n   * Whether selection should occur on press up instead of press down.\n   * @deprecated\n   */\n  shouldSelectOnPressUp?: boolean,\n\n  /**\n   * Whether the option should be focused when the user hovers over it.\n   * @deprecated\n   */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * Whether the option is contained in a virtual scrolling listbox.\n   * @deprecated\n   */\n  isVirtualized?: boolean,\n\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   * @deprecated\n   */\n  shouldUseVirtualFocus?: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(props: AriaOptionProps, state: ListState<T>, ref: RefObject<HTMLElement>): OptionAria {\n  let {\n    key\n  } = props;\n\n  let data = listData.get(state);\n\n  let isDisabled = props.isDisabled ?? state.disabledKeys.has(key);\n  let isSelected = props.isSelected ?? state.selectionManager.isSelected(key);\n  let isFocused = state.selectionManager.focusedKey === key;\n  let shouldSelectOnPressUp = props.shouldSelectOnPressUp ?? data.shouldSelectOnPressUp;\n  let shouldFocusOnHover = props.shouldFocusOnHover ?? data.shouldFocusOnHover;\n  let shouldUseVirtualFocus = props.shouldUseVirtualFocus ?? data.shouldUseVirtualFocus;\n  let isVirtualized = props.isVirtualized ?? data.isVirtualized;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!(isMac() && isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let {itemProps, isPressed} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    allowsDifferentPressOrigin: shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    isDisabled\n  });\n\n  let {hoverProps} = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  return {\n    optionProps: {\n      ...optionProps,\n      ...mergeProps(itemProps, hoverProps),\n      id: getItemId(state, key)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused,\n    isSelected,\n    isDisabled,\n    isPressed\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, ReactNode} from 'react';\nimport {useId} from '@react-aria/utils';\n\ninterface AriaListBoxSectionProps {\n  /** The heading for the section. */\n  heading?: ReactNode,\n  /** An accessibility label for the section. Required if `heading` is not present. */\n  'aria-label'?: string\n}\n\ninterface ListBoxSectionAria {\n  /** Props for the wrapper list item. */\n  itemProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the heading element, if any. */\n  headingProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the group element. */\n  groupProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a section in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the section.\n */\nexport function useListBoxSection(props: AriaListBoxSectionProps): ListBoxSectionAria {\n  let {heading, 'aria-label': ariaLabel} = props;\n  let headingId = useId();\n\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"script"}