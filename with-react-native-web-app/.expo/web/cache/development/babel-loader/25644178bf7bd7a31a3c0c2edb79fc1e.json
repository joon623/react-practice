{"ast":null,"code":"import _objectWithoutProperties from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _s = $RefreshSig$();\n\nvar _excluded = [\"isDisabled\"],\n    _excluded2 = [\"handleChange\", \"handleChangeWithoutCheck\", \"numberInputStepper\", \"numberInputValue\", \"isControlled\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { Input } from '../../primitives/Input';\nimport { NumberInputContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nvar NumberInputFiled = function NumberInputFiled(_ref, ref) {\n  _s();\n\n  var isDisabled = _ref.isDisabled,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useContext = React.useContext(NumberInputContext),\n      handleChange = _React$useContext.handleChange,\n      handleChangeWithoutCheck = _React$useContext.handleChangeWithoutCheck,\n      numberInputStepper = _React$useContext.numberInputStepper,\n      numberInputValue = _React$useContext.numberInputValue,\n      isControlled = _React$useContext.isControlled,\n      context = _objectWithoutProperties(_React$useContext, _excluded2);\n\n  var changeHandler = function changeHandler(inputValue) {\n    var minusIndex = inputValue.indexOf('-');\n\n    if (minusIndex !== -1 && minusIndex !== 0) {\n      inputValue = inputValue.replace('-', '');\n      inputValue = '-' + inputValue;\n    }\n\n    var value = parseInt(inputValue, 10);\n    if (isControlled) handleChange && handleChange(value);else if (value) handleChangeWithoutCheck && handleChangeWithoutCheck(value);else handleChangeWithoutCheck && handleChangeWithoutCheck(0);\n  };\n\n  var blurHandler = function blurHandler() {\n    if (numberInputValue) handleChange && handleChange(numberInputValue);\n  }; //TODO: refactor for responsive prop\n\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Input, _extends({\n    p: 0,\n    pl: 2\n  }, context, props, {\n    onBlur: function onBlur() {\n      return blurHandler();\n    },\n    isDisabled: isDisabled || context.isDisabled,\n    onChangeText: function onChangeText(inputValue) {\n      return changeHandler(inputValue);\n    },\n    keyboardType: \"numeric\",\n    value: \"\".concat(numberInputValue),\n    InputRightElement: numberInputStepper,\n    ref: ref\n  })));\n};\n\n_s(NumberInputFiled, \"vr2iDnQGkGf16zYZDXVa6rLk7a4=\", false, function () {\n  return [useHasResponsiveProps];\n});\n\n_c = NumberInputFiled;\nexport default /*#__PURE__*/_c3 = /*#__PURE__*/React.memo( /*#__PURE__*/_c2 = /*#__PURE__*/React.forwardRef(NumberInputFiled));\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"NumberInputFiled\");\n$RefreshReg$(_c2, \"%default%$React.memo\");\n$RefreshReg$(_c3, \"%default%\");\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/module/components/composites/NumberInput/NumberInputField.js"],"names":["_extends","Object","i","arguments","source","target","NumberInputFiled","isDisabled","props","handleChange","handleChangeWithoutCheck","numberInputStepper","numberInputValue","isControlled","context","React","changeHandler","minusIndex","inputValue","value","parseInt","blurHandler","useHasResponsiveProps","p","pl","onBlur","onChangeText","keyboardType","InputRightElement","ref"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { Input } from '../../primitives/Input';\nimport { NumberInputContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst NumberInputFiled = ({\n  isDisabled,\n  ...props\n}, ref) => {\n  const {\n    handleChange,\n    handleChangeWithoutCheck,\n    numberInputStepper,\n    numberInputValue,\n    isControlled,\n    ...context\n  } = React.useContext(NumberInputContext);\n\n  const changeHandler = inputValue => {\n    let minusIndex = inputValue.indexOf('-');\n\n    if (minusIndex !== -1 && minusIndex !== 0) {\n      inputValue = inputValue.replace('-', '');\n      inputValue = '-' + inputValue;\n    }\n\n    const value = parseInt(inputValue, 10);\n    if (isControlled) handleChange && handleChange(value);else if (value) handleChangeWithoutCheck && handleChangeWithoutCheck(value);else handleChangeWithoutCheck && handleChangeWithoutCheck(0);\n  };\n\n  const blurHandler = () => {\n    if (numberInputValue) handleChange && handleChange(numberInputValue);\n  }; //TODO: refactor for responsive prop\n\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Input, _extends({\n    p: 0,\n    pl: 2\n  }, context, props, {\n    onBlur: () => blurHandler(),\n    isDisabled: isDisabled || context.isDisabled,\n    onChangeText: inputValue => changeHandler(inputValue),\n    keyboardType: \"numeric\",\n    value: \"\".concat(numberInputValue),\n    InputRightElement: numberInputStepper,\n    ref: ref\n  })));\n};\n\nexport default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(NumberInputFiled));\n//# sourceMappingURL=NumberInputField.js.map"]},"metadata":{},"sourceType":"module"}