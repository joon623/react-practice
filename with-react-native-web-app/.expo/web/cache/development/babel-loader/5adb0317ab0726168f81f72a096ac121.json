{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useResolvedFontFamily = useResolvedFontFamily;\n\nvar _useTheme = require(\"./useTheme\");\n/**\n *\n * @param props\n * @returns resolved fontFamily\n * @description Combination of fontWeight, fontStyle and font family is fully supported on web but on Android we need to pass the exact font family.\n * for e.g. If we load Roboto-Light-Italic.ttf using css, we can use fontFamily: Roboto, fontWeight: 300, fontStyle: italic on web, but same may not work on all the platforms. Other platform needs to set fontFamily: Roboto-Light-Italic in order to work.\n * So this function's purpose is to intake styles like fontFamily: Roboto, fontWeight: 300, fontStyle: Italic and return fontFamily: Roboto-Light-Italic depending upon the fontConfig token in typography theme.\n * This function depends upon fontConfig token in typography for mapping.\n */\n\n\nfunction useResolvedFontFamily(props) {\n  var fontFamily = props.fontFamily,\n      fontStyle = props.fontStyle,\n      fontWeight = props.fontWeight;\n  var newFontFamily = fontFamily;\n  var newFontStyle = fontStyle;\n  var newFontWeight = fontWeight;\n\n  var _ref = (0, _useTheme.useTheme)(),\n      fontConfig = _ref.fontConfig,\n      fontWeights = _ref.fontWeights,\n      fonts = _ref.fonts;\n\n  if (fontWeight && fontStyle && fontFamily && fontFamily in fonts) {\n    // TODO: Fix typing remove any.\n    var fontToken = fonts[fontFamily];\n\n    if (fontConfig && fontConfig[fontToken]) {\n      // If a custom font family is resolved, set fontWeight and fontStyle to undefined.\n      // https://github.com/GeekyAnts/NativeBase/issues/3811\n      // On Android, If a fontFamily and fontWeight both are passed, it behaves in a weird way and applies system fonts with passed fontWeight. This happens only for some fontWeights e.g. '700' or 'bold'. So, if we find a custom fontFamily, we remove fontWeight and fontStyle\n      //@ts-ignore\n      newFontWeight = undefined; //@ts-ignore\n\n      newFontStyle = undefined;\n      var fontWeightNumber = fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      var fontVariant = fontConfig[fontToken][fontWeightNumber];\n\n      if (typeof fontVariant === 'object') {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle\n  };\n}","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/commonjs/hooks/useResolvedFontFamily.js"],"names":["Object","value","exports","_useTheme","require","fontWeight","newFontFamily","newFontStyle","newFontWeight","fonts","fontFamily","fontToken","fontConfig","fontWeightNumber","fontWeights","fontVariant","fontStyle"],"mappings":"AAAA;;AAEAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7CD;AAGAE,OAAO,CAAPA,qBAAAA,GAAAA,qBAAAA;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAvB,YAAuB,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAA,qBAAA,CAAA,KAAA,EAAsC;EACpC,IAAM,UAAN,GAAA,KAAA,CAAM,UAAN;EAAA,IAAM,SAAN,GAAA,KAAA,CAAM,SAAN;EAAA,IAGEC,UAHF,GAAA,KAAA,CAGEA,UAHF;EAKA,IAAIC,aAAa,GAAjB,UAAA;EACA,IAAIC,YAAY,GAAhB,SAAA;EACA,IAAIC,aAAa,GAAjB,UAAA;;EACA,WAII,CAAC,GAAGL,SAAS,CAJjB,QAII,GAJJ;EAAA,IAAM,UAAN,QAAM,UAAN;EAAA,IAAM,WAAN,QAAM,WAAN;EAAA,IAGEM,KAHF,QAGEA,KAHF;;EAMA,IAAIJ,UAAU,IAAVA,SAAAA,IAAAA,UAAAA,IAAyCK,UAAU,IAAvD,KAAA,EAAkE;IAChE;IACA,IAAMC,SAAS,GAAGF,KAAK,CAAvB,UAAuB,CAAvB;;IAEA,IAAIG,UAAU,IAAIA,UAAU,CAA5B,SAA4B,CAA5B,EAAyC;MACvC;MACA;MACA;MACA;MACAJ,aAAa,GAL0B,SAKvCA,CALuC,CAKZ;;MAE3BD,YAAY,GAAZA,SAAAA;MACA,IAAIM,gBAAgB,GAAGR,UAAU,IAAVA,WAAAA,GAA4BS,WAAW,CAAvCT,UAAuC,CAAvCA,GAAvB,UAAA;MACA,IAAIU,WAAW,GAAGH,UAAU,CAAVA,SAAU,CAAVA,CAAlB,gBAAkBA,CAAlB;;MAEA,IAAI,OAAA,WAAA,KAAJ,QAAA,EAAqC;QACnC,IAAIG,WAAW,CAAf,SAAe,CAAf,EAA4BT,aAAa,GAAGS,WAAW,CAA3BT,SAA2B,CAA3BA;MAD9B,CAAA,MAEO;QACLA,aAAa,GAAbA,WAAAA;MACD;IAfH,CAAA,MAgBO;MACLA,aAAa,GAAGG,KAAK,CAArBH,UAAqB,CAArBA;IACD;EACF;;EAED,OAAO;IACLI,UAAU,EADL,aAAA;IAELL,UAAU,EAFL,aAAA;IAGLW,SAAS,EAAET;EAHN,CAAP;AAKD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useResolvedFontFamily = useResolvedFontFamily;\n\nvar _useTheme = require(\"./useTheme\");\n\n/**\n *\n * @param props\n * @returns resolved fontFamily\n * @description Combination of fontWeight, fontStyle and font family is fully supported on web but on Android we need to pass the exact font family.\n * for e.g. If we load Roboto-Light-Italic.ttf using css, we can use fontFamily: Roboto, fontWeight: 300, fontStyle: italic on web, but same may not work on all the platforms. Other platform needs to set fontFamily: Roboto-Light-Italic in order to work.\n * So this function's purpose is to intake styles like fontFamily: Roboto, fontWeight: 300, fontStyle: Italic and return fontFamily: Roboto-Light-Italic depending upon the fontConfig token in typography theme.\n * This function depends upon fontConfig token in typography for mapping.\n */\nfunction useResolvedFontFamily(props) {\n  const {\n    fontFamily,\n    fontStyle,\n    fontWeight\n  } = props;\n  let newFontFamily = fontFamily;\n  let newFontStyle = fontStyle;\n  let newFontWeight = fontWeight;\n  const {\n    fontConfig,\n    fontWeights,\n    fonts\n  } = (0, _useTheme.useTheme)();\n\n  if (fontWeight && fontStyle && fontFamily && fontFamily in fonts) {\n    // TODO: Fix typing remove any.\n    const fontToken = fonts[fontFamily];\n\n    if (fontConfig && fontConfig[fontToken]) {\n      // If a custom font family is resolved, set fontWeight and fontStyle to undefined.\n      // https://github.com/GeekyAnts/NativeBase/issues/3811\n      // On Android, If a fontFamily and fontWeight both are passed, it behaves in a weird way and applies system fonts with passed fontWeight. This happens only for some fontWeights e.g. '700' or 'bold'. So, if we find a custom fontFamily, we remove fontWeight and fontStyle\n      //@ts-ignore\n      newFontWeight = undefined; //@ts-ignore\n\n      newFontStyle = undefined;\n      let fontWeightNumber = fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      let fontVariant = fontConfig[fontToken][fontWeightNumber];\n\n      if (typeof fontVariant === 'object') {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle\n  };\n}\n//# sourceMappingURL=useResolvedFontFamily.js.map"]},"metadata":{},"sourceType":"script"}