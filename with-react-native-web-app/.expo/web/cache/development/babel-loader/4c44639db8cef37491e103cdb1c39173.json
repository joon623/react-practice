{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useTheme } from './useTheme';\n/**\n *\n * @param props\n * @returns resolved fontFamily\n * @description Combination of fontWeight, fontStyle and font family is fully supported on web but on Android we need to pass the exact font family.\n * for e.g. If we load Roboto-Light-Italic.ttf using css, we can use fontFamily: Roboto, fontWeight: 300, fontStyle: italic on web, but same may not work on all the platforms. Other platform needs to set fontFamily: Roboto-Light-Italic in order to work.\n * So this function's purpose is to intake styles like fontFamily: Roboto, fontWeight: 300, fontStyle: Italic and return fontFamily: Roboto-Light-Italic depending upon the fontConfig token in typography theme.\n * This function depends upon fontConfig token in typography for mapping.\n */\n\nexport function useResolvedFontFamily(props) {\n  _s();\n\n  var fontFamily = props.fontFamily,\n      fontStyle = props.fontStyle,\n      fontWeight = props.fontWeight;\n  var newFontFamily = fontFamily;\n  var newFontStyle = fontStyle;\n  var newFontWeight = fontWeight;\n\n  var _useTheme = useTheme(),\n      fontConfig = _useTheme.fontConfig,\n      fontWeights = _useTheme.fontWeights,\n      fonts = _useTheme.fonts;\n\n  if (fontWeight && fontStyle && fontFamily && fontFamily in fonts) {\n    // TODO: Fix typing remove any.\n    var fontToken = fonts[fontFamily];\n\n    if (fontConfig && fontConfig[fontToken]) {\n      // If a custom font family is resolved, set fontWeight and fontStyle to undefined.\n      // https://github.com/GeekyAnts/NativeBase/issues/3811\n      // On Android, If a fontFamily and fontWeight both are passed, it behaves in a weird way and applies system fonts with passed fontWeight. This happens only for some fontWeights e.g. '700' or 'bold'. So, if we find a custom fontFamily, we remove fontWeight and fontStyle\n      //@ts-ignore\n      newFontWeight = undefined; //@ts-ignore\n\n      newFontStyle = undefined;\n      var fontWeightNumber = fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      var fontVariant = fontConfig[fontToken][fontWeightNumber];\n\n      if (typeof fontVariant === 'object') {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle\n  };\n}\n\n_s(useResolvedFontFamily, \"BQjH4/CYkW8sjrWkxYjZJwUripk=\", false, function () {\n  return [useTheme];\n});\n\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/hooks/useResolvedFontFamily.ts"],"names":["useResolvedFontFamily","fontFamily","fontStyle","fontWeight","props","newFontFamily","newFontStyle","newFontWeight","fontConfig","fontWeights","fonts","useTheme","fontToken","fontWeightNumber","fontVariant"],"mappings":";;AAAA,SAAA,QAAA,QAAA,YAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,qBAAA,CAAA,KAAA,EAIJ;EAAA,EAAA;;EACD,IAAQC,UAAR,GAA8CG,KAA9C,CAAA,UAAA;EAAA,IAAoBF,SAApB,GAA8CE,KAA9C,CAAA,SAAA;EAAA,IAA+BD,UAA/B,GAA8CC,KAA9C,CAAA,UAAA;EACA,IAAIC,aAAa,GAAjB,UAAA;EACA,IAAIC,YAAY,GAAhB,SAAA;EACA,IAAIC,aAAa,GAAjB,UAAA;;EAEA,IAAA,SAAA,GAA2CI,QAA3C,EAAA;EAAA,IAAQH,UAAR,GAAA,SAAA,CAAA,UAAA;EAAA,IAAoBC,WAApB,GAAA,SAAA,CAAA,WAAA;EAAA,IAAiCC,KAAjC,GAAA,SAAA,CAAA,KAAA;;EACA,IAAIP,UAAU,IAAVA,SAAAA,IAAAA,UAAAA,IAAyCF,UAAU,IAAvD,KAAA,EAAkE;IAChE;IACA,IAAMW,SAAc,GAAGF,KAAK,CAA5B,UAA4B,CAA5B;;IACA,IAAIF,UAAU,IAAIA,UAAU,CAA5B,SAA4B,CAA5B,EAAyC;MACvC;MACA;MACA;MACA;MACAD,aAAa,GAL0B,SAKvCA,CALuC,CAMvC;;MACAD,YAAY,GAAZA,SAAAA;MAEA,IAAIO,gBAAgB,GAClBV,UAAU,IAAVA,WAAAA,GAA4BM,WAAW,CAAvCN,UAAuC,CAAvCA,GADF,UAAA;MAEA,IAAIW,WAAW,GAAGN,UAAU,CAAVA,SAAU,CAAVA,CAAlB,gBAAkBA,CAAlB;;MAEA,IAAI,OAAA,WAAA,KAAJ,QAAA,EAAqC;QACnC,IAAIM,WAAW,CAAf,SAAe,CAAf,EAA4BT,aAAa,GAAGS,WAAW,CAA3BT,SAA2B,CAA3BA;MAD9B,CAAA,MAEO;QACLA,aAAa,GAAbA,WAAAA;MACD;IAjBH,CAAA,MAkBO;MACLA,aAAa,GAAGK,KAAK,CAArBL,UAAqB,CAArBA;IACD;EACF;;EAED,OAAO;IACLJ,UAAU,EADL,aAAA;IAELE,UAAU,EAFL,aAAA;IAGLD,SAAS,EAAEI;EAHN,CAAP;AAKD;;GA1CeN,qB;UAU6BW,Q","sourcesContent":["import { useTheme } from './useTheme';\nimport type { ITheme } from '../theme';\n/**\n *\n * @param props\n * @returns resolved fontFamily\n * @description Combination of fontWeight, fontStyle and font family is fully supported on web but on Android we need to pass the exact font family.\n * for e.g. If we load Roboto-Light-Italic.ttf using css, we can use fontFamily: Roboto, fontWeight: 300, fontStyle: italic on web, but same may not work on all the platforms. Other platform needs to set fontFamily: Roboto-Light-Italic in order to work.\n * So this function's purpose is to intake styles like fontFamily: Roboto, fontWeight: 300, fontStyle: Italic and return fontFamily: Roboto-Light-Italic depending upon the fontConfig token in typography theme.\n * This function depends upon fontConfig token in typography for mapping.\n */\nexport function useResolvedFontFamily(props: {\n  fontFamily?: keyof ITheme['fonts'];\n  fontStyle?: string;\n  fontWeight?: keyof ITheme['fontWeights'];\n}) {\n  const { fontFamily, fontStyle, fontWeight } = props;\n  let newFontFamily = fontFamily;\n  let newFontStyle = fontStyle;\n  let newFontWeight = fontWeight;\n\n  const { fontConfig, fontWeights, fonts } = useTheme();\n  if (fontWeight && fontStyle && fontFamily && fontFamily in fonts) {\n    // TODO: Fix typing remove any.\n    const fontToken: any = fonts[fontFamily];\n    if (fontConfig && fontConfig[fontToken]) {\n      // If a custom font family is resolved, set fontWeight and fontStyle to undefined.\n      // https://github.com/GeekyAnts/NativeBase/issues/3811\n      // On Android, If a fontFamily and fontWeight both are passed, it behaves in a weird way and applies system fonts with passed fontWeight. This happens only for some fontWeights e.g. '700' or 'bold'. So, if we find a custom fontFamily, we remove fontWeight and fontStyle\n      //@ts-ignore\n      newFontWeight = undefined;\n      //@ts-ignore\n      newFontStyle = undefined;\n\n      let fontWeightNumber =\n        fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      let fontVariant = fontConfig[fontToken][fontWeightNumber];\n\n      if (typeof fontVariant === 'object') {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}