{"ast":null,"code":"import { mode } from '../tools';\nimport Platform from \"react-native-web/dist/cjs/exports/Platform\";\n\nfunction getSelectionColor(props) {\n  if (Platform.OS === 'ios') {\n    return mode('coolGray.800', 'warmGray.50')(props);\n  } else if (Platform.OS === 'android') {\n    return mode('coolGray.800', 'warmGray.50')(props);\n  }\n}\n\nvar baseStyle = function baseStyle(props) {\n  // const { primary } = props.theme.colors;\n  // Todo: Resolve boxShadow Color or Provide some alternatiove prop for user to change focusRing color\n  // // Todo: Update to support similar focusRing on iOS , Android and Web\n  // const focusRing =\n  //   Platform.OS === 'web'\n  //     ? {\n  //         boxShadow:\n  //           props.variant !== 'underlined'\n  //             ? `${primary[400]} 0px 0px 0px 1px`\n  //             : `${primary[400]} 0px 1px 0px 0px`,\n  //         zIndex: 1,\n  //       }\n  //     : {\n  //         // boxShadow: `${useToken('colors', ['primary.400'])} 0px 0px 0px 1px`,\n  //       };\n  return {\n    selectionColor: getSelectionColor(props),\n    fontFamily: 'body',\n    p: '2',\n    borderRadius: 'sm',\n    overflow: 'hidden',\n    color: mode('coolGray.800', 'warmGray.50')(props),\n    placeholderTextColor: 'muted.400',\n    borderColor: mode('muted.200', 'gray.500')(props),\n    _disabled: {\n      opacity: '80',\n      bg: mode('muted.100', 'muted.700')(props),\n      _web: {\n        disabled: true,\n        cursor: 'not-allowed'\n      }\n    },\n    _invalid: {\n      borderColor: mode('danger.600', 'danger.300')(props)\n    },\n    _focus: {\n      borderColor: mode('primary.400', 'primary.500')(props)\n    },\n    _web: {\n      outlineWidth: '0',\n      overflow: 'auto',\n      lineHeight: 'lg',\n      // Todo: Move to _web inside size so that sm and xs don't have this much height\n      outline: 'none',\n      cursor: 'auto'\n    },\n    _stack: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      // justifyContent: 'space-between',\n      overflow: 'hidden'\n    },\n    _input: {\n      bg: 'transparent',\n      flex: 1\n    }\n  };\n};\n\nfunction roundedStyle(props) {\n  return {\n    borderRadius: '25',\n    borderWidth: '1',\n    _hover: {\n      bg: mode('gray.100', 'gray.700')(props)\n    }\n  };\n}\n\nfunction outlineStyle(props) {\n  return {\n    borderWidth: '1',\n    _hover: {\n      bg: mode('gray.100', 'gray.700')(props)\n    }\n  };\n}\n\nfunction filledStyle(props) {\n  return {\n    bg: props.bg || mode('muted.200', 'muted.600')(props),\n    borderWidth: '1',\n    borderColor: 'transparent',\n    _hover: {\n      bg: mode('muted.300', 'muted.700')(props)\n    }\n  };\n}\n\nfunction unstyledStyle() {\n  return {\n    borderWidth: '0'\n  };\n}\n\nfunction underlinedStyle() {\n  return {\n    borderRadius: '0',\n    borderTopWidth: '0',\n    borderLeftWidth: '0',\n    borderRightWidth: '0',\n    borderBottomWidth: '1'\n  };\n}\n\nvar variants = {\n  outline: outlineStyle,\n  underlined: underlinedStyle,\n  rounded: roundedStyle,\n  filled: filledStyle,\n  unstyled: unstyledStyle\n};\nvar sizes = {\n  '2xl': {\n    fontSize: 'xl'\n  },\n  'xl': {\n    fontSize: 'lg'\n  },\n  'lg': {\n    fontSize: 'md'\n  },\n  'md': {\n    fontSize: 'sm'\n  },\n  'sm': {\n    fontSize: 'xs'\n  },\n  'xs': {\n    fontSize: '2xs'\n  }\n};\nvar defaultProps = {\n  size: 'sm',\n  variant: 'outline'\n}; // Input\n\nexport var Input = {\n  baseStyle: baseStyle,\n  defaultProps: defaultProps,\n  variants: variants,\n  sizes: sizes\n};\nexport default {};\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/theme/v33x-theme/components/input.ts"],"names":["Platform","mode","baseStyle","selectionColor","getSelectionColor","fontFamily","p","borderRadius","overflow","color","placeholderTextColor","borderColor","_disabled","opacity","bg","_web","disabled","cursor","_invalid","_focus","outlineWidth","lineHeight","outline","_stack","flexDirection","alignItems","_input","flex","borderWidth","_hover","props","borderTopWidth","borderLeftWidth","borderRightWidth","borderBottomWidth","variants","underlined","rounded","filled","unstyled","unstyledStyle","sizes","fontSize","defaultProps","size","variant","Input"],"mappings":"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","sourcesContent":["import { mode } from '../tools';\nimport { Platform } from 'react-native';\n\nfunction getSelectionColor(props: Record<string, any>) {\n  if (Platform.OS === 'ios') {\n    return mode('coolGray.800', 'warmGray.50')(props);\n  } else if (Platform.OS === 'android') {\n    return mode('coolGray.800', 'warmGray.50')(props);\n  }\n}\n\nconst baseStyle = (props: Record<string, any>) => {\n  // const { primary } = props.theme.colors;\n  // Todo: Resolve boxShadow Color or Provide some alternatiove prop for user to change focusRing color\n  // // Todo: Update to support similar focusRing on iOS , Android and Web\n  // const focusRing =\n  //   Platform.OS === 'web'\n  //     ? {\n  //         boxShadow:\n  //           props.variant !== 'underlined'\n  //             ? `${primary[400]} 0px 0px 0px 1px`\n  //             : `${primary[400]} 0px 1px 0px 0px`,\n  //         zIndex: 1,\n  //       }\n  //     : {\n  //         // boxShadow: `${useToken('colors', ['primary.400'])} 0px 0px 0px 1px`,\n  //       };\n\n  return {\n    selectionColor: getSelectionColor(props),\n    fontFamily: 'body',\n    p: '2',\n    borderRadius: 'sm',\n    overflow: 'hidden',\n    color: mode('coolGray.800', 'warmGray.50')(props),\n    placeholderTextColor: 'muted.400',\n    borderColor: mode('muted.200', 'gray.500')(props),\n    _disabled: {\n      opacity: '80',\n      bg: mode('muted.100', 'muted.700')(props),\n      _web: {\n        disabled: true,\n        cursor: 'not-allowed',\n      },\n    },\n    _invalid: {\n      borderColor: mode('danger.600', 'danger.300')(props),\n    },\n    _focus: {\n      borderColor: mode('primary.400', 'primary.500')(props),\n    },\n    _web: {\n      outlineWidth: '0',\n      overflow: 'auto',\n      lineHeight: 'lg', // Todo: Move to _web inside size so that sm and xs don't have this much height\n      outline: 'none',\n      cursor: 'auto',\n    },\n    _stack: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      // justifyContent: 'space-between',\n      overflow: 'hidden',\n    },\n    _input: {\n      bg: 'transparent',\n      flex: 1,\n    },\n  };\n};\n\nfunction roundedStyle(props: Record<string, any>) {\n  return {\n    borderRadius: '25',\n    borderWidth: '1',\n    _hover: {\n      bg: mode('gray.100', 'gray.700')(props),\n    },\n  };\n}\nfunction outlineStyle(props: Record<string, any>) {\n  return {\n    borderWidth: '1',\n    _hover: {\n      bg: mode('gray.100', 'gray.700')(props),\n    },\n  };\n}\nfunction filledStyle(props: Record<string, any>) {\n  return {\n    bg: props.bg || mode('muted.200', 'muted.600')(props),\n    borderWidth: '1',\n    borderColor: 'transparent',\n    _hover: {\n      bg: mode('muted.300', 'muted.700')(props),\n    },\n  };\n}\nfunction unstyledStyle() {\n  return {\n    borderWidth: '0',\n  };\n}\nfunction underlinedStyle() {\n  return {\n    borderRadius: '0',\n    borderTopWidth: '0',\n    borderLeftWidth: '0',\n    borderRightWidth: '0',\n    borderBottomWidth: '1',\n  };\n}\n\nconst variants = {\n  outline: outlineStyle,\n  underlined: underlinedStyle,\n  rounded: roundedStyle,\n  filled: filledStyle,\n  unstyled: unstyledStyle,\n};\n\nconst sizes = {\n  '2xl': { fontSize: 'xl' },\n  'xl': { fontSize: 'lg' },\n  'lg': { fontSize: 'md' },\n  'md': { fontSize: 'sm' },\n  'sm': { fontSize: 'xs' },\n  'xs': { fontSize: '2xs' },\n};\n\nconst defaultProps = {\n  size: 'sm',\n  variant: 'outline',\n};\n\n// Input\nexport const Input = {\n  baseStyle,\n  defaultProps,\n  variants,\n  sizes,\n};\n\nexport default {};\n"]},"metadata":{},"sourceType":"module"}