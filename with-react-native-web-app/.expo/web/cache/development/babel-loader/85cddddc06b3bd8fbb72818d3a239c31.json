{"ast":null,"code":"import { mode } from './../tools';\nimport Easing from \"react-native-web/dist/cjs/exports/Easing\";\n\nvar baseStyle = function baseStyle(props) {\n  // NOTE: Internal pseudo props like _stack, _overlay nad _presenceTransition can only be update by the theme.\n  return {\n    bg: mode(\"muted.700\", \"muted.600\")(props),\n    p: '2',\n    rounded: 'sm',\n    shadow: 6,\n    // The stack in which toast are being rendered\n    _stack: {\n      margin: 'auto',\n      position: 'absolute',\n      space: 2,\n      alignItems: 'center',\n      justifyContent: 'center',\n      pointerEvents: 'box-none'\n    },\n    _overlay: {},\n    _presenceTransition: {\n      animate: {\n        opacity: 1,\n        transition: {\n          easing: Easing.ease,\n          duration: 250\n        }\n      },\n      exit: {\n        opacity: 0,\n        scale: 0.85,\n        transition: {\n          easing: Easing.ease,\n          duration: 100\n        }\n      }\n    },\n    _title: {\n      color: 'text.50',\n      fontWeight: 700\n    },\n    _description: {\n      color: 'text.50',\n      fontWeight: 400\n    }\n  };\n};\n\nexport var Toast = {\n  baseStyle: baseStyle,\n  defaultProps: {}\n};\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/module/theme/components/toast.js"],"names":["baseStyle","bg","mode","p","rounded","shadow","_stack","margin","position","space","alignItems","justifyContent","pointerEvents","_overlay","_presenceTransition","animate","opacity","transition","easing","Easing","duration","exit","scale","_title","color","fontWeight","_description","Toast","defaultProps"],"mappings":"AAAA,SAAA,IAAA,QAAA,YAAA;;;AAGA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAAA,KAAA,EAAS;EACzB;EACA,OAAO;IACLC,EAAE,EAAEC,IAAI,CAAA,WAAA,EAAJA,WAAI,CAAJA,CADC,KACDA,CADC;IAELC,CAAC,EAFI,GAAA;IAGLC,OAAO,EAHF,IAAA;IAILC,MAAM,EAJD,CAAA;IAKL;IACAC,MAAM,EAAE;MACNC,MAAM,EADA,MAAA;MAENC,QAAQ,EAFF,UAAA;MAGNC,KAAK,EAHC,CAAA;MAINC,UAAU,EAJJ,QAAA;MAKNC,cAAc,EALR,QAAA;MAMNC,aAAa,EAAE;IANT,CANH;IAcLC,QAAQ,EAdH,EAAA;IAeLC,mBAAmB,EAAE;MACnBC,OAAO,EAAE;QACPC,OAAO,EADA,CAAA;QAEPC,UAAU,EAAE;UACVC,MAAM,EAAEC,MAAM,CADJ,IAAA;UAEVC,QAAQ,EAAE;QAFA;MAFL,CADU;MAQnBC,IAAI,EAAE;QACJL,OAAO,EADH,CAAA;QAEJM,KAAK,EAFD,IAAA;QAGJL,UAAU,EAAE;UACVC,MAAM,EAAEC,MAAM,CADJ,IAAA;UAEVC,QAAQ,EAAE;QAFA;MAHR;IARa,CAfhB;IAgCLG,MAAM,EAAE;MACNC,KAAK,EADC,SAAA;MAENC,UAAU,EAAE;IAFN,CAhCH;IAoCLC,YAAY,EAAE;MACZF,KAAK,EADO,SAAA;MAEZC,UAAU,EAAE;IAFA;EApCT,CAAP;AAFF,CAAA;;AA6CA,OAAO,IAAME,KAAK,GAAG;EACnB3B,SAAS,EADU,SAAA;EAEnB4B,YAAY,EAAE;AAFK,CAAd","sourcesContent":["import { mode } from './../tools';\nimport { Easing } from 'react-native';\n\nconst baseStyle = props => {\n  // NOTE: Internal pseudo props like _stack, _overlay nad _presenceTransition can only be update by the theme.\n  return {\n    bg: mode(\"muted.700\", \"muted.600\")(props),\n    p: '2',\n    rounded: 'sm',\n    shadow: 6,\n    // The stack in which toast are being rendered\n    _stack: {\n      margin: 'auto',\n      position: 'absolute',\n      space: 2,\n      alignItems: 'center',\n      justifyContent: 'center',\n      pointerEvents: 'box-none'\n    },\n    _overlay: {},\n    _presenceTransition: {\n      animate: {\n        opacity: 1,\n        transition: {\n          easing: Easing.ease,\n          duration: 250\n        }\n      },\n      exit: {\n        opacity: 0,\n        scale: 0.85,\n        transition: {\n          easing: Easing.ease,\n          duration: 100\n        }\n      }\n    },\n    _title: {\n      color: 'text.50',\n      fontWeight: 700\n    },\n    _description: {\n      color: 'text.50',\n      fontWeight: 400\n    }\n  };\n};\n\nexport const Toast = {\n  baseStyle,\n  defaultProps: {}\n};\n//# sourceMappingURL=toast.js.map"]},"metadata":{},"sourceType":"module"}