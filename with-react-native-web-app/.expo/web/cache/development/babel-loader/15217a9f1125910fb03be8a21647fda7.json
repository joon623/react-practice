{"ast":null,"code":"import _objectWithoutProperties from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _s = $RefreshSig$();\n\nvar _excluded = [\"columns\", \"space\", \"spacingX\", \"spacingY\", \"minChildWidth\", \"children\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { Box, HStack, VStack } from '../../primitives'; // const isDebug = process.env.NODE_ENV !== 'production';\n\nimport { useThemeProps } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nvar DEBUG_STYLES = false ? {\n  rows: {\n    borderWidth: '1px'\n  },\n  cols: {\n    borderWidth: '1px'\n  }\n} : {\n  rows: {},\n  cols: {}\n};\n\nvar SimpleGrid = function SimpleGrid(props, ref) {\n  _s();\n\n  var _useThemeProps = useThemeProps('SimpleGrid', props),\n      columns = _useThemeProps.columns,\n      space = _useThemeProps.space,\n      spacingX = _useThemeProps.spacingX,\n      spacingY = _useThemeProps.spacingY,\n      minChildWidth = _useThemeProps.minChildWidth,\n      children = _useThemeProps.children,\n      remainingProps = _objectWithoutProperties(_useThemeProps, _excluded); //TODO: refactor for responsive prop\n\n\n  if (useHasResponsiveProps(props)) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n\n  var cellSpacing = space !== null && space !== void 0 ? space : 0;\n  var cellSpacingX = spacingX !== null && spacingX !== void 0 ? spacingX : cellSpacing;\n  var cellSpacingY = spacingY !== null && spacingY !== void 0 ? spacingY : cellSpacing;\n  var childrenArray = React.Children.toArray(children);\n\n  if (columns) {\n    var rowSlices = [];\n\n    for (var i = 0; i < childrenArray.length; i = i + columns) {\n      rowSlices.push(childrenArray.slice(i, i + columns));\n    }\n\n    return /*#__PURE__*/React.createElement(VStack, _extends({}, DEBUG_STYLES.rows, {\n      space: cellSpacingY\n    }, remainingProps, {\n      ref: ref\n    }), rowSlices.map(function (row, rowIndex) {\n      return /*#__PURE__*/React.createElement(HStack, {\n        space: cellSpacingX,\n        key: rowIndex\n      }, row.map(function (col) {\n        return /*#__PURE__*/React.createElement(Box, _extends({}, DEBUG_STYLES.cols, {\n          key: col.key\n        }), col);\n      }));\n    }));\n  } // Needs more work for empty spacing i.e. auto-fit. Current workaround is to use wrap and let the columns be created dynamically\n  // https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\n  else if (minChildWidth) {\n    return /*#__PURE__*/React.createElement(Box, _extends({\n      flexDirection: \"row\",\n      flexWrap: \"wrap\",\n      justifyContent: \"center\"\n    }, remainingProps, {\n      ref: ref\n    }), childrenArray.map(function (col) {\n      return /*#__PURE__*/React.createElement(Box, _extends({}, DEBUG_STYLES.cols, {\n        mx: cellSpacingX,\n        my: cellSpacingY,\n        key: col.key,\n        minWidth: minChildWidth\n      }), col);\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n};\n\n_s(SimpleGrid, \"EmhqQlZiQp8Re95hwfxTdNiXJFw=\", false, function () {\n  return [useThemeProps, useHasResponsiveProps];\n});\n\n_c = SimpleGrid;\nexport default /*#__PURE__*/_c3 = /*#__PURE__*/React.memo( /*#__PURE__*/_c2 = /*#__PURE__*/React.forwardRef(SimpleGrid));\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SimpleGrid\");\n$RefreshReg$(_c2, \"%default%$React.memo\");\n$RefreshReg$(_c3, \"%default%\");\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/module/components/composites/SimpleGrid/SimpleGrid.js"],"names":["_extends","Object","i","arguments","source","target","DEBUG_STYLES","rows","borderWidth","cols","SimpleGrid","columns","space","spacingX","spacingY","minChildWidth","children","remainingProps","useThemeProps","useHasResponsiveProps","React","cellSpacing","cellSpacingX","cellSpacingY","childrenArray","rowSlices","ref","key","rowIndex","col","flexDirection","flexWrap","justifyContent","mx","my","minWidth"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { Box, HStack, VStack } from '../../primitives';\n// const isDebug = process.env.NODE_ENV !== 'production';\nimport { useThemeProps } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst DEBUG_STYLES = false ? {\n  rows: {\n    borderWidth: '1px'\n  },\n  cols: {\n    borderWidth: '1px'\n  }\n} : {\n  rows: {},\n  cols: {}\n};\n\nconst SimpleGrid = (props, ref) => {\n  const {\n    columns,\n    space,\n    spacingX,\n    spacingY,\n    minChildWidth,\n    children,\n    ...remainingProps\n  } = useThemeProps('SimpleGrid', props); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n\n  let cellSpacing = space !== null && space !== void 0 ? space : 0;\n  let cellSpacingX = spacingX !== null && spacingX !== void 0 ? spacingX : cellSpacing;\n  let cellSpacingY = spacingY !== null && spacingY !== void 0 ? spacingY : cellSpacing;\n  const childrenArray = React.Children.toArray(children);\n\n  if (columns) {\n    let rowSlices = [];\n\n    for (let i = 0; i < childrenArray.length; i = i + columns) {\n      rowSlices.push(childrenArray.slice(i, i + columns));\n    }\n\n    return /*#__PURE__*/React.createElement(VStack, _extends({}, DEBUG_STYLES.rows, {\n      space: cellSpacingY\n    }, remainingProps, {\n      ref: ref\n    }), rowSlices.map((row, rowIndex) => {\n      return /*#__PURE__*/React.createElement(HStack, {\n        space: cellSpacingX,\n        key: rowIndex\n      }, row.map(col => {\n        return /*#__PURE__*/React.createElement(Box, _extends({}, DEBUG_STYLES.cols, {\n          key: col.key\n        }), col);\n      }));\n    }));\n  } // Needs more work for empty spacing i.e. auto-fit. Current workaround is to use wrap and let the columns be created dynamically\n  // https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\n  else if (minChildWidth) {\n      return /*#__PURE__*/React.createElement(Box, _extends({\n        flexDirection: \"row\",\n        flexWrap: \"wrap\",\n        justifyContent: \"center\"\n      }, remainingProps, {\n        ref: ref\n      }), childrenArray.map(col => {\n        return /*#__PURE__*/React.createElement(Box, _extends({}, DEBUG_STYLES.cols, {\n          mx: cellSpacingX,\n          my: cellSpacingY,\n          key: col.key,\n          minWidth: minChildWidth\n        }), col);\n      }));\n    }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n};\n\nexport default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(SimpleGrid));\n//# sourceMappingURL=SimpleGrid.js.map"]},"metadata":{},"sourceType":"module"}