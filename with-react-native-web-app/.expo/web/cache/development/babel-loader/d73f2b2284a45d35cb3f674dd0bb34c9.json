{"ast":null,"code":"import _slicedToArray from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray\";\nvar _excluded = [\"theme\"];\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport get from 'lodash.get';\nimport omit from 'lodash.omit';\nimport useWindowDimensions from \"react-native-web/dist/cjs/exports/useWindowDimensions\";\nimport Platform from \"react-native-web/dist/cjs/exports/Platform\";\nimport { useNativeBase } from './../useNativeBase';\nimport { omitUndefined, extractInObject } from './../../theme/tools/';\nimport { filterShadowProps } from './../../utils/filterShadowProps';\nimport { calculateProps } from './utils';\n\nvar filterAndCalculateProps = function filterAndCalculateProps(theme, colorModeProps, componentTheme, propsReceived, windowWidth) {\n  // Extracting out children and style, as they do not contribute in props calculation\n  // This is done as these props are passed as it is later in the development\n  // Required as some of these will trigger cyclic computation which may lead to error\n  var _extractInObject = extractInObject(propsReceived, ['children', 'style', 'onPress', 'icon', 'onOpen', 'onClose']),\n      _extractInObject2 = _slicedToArray(_extractInObject, 2),\n      ignoredProps = _extractInObject2[0],\n      props = _extractInObject2[1];\n\n  var newProps = calculateProps(theme, colorModeProps, componentTheme, props, windowWidth);\n  var mergedProps = filterShadowProps(newProps, ignoredProps, Platform.OS);\n  return omitUndefined(mergedProps);\n};\n\nexport function useThemeProps(component, propsReceived) {\n  var _useWindowDimensions;\n\n  var _useNativeBase = useNativeBase(),\n      theme = _useNativeBase.theme,\n      colorModeProps = _objectWithoutProperties(_useNativeBase, _excluded); // console.log('THEME = ', theme);\n\n\n  var componentTheme = get(theme, \"components.\".concat(component)); // console.log('COMPONENT THEME = ', componentTheme);\n\n  var windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width; // To pass the component theme props and component props seperately\n\n  return filterAndCalculateProps(omit(theme, ['components']), colorModeProps, componentTheme, propsReceived, windowWidth);\n}","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/hooks/useThemeProps/useProps.tsx"],"names":["filterAndCalculateProps","extractInObject","newProps","calculateProps","mergedProps","filterShadowProps","Platform","omitUndefined","theme","useNativeBase","componentTheme","get","windowWidth","useWindowDimensions","omit"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,GAAA,MAAA,YAAA;AACA,OAAA,IAAA,MAAA,aAAA;;;AAEA,SAAA,aAAA,QAAA,oBAAA;AACA,SAAA,aAAA,EAAA,eAAA,QAAA,sBAAA;AACA,SAAA,iBAAA,QAAA,iCAAA;AACA,SAAA,cAAA,QAAA,SAAA;;AAEA,IAAMA,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAA,KAAA,EAAA,cAAA,EAAA,cAAA,EAAA,aAAA,EAAA,WAAA,EAM3B;EACH;EACA;EACA;EACA,uBAA4BC,eAAe,CAAA,aAAA,EAAgB,CAAA,UAAA,EAAA,OAAA,EAAA,SAAA,EAAA,MAAA,EAAA,QAAA,EAA3D,SAA2D,CAAhB,CAA3C;EAAA;EAAA,IAAI,YAAJ;EAAA,IAAI,KAAJ;;EAQA,IAAIC,QAAQ,GAAGC,cAAc,CAAA,KAAA,EAAA,cAAA,EAAA,cAAA,EAAA,KAAA,EAA7B,WAA6B,CAA7B;EAOA,IAAIC,WAAW,GAAGC,iBAAiB,CAAA,QAAA,EAAA,YAAA,EAAyBC,QAAQ,CAApE,EAAmC,CAAnC;EACA,OAAOC,aAAa,CAApB,WAAoB,CAApB;AA1BF,CAAA;;AA6BA,OAAO,SAAA,aAAA,CAAA,SAAA,EAAA,aAAA,EAA8D;EAAA,IAAA,oBAAA;;EACnE,IAAA,cAAA,GAAqCE,aAArC,EAAA;EAAA,IAAQD,KAAR,GAAA,cAAA,CAAQA,KAAR;EAAA,IAAA,cAAA,GAAA,wBAAA,CAAA,cAAA,EADmE,SACnE,CAAA,CADmE,CAEnE;;;EAEA,IAAME,cAAc,GAAGC,GAAG,CAAA,KAAA,uBAJyC,SAIzC,EAA1B,CAJmE,CAKnE;;EACA,IAAMC,WAAW,GAAA,CAAA,oBAAA,GAAGC,mBAAH,EAAA,MAAA,IAAA,IAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,oBAAAA,CAN+C,KAMnE,CANmE,CAQnE;;EACA,OAAOb,uBAAuB,CAC5Bc,IAAI,CAAA,KAAA,EAAQ,CADgB,YAChB,CAAR,CADwB,EAAA,cAAA,EAAA,cAAA,EAAA,aAAA,EAA9B,WAA8B,CAA9B;AAOD","sourcesContent":["import get from 'lodash.get';\nimport omit from 'lodash.omit';\nimport { useWindowDimensions, Platform } from 'react-native';\nimport { useNativeBase } from './../useNativeBase';\nimport { omitUndefined, extractInObject } from './../../theme/tools/';\nimport { filterShadowProps } from './../../utils/filterShadowProps';\nimport { calculateProps } from './utils';\n\nconst filterAndCalculateProps = (\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  propsReceived: any,\n  windowWidth: any\n) => {\n  // Extracting out children and style, as they do not contribute in props calculation\n  // This is done as these props are passed as it is later in the development\n  // Required as some of these will trigger cyclic computation which may lead to error\n  let [ignoredProps, props] = extractInObject(propsReceived, [\n    'children',\n    'style',\n    'onPress',\n    'icon',\n    'onOpen',\n    'onClose',\n  ]);\n  let newProps = calculateProps(\n    theme,\n    colorModeProps,\n    componentTheme,\n    props,\n    windowWidth\n  );\n  let mergedProps = filterShadowProps(newProps, ignoredProps, Platform.OS);\n  return omitUndefined(mergedProps);\n};\n\nexport function useThemeProps(component: string, propsReceived: any) {\n  const { theme, ...colorModeProps } = useNativeBase();\n  // console.log('THEME = ', theme);\n\n  const componentTheme = get(theme, `components.${component}`);\n  // console.log('COMPONENT THEME = ', componentTheme);\n  const windowWidth = useWindowDimensions()?.width;\n\n  // To pass the component theme props and component props seperately\n  return filterAndCalculateProps(\n    omit(theme, ['components']),\n    colorModeProps,\n    componentTheme,\n    propsReceived,\n    windowWidth\n  );\n}\n"]},"metadata":{},"sourceType":"module"}