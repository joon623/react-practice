{"ast":null,"code":"import { mode } from '../tools';\nvar defaultProps = {\n  size: 'sm',\n  step: 1,\n  min: -Infinity,\n  max: Infinity,\n  defaultValue: '0',\n  keepWithinRange: true,\n  clampValueOnBlur: true,\n  focusInputOnChange: true,\n  getAriaValueText: true\n};\nexport default {\n  defaultProps: defaultProps\n}; //Steppers\n\nvar stepperbaseStyle = function stepperbaseStyle(props) {\n  return {\n    bg: mode('primary.600', 'primary.200')(props),\n    iconColor: mode('gray.50', 'gray.800')(props),\n    _active: {},\n    _disabled: {\n      // iconColor: mode('gray.50', 'gray.300')(props),\n      // bg: mode('blackAlpha.200', 'whiteAlpha.300')(props),\n      opacity: 0.5\n    }\n  };\n};\n\nexport var NumberInputStepper = {\n  baseStyle: stepperbaseStyle\n};\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/module/theme/components/number-input.js"],"names":["defaultProps","size","step","min","max","defaultValue","keepWithinRange","clampValueOnBlur","focusInputOnChange","getAriaValueText","stepperbaseStyle","bg","mode","iconColor","_active","_disabled","opacity","NumberInputStepper","baseStyle"],"mappings":"AAAA,SAAA,IAAA,QAAA,UAAA;AACA,IAAMA,YAAY,GAAG;EACnBC,IAAI,EADe,IAAA;EAEnBC,IAAI,EAFe,CAAA;EAGnBC,GAAG,EAAE,CAHc,QAAA;EAInBC,GAAG,EAJgB,QAAA;EAKnBC,YAAY,EALO,GAAA;EAMnBC,eAAe,EANI,IAAA;EAOnBC,gBAAgB,EAPG,IAAA;EAQnBC,kBAAkB,EARC,IAAA;EASnBC,gBAAgB,EAAE;AATC,CAArB;AAWA,eAAe;EACbT,YAAY,EAAZA;AADa,CAAf,C,CAEG;;AAEH,IAAMU,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,KAAA,EAAS;EAChC,OAAO;IACLC,EAAE,EAAEC,IAAI,CAAA,aAAA,EAAJA,aAAI,CAAJA,CADC,KACDA,CADC;IAELC,SAAS,EAAED,IAAI,CAAA,SAAA,EAAJA,UAAI,CAAJA,CAFN,KAEMA,CAFN;IAGLE,OAAO,EAHF,EAAA;IAILC,SAAS,EAAE;MACT;MACA;MACAC,OAAO,EAAE;IAHA;EAJN,CAAP;AADF,CAAA;;AAaA,OAAO,IAAMC,kBAAkB,GAAG;EAChCC,SAAS,EAAER;AADqB,CAA3B","sourcesContent":["import { mode } from '../tools';\nconst defaultProps = {\n  size: 'sm',\n  step: 1,\n  min: -Infinity,\n  max: Infinity,\n  defaultValue: '0',\n  keepWithinRange: true,\n  clampValueOnBlur: true,\n  focusInputOnChange: true,\n  getAriaValueText: true\n};\nexport default {\n  defaultProps\n}; //Steppers\n\nconst stepperbaseStyle = props => {\n  return {\n    bg: mode('primary.600', 'primary.200')(props),\n    iconColor: mode('gray.50', 'gray.800')(props),\n    _active: {},\n    _disabled: {\n      // iconColor: mode('gray.50', 'gray.300')(props),\n      // bg: mode('blackAlpha.200', 'whiteAlpha.300')(props),\n      opacity: 0.5\n    }\n  };\n};\n\nexport const NumberInputStepper = {\n  baseStyle: stepperbaseStyle\n};\n//# sourceMappingURL=number-input.js.map"]},"metadata":{},"sourceType":"module"}