{"ast":null,"code":"import _defineProperty from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { useEffect, useState } from 'react';\nimport { useTheme } from '../hooks/useTheme';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\nimport { isResponsiveAnyProp } from '../theme/tools';\nexport function useResponsiveSSRProps(incomingProps) {\n  _s();\n\n  var _useState = useState(false),\n      modified = _useState[0],\n      setModified = _useState[1];\n\n  var theme = useTheme();\n  var responsivePropsExists = isResponsiveAnyProp(incomingProps, theme);\n  var isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n  var modifiedProps = incomingProps;\n\n  if (responsivePropsExists && isSSR && !modified) {\n    modifiedProps = _objectSpread(_objectSpread({}, modifiedProps), {}, {\n      key: Math.random()\n    });\n  }\n\n  useEffect(function () {\n    if (responsivePropsExists && isSSR) {\n      setModified(true);\n    }\n  }, [responsivePropsExists, isSSR]);\n  return modifiedProps;\n}\n\n_s(useResponsiveSSRProps, \"UNGT/8iNYjOWUzmQoxzNUK6SGIg=\", false, function () {\n  return [useTheme, useNativeBaseConfig];\n});\n\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/module/hooks/useResponsiveSSRProps.js"],"names":["useResponsiveSSRProps","modified","setModified","useState","theme","useTheme","responsivePropsExists","isResponsiveAnyProp","isSSR","useNativeBaseConfig","modifiedProps","key","Math","useEffect"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA,EAAA,QAAA,QAAA,OAAA;AACA,SAAA,QAAA,QAAA,mBAAA;AACA,SAAA,mBAAA,QAAA,2BAAA;AACA,SAAA,mBAAA,QAAA,gBAAA;AACA,OAAO,SAAA,qBAAA,CAAA,aAAA,EAA8C;EAAA,EAAA;;EACnD,IAAA,SAAA,GAAgCG,QAAQ,CAAxC,KAAwC,CAAxC;EAAA,IAAOF,QAAP,GAAA,SAAA,CAAA,CAAA,CAAA;EAAA,IAAiBC,WAAjB,GAAA,SAAA,CAAA,CAAA,CAAA;;EACA,IAAME,KAAK,GAAGC,QAAd,EAAA;EACA,IAAMC,qBAAqB,GAAGC,mBAAmB,CAAA,aAAA,EAAjD,KAAiD,CAAjD;EACA,IAAMC,KAAK,GAAGC,mBAAmB,CAAnBA,4BAAmB,CAAnBA,CAAd,KAAA;EACA,IAAIC,aAAa,GAAjB,aAAA;;EAEA,IAAIJ,qBAAqB,IAArBA,KAAAA,IAAkC,CAAtC,QAAA,EAAiD;IAC/CI,aAAa,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,aAAA,CAAA,EAAA,EAAA,EAAA;MACXC,GAAG,EAAEC,IAAI,CAAJA,MAAAA;IADM,CAAA,CAAbF;EAGD;;EAEDG,SAAS,CAAC,YAAM;IACd,IAAIP,qBAAqB,IAAzB,KAAA,EAAoC;MAClCJ,WAAW,CAAXA,IAAW,CAAXA;IACD;EAHM,CAAA,EAIN,CAAA,qBAAA,EAJHW,KAIG,CAJM,CAATA;EAKA,OAAA,aAAA;AACD;;GAnBeb,qB;UAEAK,Q,EAEAI,mB","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useTheme } from '../hooks/useTheme';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\nimport { isResponsiveAnyProp } from '../theme/tools';\nexport function useResponsiveSSRProps(incomingProps) {\n  const [modified, setModified] = useState(false);\n  const theme = useTheme();\n  const responsivePropsExists = isResponsiveAnyProp(incomingProps, theme);\n  const isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n  let modifiedProps = incomingProps;\n\n  if (responsivePropsExists && isSSR && !modified) {\n    modifiedProps = { ...modifiedProps,\n      key: Math.random()\n    };\n  }\n\n  useEffect(() => {\n    if (responsivePropsExists && isSSR) {\n      setModified(true);\n    }\n  }, [responsivePropsExists, isSSR]);\n  return modifiedProps;\n}\n//# sourceMappingURL=useResponsiveSSRProps.js.map"]},"metadata":{},"sourceType":"module"}