{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _UIManager = _interopRequireDefault(require(\"../../exports/UIManager\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * This class is responsible for coordinating the \"focused\"\n * state for TextInputs. All calls relating to the keyboard\n * should be funneled through here\n */\n\n\nvar TextInputState = {\n  /**\n   * Internal state\n   */\n  _currentlyFocusedNode: null,\n\n  /**\n   * Returns the ID of the currently focused text field, if one exists\n   * If no text field is focused it returns null\n   */\n  currentlyFocusedField: function currentlyFocusedField() {\n    if (document.activeElement !== this._currentlyFocusedNode) {\n      this._currentlyFocusedNode = null;\n    }\n\n    return this._currentlyFocusedNode;\n  },\n\n  /**\n   * @param {Object} TextInputID id of the text field to focus\n   * Focuses the specified text field\n   * noop if the text field was already focused\n   */\n  focusTextInput: function focusTextInput(textFieldNode) {\n    if (textFieldNode !== null) {\n      this._currentlyFocusedNode = textFieldNode;\n\n      if (document.activeElement !== textFieldNode) {\n        _UIManager[\"default\"].focus(textFieldNode);\n      }\n    }\n  },\n\n  /**\n   * @param {Object} textFieldNode id of the text field to focus\n   * Unfocuses the specified text field\n   * noop if it wasn't focused\n   */\n  blurTextInput: function blurTextInput(textFieldNode) {\n    if (textFieldNode !== null) {\n      this._currentlyFocusedNode = null;\n\n      if (document.activeElement === textFieldNode) {\n        _UIManager[\"default\"].blur(textFieldNode);\n      }\n    }\n  }\n};\nvar _default = TextInputState;\nexports[\"default\"] = _default;\nmodule.exports = exports[\"default\"];\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/react-native-web/dist/cjs/modules/TextInputState/index.js"],"names":["exports","_UIManager","_interopRequireDefault","require","obj","TextInputState","_currentlyFocusedNode","currentlyFocusedField","document","focusTextInput","textFieldNode","blurTextInput","_default","module"],"mappings":"AAAA;;AAEAA,OAAO,CAAPA,UAAAA,GAAAA,IAAAA;AACAA,OAAO,CAAPA,SAAO,CAAPA,GAAkB,KAAlBA,CAAAA;;AAEA,IAAIC,UAAU,GAAGC,sBAAsB,CAACC,OAAO,CAA/C,yBAA+C,CAAR,CAAvC;;AAEA,SAAA,sBAAA,CAAA,GAAA,EAAqC;EAAE,OAAOC,GAAG,IAAIA,GAAG,CAAVA,UAAAA,GAAAA,GAAAA,GAA8B;IAAE,WAASA;EAAX,CAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,cAAc,GAAG;EACnB;AACF;AACA;EACEC,qBAAqB,EAJF,IAAA;;EAMnB;AACF;AACA;AACA;EACEC,qBAAqB,EAAE,SAAA,qBAAA,GAAiC;IACtD,IAAIC,QAAQ,CAARA,aAAAA,KAA2B,KAA/B,qBAAA,EAA2D;MACzD,KAAA,qBAAA,GAAA,IAAA;IACD;;IAED,OAAO,KAAP,qBAAA;EAfiB,CAAA;;EAkBnB;AACF;AACA;AACA;AACA;EACEC,cAAc,EAAE,SAAA,cAAA,CAAA,aAAA,EAAuC;IACrD,IAAIC,aAAa,KAAjB,IAAA,EAA4B;MAC1B,KAAA,qBAAA,GAAA,aAAA;;MAEA,IAAIF,QAAQ,CAARA,aAAAA,KAAJ,aAAA,EAA8C;QAC5CP,UAAU,CAAVA,SAAU,CAAVA,CAAAA,KAAAA,CAAAA,aAAAA;MACD;IACF;EA9BgB,CAAA;;EAiCnB;AACF;AACA;AACA;AACA;EACEU,aAAa,EAAE,SAAA,aAAA,CAAA,aAAA,EAAsC;IACnD,IAAID,aAAa,KAAjB,IAAA,EAA4B;MAC1B,KAAA,qBAAA,GAAA,IAAA;;MAEA,IAAIF,QAAQ,CAARA,aAAAA,KAAJ,aAAA,EAA8C;QAC5CP,UAAU,CAAVA,SAAU,CAAVA,CAAAA,IAAAA,CAAAA,aAAAA;MACD;IACF;EACF;AA9CkB,CAArB;AAgDA,IAAIW,QAAQ,GAAZ,cAAA;AACAZ,OAAO,CAAPA,SAAO,CAAPA,GAAAA,QAAAA;AACAa,MAAM,CAANA,OAAAA,GAAiBb,OAAO,CAAxBa,SAAwB,CAAxBA","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _UIManager = _interopRequireDefault(require(\"../../exports/UIManager\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * This class is responsible for coordinating the \"focused\"\n * state for TextInputs. All calls relating to the keyboard\n * should be funneled through here\n */\nvar TextInputState = {\n  /**\n   * Internal state\n   */\n  _currentlyFocusedNode: null,\n\n  /**\n   * Returns the ID of the currently focused text field, if one exists\n   * If no text field is focused it returns null\n   */\n  currentlyFocusedField: function currentlyFocusedField() {\n    if (document.activeElement !== this._currentlyFocusedNode) {\n      this._currentlyFocusedNode = null;\n    }\n\n    return this._currentlyFocusedNode;\n  },\n\n  /**\n   * @param {Object} TextInputID id of the text field to focus\n   * Focuses the specified text field\n   * noop if the text field was already focused\n   */\n  focusTextInput: function focusTextInput(textFieldNode) {\n    if (textFieldNode !== null) {\n      this._currentlyFocusedNode = textFieldNode;\n\n      if (document.activeElement !== textFieldNode) {\n        _UIManager.default.focus(textFieldNode);\n      }\n    }\n  },\n\n  /**\n   * @param {Object} textFieldNode id of the text field to focus\n   * Unfocuses the specified text field\n   * noop if it wasn't focused\n   */\n  blurTextInput: function blurTextInput(textFieldNode) {\n    if (textFieldNode !== null) {\n      this._currentlyFocusedNode = null;\n\n      if (document.activeElement === textFieldNode) {\n        _UIManager.default.blur(textFieldNode);\n      }\n    }\n  }\n};\nvar _default = TextInputState;\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"module"}