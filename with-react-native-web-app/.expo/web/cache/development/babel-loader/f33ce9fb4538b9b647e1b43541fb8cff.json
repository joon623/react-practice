{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _excluded = [\"isDisabled\", \"onPress\", \"onPressStart\", \"onPressEnd\", \"onPressChange\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useButton = useButton;\n\nvar _interactions = require(\"@react-native-aria/interactions\");\n\nvar _utils = require(\"@react-aria/utils\");\n\nfunction useButton(props) {\n  var isDisabled = props.isDisabled,\n      onPress = props.onPress,\n      onPressStart = props.onPressStart,\n      onPressEnd = props.onPressEnd,\n      onPressChange = props.onPressChange,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var _ref = (0, _interactions.usePress)({\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressChange: onPressChange,\n    onPress: onPress,\n    isDisabled: isDisabled\n  }),\n      pressProps = _ref.pressProps,\n      isPressed = _ref.isPressed;\n\n  var mergedProps = (0, _utils.mergeProps)(pressProps, rest, {\n    accessibilityState: {\n      disabled: isDisabled\n    },\n    accessibilityRole: 'button',\n    disabled: isDisabled\n  });\n  return {\n    isPressed: isPressed,\n    buttonProps: mergedProps\n  };\n}","map":{"version":3,"sources":["useButton.ts"],"names":["rest","isPressed","onPressStart","onPressEnd","onPressChange","onPress","isDisabled","mergedProps","accessibilityState","disabled","accessibilityRole","buttonProps"],"mappings":";;;;;;;;;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,iCAAA,CAAA;;AAEA,IAAA,MAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAkBO,SAAA,SAAA,CAAA,KAAA,EAAyD;EAC9D,IAAI,UAAJ,GAAA,KAAA,CAAI,UAAJ;EAAA,IAAI,OAAJ,GAAA,KAAA,CAAI,OAAJ;EAAA,IAAI,YAAJ,GAAA,KAAA,CAAI,YAAJ;EAAA,IAAI,UAAJ,GAAA,KAAA,CAAI,UAAJ;EAAA,IAAI,aAAJ,GAAA,KAAA,CAAI,aAAJ;EAAA,IAMKA,IANL,4BAAA,KAAA;;EASA,WAAgC,CAAA,GAAA,aAAA,CAAA,QAAA,EAAS;IACvCE,YADuC,EACvCA,YADuC;IAEvCC,UAFuC,EAEvCA,UAFuC;IAGvCC,aAHuC,EAGvCA,aAHuC;IAIvCC,OAJuC,EAIvCA,OAJuC;IAKvCC,UAAAA,EAAAA;EALuC,CAAT,CAAhC;EAAA,IAAI,UAAJ,QAAI,UAAJ;EAAA,IAAkBL,SAAlB,QAAkBA,SAAlB;;EAQA,IAAMM,WAAW,GAAG,CAAA,GAAA,MAAA,CAAA,UAAA,EAAA,UAAA,EAAA,IAAA,EAA6B;IAC/CC,kBAAkB,EAAE;MAClBC,QAAQ,EAAEH;IADQ,CAD2B;IAI/CI,iBAAiB,EAJ8B,QAAA;IAK/CD,QAAQ,EAAEH;EALqC,CAA7B,CAApB;EAQA,OAAO;IACLL,SADK,EACLA,SADK;IAELU,WAAW,EAAEJ;EAFR,CAAP;AAID","sourcesContent":["import { ReactNode } from 'react';\nimport { PressEvents, usePress } from '@react-native-aria/interactions';\nimport { AccessibilityProps, PressableProps } from 'react-native';\nimport { mergeProps } from '@react-aria/utils';\n\ninterface ButtonProps extends PressEvents {\n  /** Whether the button is disabled. */\n  isDisabled?: boolean;\n  /** The content to display in the button. */\n  children?: ReactNode;\n}\n\nexport interface RNAriaButtonProps extends AccessibilityProps, ButtonProps {}\n\nexport interface ButtonAria {\n  /** Props for the button element. */\n  buttonProps: PressableProps;\n  /** Whether the button is currently pressed. */\n  isPressed: boolean;\n}\n\nexport function useButton(props: RNAriaButtonProps): ButtonAria {\n  let {\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    ...rest\n  } = props;\n\n  let { pressProps, isPressed } = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    isDisabled,\n  });\n\n  const mergedProps = mergeProps(pressProps, rest, {\n    accessibilityState: {\n      disabled: isDisabled,\n    },\n    accessibilityRole: 'button',\n    disabled: isDisabled,\n  });\n\n  return {\n    isPressed,\n    buttonProps: mergedProps,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}