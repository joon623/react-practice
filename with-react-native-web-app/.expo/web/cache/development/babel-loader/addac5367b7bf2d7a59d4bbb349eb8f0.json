{"ast":null,"code":"import _defineProperty from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/utils/addTextAndPropsToStrings.tsx\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport Text from '../components/primitives/Text';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var addTextAndPropsToStrings = function addTextAndPropsToStrings(children, props) {\n  var childArray = React.Children.map(children, function (child) {\n    if (typeof child === 'string' || typeof child === 'number') {\n      return /*#__PURE__*/_jsxDEV(Text, _objectSpread(_objectSpread({}, props), {}, {\n        children: child\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 14\n      }, _this);\n    } else {\n      if (!child) {\n        return null;\n      }\n\n      return /*#__PURE__*/React.cloneElement(child, _objectSpread(_objectSpread({}, props), child.props));\n    }\n  });\n  return childArray;\n};\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/utils/addTextAndPropsToStrings.tsx"],"names":["addTextAndPropsToStrings","childArray","child","React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,IAAA,MAAA,+BAAA;;AAEA,OAAO,IAAMA,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAA,QAAA,EAAA,KAAA,EAA+B;EACrE,IAAMC,UAAU,GAAG,KAAK,CAAL,QAAA,CAAA,GAAA,CAAA,QAAA,EAA6B,UAAA,KAAA,EAAW;IACzD,IAAI,OAAA,KAAA,KAAA,QAAA,IAA6B,OAAA,KAAA,KAAjC,QAAA,EAA4D;MAC1D,OAAA,aAAO,OAAA,CAAA,IAAA,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;QAAA,QAAA,EAAkBC;MAAlB,CAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;QAAA,QAAA,EAAA,YAAA;QAAA,UAAA,EAAA,CAAA;QAAA,YAAA,EAAA;MAAA,CAAA,EAAP,KAAO,CAAP;IADF,CAAA,MAEO;MACL,IAAI,CAAJ,KAAA,EAAY;QACV,OAAA,IAAA;MACD;;MACD,OAAA,aAAOC,KAAK,CAALA,YAAAA,CAAAA,KAAAA,EAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAAAA,KAAAA,CAAAA,EAEFD,KAAK,CAFV,KAAOC,CAAAA,CAAP;IAID;EAXH,CAAmB,CAAnB;EAaA,OAAA,UAAA;AAdK,CAAA","sourcesContent":["import React from 'react';\nimport Text from '../components/primitives/Text';\n\nexport const addTextAndPropsToStrings = (children: any, props: any) => {\n  const childArray = React.Children.map(children, (child) => {\n    if (typeof child === 'string' || typeof child === 'number') {\n      return <Text {...props}>{child}</Text>;\n    } else {\n      if (!child) {\n        return null;\n      }\n      return React.cloneElement(child, {\n        ...props,\n        ...child.props,\n      });\n    }\n  });\n  return childArray;\n};\n"]},"metadata":{},"sourceType":"module"}