{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport useWindowDimensions from \"react-native-web/dist/cjs/exports/useWindowDimensions\";\nimport isNil from 'lodash.isnil';\nexport function useMediaQuery(query) {\n  _s();\n\n  var dims = useWindowDimensions();\n  var height = dims === null || dims === void 0 ? void 0 : dims.height;\n  var width = dims === null || dims === void 0 ? void 0 : dims.width;\n  return iterateQuery(query, height, width);\n}\n\n_s(useMediaQuery, \"ax6eq7Nsnu+l8S4NxKFaIwAfD7s=\", false, function () {\n  return [useWindowDimensions];\n});\n\nfunction queryResolver(query, width, height) {\n  for (var queryKey in query) {\n    if (!calculateQuery(queryKey, query[queryKey], height, width)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction iterateQuery(query, height, width) {\n  var queryResults = [];\n\n  if (Array.isArray(query)) {\n    query.forEach(function (subQuery) {\n      queryResults.push(queryResolver(subQuery, width, height));\n    });\n  } else {\n    queryResults.push(queryResolver(query, width, height));\n  }\n\n  return queryResults;\n}\n\nfunction calculateQuery(key, val, height, width) {\n  var retval;\n\n  if (isNil(width) || isNil(height) || isNil(val)) {\n    return;\n  }\n\n  switch (key) {\n    case 'maxWidth':\n      retval = !isNil(val) ? width <= val : undefined;\n      break;\n\n    case 'minWidth':\n      retval = !isNil(val) ? width >= val : undefined;\n      break;\n\n    case 'maxHeight':\n      retval = !isNil(val) ? height <= val : undefined;\n      break;\n\n    case 'minHeight':\n      retval = !isNil(val) ? height >= val : undefined;\n      break;\n\n    case 'orientation':\n      if (!isNil(val)) {\n        if (width > height) {\n          retval = val === 'landscape';\n        } else {\n          retval = val === 'portrait';\n        }\n      }\n\n      break;\n\n    default:\n      break;\n  }\n\n  return retval;\n}\n\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/hooks/useMediaQuery.ts"],"names":["useMediaQuery","dims","useWindowDimensions","height","width","iterateQuery","calculateQuery","query","queryResults","Array","queryResolver","isNil","retval","val"],"mappings":";;;AACA,OAAA,KAAA,MAAA,cAAA;AAcA,OAAO,SAAA,aAAA,CAAA,KAAA,EAAgD;EAAA,EAAA;;EACrD,IAAMC,IAAI,GAAGC,mBAAb,EAAA;EACA,IAAMC,MAAM,GAAGF,IAAH,KAAA,IAAGA,IAAAA,IAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAAA,IAAI,CAAnB,MAAA;EACA,IAAMG,KAAK,GAAGH,IAAH,KAAA,IAAGA,IAAAA,IAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAAA,IAAI,CAAlB,KAAA;EAEA,OAAOI,YAAY,CAAA,KAAA,EAAA,MAAA,EAAnB,KAAmB,CAAnB;AACD;;GANeL,a;UACDE,mB;;;AAOf,SAAA,aAAA,CAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAoE;EAClE,KAAK,IAAL,QAAA,IAAA,KAAA,EAA8B;IAC5B,IAAI,CAACI,cAAc,CAAA,QAAA,EAAWC,KAAK,CAAhB,QAAgB,CAAhB,EAAA,MAAA,EAAnB,KAAmB,CAAnB,EAA+D;MAC7D,OAAA,KAAA;IACD;EACF;;EACD,OAAA,IAAA;AACD;;AAED,SAAA,YAAA,CAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAIE;EACA,IAAMC,YAAY,GAAlB,EAAA;;EACA,IAAIC,KAAK,CAALA,OAAAA,CAAJ,KAAIA,CAAJ,EAA0B;IACxBF,KAAK,CAALA,OAAAA,CAAc,UAAA,QAAA,EAAwB;MACpCC,YAAY,CAAZA,IAAAA,CAAkBE,aAAa,CAAA,QAAA,EAAA,KAAA,EAA/BF,MAA+B,CAA/BA;IADFD,CAAAA;EADF,CAAA,MAIO;IACLC,YAAY,CAAZA,IAAAA,CAAkBE,aAAa,CAAA,KAAA,EAAA,KAAA,EAA/BF,MAA+B,CAA/BA;EACD;;EACD,OAAA,YAAA;AACD;;AAED,SAAA,cAAA,CAAA,GAAA,EAAA,GAAA,EAAA,MAAA,EAAA,KAAA,EAKE;EACA,IAAA,MAAA;;EACA,IAAIG,KAAK,CAALA,KAAK,CAALA,IAAgBA,KAAK,CAArBA,MAAqB,CAArBA,IAAiCA,KAAK,CAA1C,GAA0C,CAA1C,EAAiD;IAC/C;EACD;;EACD,QAAA,GAAA;IACE,KAAA,UAAA;MACEC,MAAM,GAAG,CAACD,KAAK,CAAN,GAAM,CAAN,GAAcP,KAAK,IAAnB,GAAA,GAATQ,SAAAA;MACA;;IACF,KAAA,UAAA;MACEA,MAAM,GAAG,CAACD,KAAK,CAAN,GAAM,CAAN,GAAcP,KAAK,IAAnB,GAAA,GAATQ,SAAAA;MACA;;IACF,KAAA,WAAA;MACEA,MAAM,GAAG,CAACD,KAAK,CAAN,GAAM,CAAN,GAAcR,MAAM,IAApB,GAAA,GAATS,SAAAA;MACA;;IACF,KAAA,WAAA;MACEA,MAAM,GAAG,CAACD,KAAK,CAAN,GAAM,CAAN,GAAcR,MAAM,IAApB,GAAA,GAATS,SAAAA;MACA;;IACF,KAAA,aAAA;MACE,IAAI,CAACD,KAAK,CAAV,GAAU,CAAV,EAAiB;QACf,IAAIP,KAAK,GAAT,MAAA,EAAoB;UAClBQ,MAAM,GAAGC,GAAG,KAAZD,WAAAA;QADF,CAAA,MAEO;UACLA,MAAM,GAAGC,GAAG,KAAZD,UAAAA;QACD;MACF;;MACD;;IACF;MACE;EAvBJ;;EAyBA,OAAA,MAAA;AACD","sourcesContent":["import { useWindowDimensions } from 'react-native';\nimport isNil from 'lodash.isnil';\n\ntype QueryKeys =\n  | 'maxWidth'\n  | 'minWidth'\n  | 'maxHeight'\n  | 'minHeight'\n  | 'orientation';\n\ntype SubQuery = {\n  [queryKey in QueryKeys]?: number | string;\n};\ntype Query = Array<SubQuery>;\n\nexport function useMediaQuery(query: SubQuery | Query) {\n  const dims = useWindowDimensions();\n  const height = dims?.height;\n  const width = dims?.width;\n\n  return iterateQuery(query, height, width);\n}\n\nfunction queryResolver(query: any, width?: number, height?: number) {\n  for (const queryKey in query) {\n    if (!calculateQuery(queryKey, query[queryKey], height, width)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction iterateQuery(\n  query: SubQuery | Query,\n  height?: number,\n  width?: number\n) {\n  const queryResults = [];\n  if (Array.isArray(query)) {\n    query.forEach((subQuery: SubQuery) => {\n      queryResults.push(queryResolver(subQuery, width, height));\n    });\n  } else {\n    queryResults.push(queryResolver(query, width, height));\n  }\n  return queryResults;\n}\n\nfunction calculateQuery(\n  key: string,\n  val?: number | string,\n  height?: number,\n  width?: number\n) {\n  let retval;\n  if (isNil(width) || isNil(height) || isNil(val)) {\n    return;\n  }\n  switch (key) {\n    case 'maxWidth':\n      retval = !isNil(val) ? width <= val : undefined;\n      break;\n    case 'minWidth':\n      retval = !isNil(val) ? width >= val : undefined;\n      break;\n    case 'maxHeight':\n      retval = !isNil(val) ? height <= val : undefined;\n      break;\n    case 'minHeight':\n      retval = !isNil(val) ? height >= val : undefined;\n      break;\n    case 'orientation':\n      if (!isNil(val)) {\n        if (width > height) {\n          retval = val === 'landscape';\n        } else {\n          retval = val === 'portrait';\n        }\n      }\n      break;\n    default:\n      break;\n  }\n  return retval;\n}\n"]},"metadata":{},"sourceType":"module"}