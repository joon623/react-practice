{"ast":null,"code":"var _jsxFileName = \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/utils/useResponsiveQuery/ResponsiveQueryProvider.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var ResponsiveQueryContext = /*#__PURE__*/React.createContext({\n  disableCSSMediaQueries: false\n});\nexport var ResponsiveQueryProvider = function ResponsiveQueryProvider(props) {\n  _s();\n\n  var value = React.useMemo(function () {\n    return {\n      disableCSSMediaQueries: props.disableCSSMediaQueries\n    };\n  }, [props.disableCSSMediaQueries]);\n  return /*#__PURE__*/_jsxDEV(ResponsiveQueryContext.Provider, {\n    value: value,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ResponsiveQueryProvider, \"tPauEVZ6EeuERV9ttvKTwQ7++Gw=\");\n\n_c = ResponsiveQueryProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResponsiveQueryProvider\");\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/utils/useResponsiveQuery/ResponsiveQueryProvider.tsx"],"names":["ResponsiveQueryContext","disableCSSMediaQueries","ResponsiveQueryProvider","value","props","children"],"mappings":";;;;AAAA,OAAA,KAAA,MAAA,OAAA;;AAMA,OAAO,IAAMA,sBAAsB,GAAA,aAAG,KAAK,CAAL,aAAA,CACpC;EACEC,sBAAsB,EAAE;AAD1B,CADoC,CAA/B;AAMP,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAA,KAAA,EAElC;EAAA,EAAA;;EACH,IAAMC,KAAK,GAAG,KAAK,CAAL,OAAA,CACZ,YAAA;IAAA,OAAO;MACLF,sBAAsB,EAAEG,KAAK,CAACH;IADzB,CAAP;EADY,CAAA,EAIZ,CAACG,KAAK,CAJR,sBAIE,CAJY,CAAd;EAOA,OAAA,aACE,OAAA,CAAC,sBAAD,CAAA,QAAA,EAAA;IAAiC,KAAK,EAAtC,KAAA;IAAA,QAAA,EACGA,KAAK,CAACC;EADT,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;IAAA,QAAA,EAAA,YAAA;IAAA,UAAA,EAAA,EAAA;IAAA,YAAA,EAAA;EAAA,CAAA,EADF,KACE,CADF;AAVK,CAAA;;GAAMH,uB;;KAAAA,uB","sourcesContent":["import React from 'react';\n\ntype ResponsiveQueryContextType = {\n  disableCSSMediaQueries?: boolean;\n};\n\nexport const ResponsiveQueryContext = React.createContext<ResponsiveQueryContextType>(\n  {\n    disableCSSMediaQueries: false,\n  }\n);\n\nexport const ResponsiveQueryProvider = (\n  props: ResponsiveQueryContextType & { children: React.ReactNode }\n) => {\n  const value = React.useMemo(\n    () => ({\n      disableCSSMediaQueries: props.disableCSSMediaQueries,\n    }),\n    [props.disableCSSMediaQueries]\n  );\n\n  return (\n    <ResponsiveQueryContext.Provider value={value}>\n      {props.children}\n    </ResponsiveQueryContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}