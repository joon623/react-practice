{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nvar TouchHistoryMath = {\n  /**\n   * This code is optimized and not intended to look beautiful. This allows\n   * computing of touch centroids that have moved after `touchesChangedAfter`\n   * timeStamp. You can compute the current centroid involving all touches\n   * moves after `touchesChangedAfter`, or you can compute the previous\n   * centroid of all touches that were moved after `touchesChangedAfter`.\n   *\n   * @param {TouchHistoryMath} touchHistory Standard Responder touch track\n   * data.\n   * @param {number} touchesChangedAfter timeStamp after which moved touches\n   * are considered \"actively moving\" - not just \"active\".\n   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.\n   * @param {boolean} ofCurrent Compute current centroid for actively moving\n   * touches vs. previous centroid of now actively moving touches.\n   * @return {number} value of centroid in specified dimension.\n   */\n  centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {\n    var touchBank = touchHistory.touchBank;\n    var total = 0;\n    var count = 0;\n    var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;\n\n    if (oneTouchData !== null) {\n      if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {\n        total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;\n        count = 1;\n      }\n    } else {\n      for (var i = 0; i < touchBank.length; i++) {\n        var touchTrack = touchBank[i];\n\n        if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {\n          var toAdd = void 0; // Yuck, program temporarily in invalid state.\n\n          if (ofCurrent && isXAxis) {\n            toAdd = touchTrack.currentPageX;\n          } else if (ofCurrent && !isXAxis) {\n            toAdd = touchTrack.currentPageY;\n          } else if (!ofCurrent && isXAxis) {\n            toAdd = touchTrack.previousPageX;\n          } else {\n            toAdd = touchTrack.previousPageY;\n          }\n\n          total += toAdd;\n          count++;\n        }\n      }\n    }\n\n    return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n  },\n  currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    true // ofCurrent\n    );\n  },\n  currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    true // ofCurrent\n    );\n  },\n  previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    false // ofCurrent\n    );\n  },\n  previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    false // ofCurrent\n    );\n  },\n  currentCentroidX: function currentCentroidX(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    true, // isXAxis\n    true // ofCurrent\n    );\n  },\n  currentCentroidY: function currentCentroidY(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    false, // isXAxis\n    true // ofCurrent\n    );\n  },\n  noCentroid: -1\n};\nvar _default = TouchHistoryMath;\nexports[\"default\"] = _default;\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/react-native-web/dist/cjs/vendor/react-native/TouchHistoryMath/index.js"],"names":["exports","TouchHistoryMath","centroidDimension","touchBank","touchHistory","total","count","oneTouchData","ofCurrent","i","touchTrack","toAdd","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","noCentroid","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\nvar TouchHistoryMath = {\n  /**\n   * This code is optimized and not intended to look beautiful. This allows\n   * computing of touch centroids that have moved after `touchesChangedAfter`\n   * timeStamp. You can compute the current centroid involving all touches\n   * moves after `touchesChangedAfter`, or you can compute the previous\n   * centroid of all touches that were moved after `touchesChangedAfter`.\n   *\n   * @param {TouchHistoryMath} touchHistory Standard Responder touch track\n   * data.\n   * @param {number} touchesChangedAfter timeStamp after which moved touches\n   * are considered \"actively moving\" - not just \"active\".\n   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.\n   * @param {boolean} ofCurrent Compute current centroid for actively moving\n   * touches vs. previous centroid of now actively moving touches.\n   * @return {number} value of centroid in specified dimension.\n   */\n  centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {\n    var touchBank = touchHistory.touchBank;\n    var total = 0;\n    var count = 0;\n    var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;\n\n    if (oneTouchData !== null) {\n      if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {\n        total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;\n        count = 1;\n      }\n    } else {\n      for (var i = 0; i < touchBank.length; i++) {\n        var touchTrack = touchBank[i];\n\n        if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {\n          var toAdd = void 0; // Yuck, program temporarily in invalid state.\n\n          if (ofCurrent && isXAxis) {\n            toAdd = touchTrack.currentPageX;\n          } else if (ofCurrent && !isXAxis) {\n            toAdd = touchTrack.currentPageY;\n          } else if (!ofCurrent && isXAxis) {\n            toAdd = touchTrack.previousPageX;\n          } else {\n            toAdd = touchTrack.previousPageY;\n          }\n\n          total += toAdd;\n          count++;\n        }\n      }\n    }\n\n    return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n  },\n  currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    true // ofCurrent\n    );\n  },\n  currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    true // ofCurrent\n    );\n  },\n  previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    false // ofCurrent\n    );\n  },\n  previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    false // ofCurrent\n    );\n  },\n  currentCentroidX: function currentCentroidX(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    true, // isXAxis\n    true // ofCurrent\n    );\n  },\n  currentCentroidY: function currentCentroidY(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    false, // isXAxis\n    true // ofCurrent\n    );\n  },\n  noCentroid: -1\n};\nvar _default = TouchHistoryMath;\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}