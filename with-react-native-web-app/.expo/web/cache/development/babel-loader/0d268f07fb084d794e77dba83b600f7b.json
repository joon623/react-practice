{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { SafeAreaProvider, initialWindowMetrics as defaultInitialWindowMetrics } from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme } from './../theme';\nimport HybridProvider from './hybrid-overlay/HybridProvider';\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from '../components/composites/Toast';\nimport { defaultConfig, NativeBaseConfigProvider } from './NativeBaseContext';\nimport { useToast } from '../components/composites/Toast';\nimport Platform from \"react-native-web/dist/cjs/exports/Platform\";\nimport useWindowDimensions from \"react-native-web/dist/cjs/exports/useWindowDimensions\";\nimport { getClosestBreakpoint, platformSpecificSpaceUnits } from '../theme/tools/utils';\nimport { ResponsiveQueryProvider } from '../utils/useResponsiveQuery'; // For SSR to work, we need to pass initial insets as 0 values on web.\n// https://github.com/th3rdwave/react-native-safe-area-context/issues/132\n\nvar defaultInitialWindowMetricsBasedOnPlatform = Platform.select({\n  web: {\n    frame: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    },\n    insets: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    }\n  },\n  \"default\": defaultInitialWindowMetrics\n});\n\nvar NativeBaseProvider = function NativeBaseProvider(props) {\n  _s();\n\n  var _config$theme, _useWindowDimensions;\n\n  var colorModeManager = props.colorModeManager,\n      _props$config = props.config,\n      config = _props$config === void 0 ? defaultConfig : _props$config,\n      children = props.children,\n      _props$theme = props.theme,\n      propsTheme = _props$theme === void 0 ? defaultTheme : _props$theme,\n      initialWindowMetrics = props.initialWindowMetrics,\n      isSSR = props.isSSR,\n      disableContrastText = props.disableContrastText;\n  var theme = (_config$theme = config.theme) !== null && _config$theme !== void 0 ? _config$theme : propsTheme;\n  var newTheme = React.useMemo(function () {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n\n    return theme;\n  }, [config.enableRem, theme]);\n  var windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width;\n  var currentBreakpoint = React.useMemo(function () {\n    return getClosestBreakpoint(newTheme.breakpoints, windowWidth);\n  }, [windowWidth, newTheme.breakpoints]);\n  return /*#__PURE__*/React.createElement(NativeBaseConfigProvider, {\n    theme: newTheme,\n    config: config,\n    currentBreakpoint: currentBreakpoint,\n    isSSR: isSSR,\n    disableContrastText: disableContrastText\n  }, /*#__PURE__*/React.createElement(SafeAreaProvider, {\n    initialMetrics: initialWindowMetrics !== null && initialWindowMetrics !== void 0 ? initialWindowMetrics : defaultInitialWindowMetricsBasedOnPlatform\n  }, /*#__PURE__*/React.createElement(ResponsiveQueryProvider, {\n    disableCSSMediaQueries: !isSSR\n  }, /*#__PURE__*/React.createElement(HybridProvider, {\n    colorModeManager: colorModeManager,\n    options: theme.config\n  }, /*#__PURE__*/React.createElement(OverlayProvider, null, /*#__PURE__*/React.createElement(ToastProvider, null, /*#__PURE__*/React.createElement(InitializeToastRef, null), /*#__PURE__*/React.createElement(SSRProvider, null, children)))))));\n};\n\n_s(NativeBaseProvider, \"Z0TOhoRd7K5V5p+vKVujSUGdVHA=\", false, function () {\n  return [useWindowDimensions];\n});\n\n_c = NativeBaseProvider;\n\nvar InitializeToastRef = function InitializeToastRef() {\n  _s2();\n\n  var toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\n\n_s2(InitializeToastRef, \"WUU7e0p6AiTpvVrXhi50JBdcu+0=\", false, function () {\n  return [useToast];\n});\n\n_c2 = InitializeToastRef;\nexport { NativeBaseProvider };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NativeBaseProvider\");\n$RefreshReg$(_c2, \"InitializeToastRef\");\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/module/core/NativeBaseProvider.js"],"names":["initialWindowMetrics","theme","defaultInitialWindowMetricsBasedOnPlatform","web","frame","x","y","width","height","insets","top","left","right","bottom","defaultInitialWindowMetrics","NativeBaseProvider","colorModeManager","config","children","propsTheme","isSSR","disableContrastText","props","_config$theme","newTheme","platformSpecificSpaceUnits","windowWidth","_useWindowDimensions","useWindowDimensions","currentBreakpoint","getClosestBreakpoint","initialMetrics","disableCSSMediaQueries","options","React","InitializeToastRef","toast","useToast","ToastRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { SafeAreaProvider, initialWindowMetrics as defaultInitialWindowMetrics } from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme } from './../theme';\nimport HybridProvider from './hybrid-overlay/HybridProvider';\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from '../components/composites/Toast';\nimport { defaultConfig, NativeBaseConfigProvider } from './NativeBaseContext';\nimport { useToast } from '../components/composites/Toast';\nimport { Platform, useWindowDimensions } from 'react-native';\nimport { getClosestBreakpoint, platformSpecificSpaceUnits } from '../theme/tools/utils';\nimport { ResponsiveQueryProvider } from '../utils/useResponsiveQuery'; // For SSR to work, we need to pass initial insets as 0 values on web.\n// https://github.com/th3rdwave/react-native-safe-area-context/issues/132\n\nconst defaultInitialWindowMetricsBasedOnPlatform = Platform.select({\n  web: {\n    frame: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    },\n    insets: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    }\n  },\n  default: defaultInitialWindowMetrics\n});\n\nconst NativeBaseProvider = props => {\n  var _config$theme, _useWindowDimensions;\n\n  const {\n    colorModeManager,\n    config = defaultConfig,\n    children,\n    theme: propsTheme = defaultTheme,\n    initialWindowMetrics,\n    isSSR,\n    disableContrastText\n  } = props;\n  const theme = (_config$theme = config.theme) !== null && _config$theme !== void 0 ? _config$theme : propsTheme;\n  const newTheme = React.useMemo(() => {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n\n    return theme;\n  }, [config.enableRem, theme]);\n  const windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width;\n  const currentBreakpoint = React.useMemo(() => getClosestBreakpoint(newTheme.breakpoints, windowWidth), [windowWidth, newTheme.breakpoints]);\n  return /*#__PURE__*/React.createElement(NativeBaseConfigProvider, {\n    theme: newTheme,\n    config: config,\n    currentBreakpoint: currentBreakpoint,\n    isSSR: isSSR,\n    disableContrastText: disableContrastText\n  }, /*#__PURE__*/React.createElement(SafeAreaProvider, {\n    initialMetrics: initialWindowMetrics !== null && initialWindowMetrics !== void 0 ? initialWindowMetrics : defaultInitialWindowMetricsBasedOnPlatform\n  }, /*#__PURE__*/React.createElement(ResponsiveQueryProvider, {\n    disableCSSMediaQueries: !isSSR\n  }, /*#__PURE__*/React.createElement(HybridProvider, {\n    colorModeManager: colorModeManager,\n    options: theme.config\n  }, /*#__PURE__*/React.createElement(OverlayProvider, null, /*#__PURE__*/React.createElement(ToastProvider, null, /*#__PURE__*/React.createElement(InitializeToastRef, null), /*#__PURE__*/React.createElement(SSRProvider, null, children)))))));\n};\n\nconst InitializeToastRef = () => {\n  const toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\n\nexport { NativeBaseProvider };\n//# sourceMappingURL=NativeBaseProvider.js.map"]},"metadata":{},"sourceType":"module"}