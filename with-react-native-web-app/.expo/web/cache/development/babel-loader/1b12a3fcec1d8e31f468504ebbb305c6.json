{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _exportNames = {\n  attachEventHandlersOnRef: true,\n  getLabel: true,\n  isRTL: true,\n  useId: true,\n  useLayoutEffect: true,\n  mergeIds: true,\n  mergeProps: true,\n  SSRProvider: true,\n  useIsSSR: true\n};\nObject.defineProperty(exports, \"useId\", {\n  enumerable: true,\n  get: function get() {\n    return _utils.useId;\n  }\n});\nObject.defineProperty(exports, \"useLayoutEffect\", {\n  enumerable: true,\n  get: function get() {\n    return _utils.useLayoutEffect;\n  }\n});\nObject.defineProperty(exports, \"mergeIds\", {\n  enumerable: true,\n  get: function get() {\n    return _utils.mergeIds;\n  }\n});\nObject.defineProperty(exports, \"mergeProps\", {\n  enumerable: true,\n  get: function get() {\n    return _utils.mergeProps;\n  }\n});\nObject.defineProperty(exports, \"SSRProvider\", {\n  enumerable: true,\n  get: function get() {\n    return _ssr.SSRProvider;\n  }\n});\nObject.defineProperty(exports, \"useIsSSR\", {\n  enumerable: true,\n  get: function get() {\n    return _ssr.useIsSSR;\n  }\n});\nexports.isRTL = exports.getLabel = exports.attachEventHandlersOnRef = void 0;\n\nvar _reactNative = require(\"react-native-web/dist/cjs/index\");\n\nvar _ariaToAccessibilityMap = require(\"./ariaToAccessibilityMap\");\n\nObject.keys(_ariaToAccessibilityMap).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _ariaToAccessibilityMap[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _ariaToAccessibilityMap[key];\n    }\n  });\n});\n\nvar _utils = require(\"@react-aria/utils\");\n\nvar _ssr = require(\"@react-aria/ssr\");\n\nvar attachEventHandlersOnRef = function attachEventHandlersOnRef(props, ref) {\n  if (ref && ref.current) {\n    for (var key in props) {\n      if (key.startsWith('on')) {\n        ref.current[key.toLowerCase()] = props[key];\n      }\n    }\n  }\n};\n\nexports.attachEventHandlersOnRef = attachEventHandlersOnRef;\n\nvar getLabel = function getLabel(props) {\n  var _props$accessibilityL;\n\n  var label = (_props$accessibilityL = props.accessibilityLabel) !== null && _props$accessibilityL !== void 0 ? _props$accessibilityL : props['aria-label'];\n\n  if (!label) {\n    label = typeof props.label === 'string' ? props.label : undefined;\n  }\n\n  return label;\n};\n\nexports.getLabel = getLabel;\n\nvar isRTL = function isRTL() {\n  // To support previous RN versions. Newer versions use below getConstants()\n  if (_reactNative.I18nManager.isRTL !== undefined) {\n    return _reactNative.I18nManager.isRTL;\n  } // @ts-ignore - RN web only\n\n\n  if (_reactNative.I18nManager.getConstants) {\n    // @ts-ignore - RN web only\n    return _reactNative.I18nManager.getConstants().isRTL;\n  }\n};\n\nexports.isRTL = isRTL;","map":{"version":3,"sources":["index.ts"],"names":["attachEventHandlersOnRef","ref","key","props","getLabel","label","isRTL","I18nManager"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAA,uBAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AAAA,MAAA,CAAA,IAAA,CAAA,uBAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;EAAA,IAAA,GAAA,KAAA,SAAA,IAAA,GAAA,KAAA,YAAA,EAAA;EAAA,IAAA,MAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,CAAA,YAAA,EAAA,GAAA,CAAA,EAAA;EAAA,IAAA,GAAA,IAAA,OAAA,IAAA,OAAA,CAAA,GAAA,CAAA,KAAA,uBAAA,CAAA,GAAA,CAAA,EAAA;EAAA,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;IAAA,UAAA,EAAA,IAAA;IAAA,GAAA,EAAA,eAAA;MAAA,OAAA,uBAAA,CAAA,GAAA,CAAA;IAAA;EAAA,CAAA;AAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAMA,IAAA,IAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AA3BO,IAAMA,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAA,KAAA,EAAA,GAAA,EAA0B;EAChE,IAAIC,GAAG,IAAIA,GAAG,CAAd,OAAA,EAAwB;IACtB,KAAK,IAAL,GAAA,IAAA,KAAA,EAAuB;MACrB,IAAIC,GAAG,CAAHA,UAAAA,CAAJ,IAAIA,CAAJ,EAA0B;QACxBD,GAAG,CAAHA,OAAAA,CAAYC,GAAG,CAAfD,WAAYC,EAAZD,IAAiCE,KAAK,CAAtCF,GAAsC,CAAtCA;MACD;IACF;EACF;AAPI,CAAA;;;;AAUA,IAAMG,QAAQ,GAAID,SAAZC,QAAYD,CAAAA,KAAD,EAAgB;EAAA,IAAA,qBAAA;;EACtC,IAAIE,KAAK,GAAA,CAAA,qBAAA,GAAGF,KAAK,CAAR,kBAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAA+BA,KAAK,CAA7C,YAA6C,CAA7C;;EAEA,IAAI,CAAJ,KAAA,EAAY;IACVE,KAAK,GAAG,OAAOF,KAAK,CAAZ,KAAA,KAAA,QAAA,GAAkCA,KAAK,CAAvC,KAAA,GAARE,SAAAA;EACD;;EAED,OAAA,KAAA;AAPK,CAAA;;;;AAmBA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;EACzB;EACA,IAAIC,YAAAA,CAAAA,WAAAA,CAAAA,KAAAA,KAAJ,SAAA,EAAqC;IACnC,OAAOA,YAAAA,CAAAA,WAAAA,CAAP,KAAA;EAHuB,CAAA,CAMzB;;;EACA,IAAIA,YAAAA,CAAAA,WAAAA,CAAJ,YAAA,EAA8B;IAC5B;IACA,OAAOA,YAAAA,CAAAA,WAAAA,CAAAA,YAAAA,GAAP,KAAA;EACD;AAVI,CAAA","sourcesContent":["import { I18nManager } from 'react-native';\n\nexport const attachEventHandlersOnRef = (props: any, ref: any) => {\n  if (ref && ref.current) {\n    for (let key in props) {\n      if (key.startsWith('on')) {\n        ref.current[key.toLowerCase()] = props[key];\n      }\n    }\n  }\n};\n\nexport const getLabel = (props: any) => {\n  let label = props.accessibilityLabel ?? props['aria-label'];\n\n  if (!label) {\n    label = typeof props.label === 'string' ? props.label : undefined;\n  }\n\n  return label;\n};\n\nexport * from './ariaToAccessibilityMap';\nexport {\n  useId,\n  useLayoutEffect,\n  mergeIds,\n  mergeProps,\n} from '@react-aria/utils';\nexport { SSRProvider, useIsSSR } from '@react-aria/ssr';\n\nexport const isRTL = () => {\n  // To support previous RN versions. Newer versions use below getConstants()\n  if (I18nManager.isRTL !== undefined) {\n    return I18nManager.isRTL;\n  }\n\n  // @ts-ignore - RN web only\n  if (I18nManager.getConstants) {\n    // @ts-ignore - RN web only\n    return I18nManager.getConstants().isRTL;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}