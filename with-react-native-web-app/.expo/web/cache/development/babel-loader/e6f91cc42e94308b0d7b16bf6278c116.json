{"ast":null,"code":"import _slicedToArray from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty2 from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this;\n\nvar _excluded = [\"children\", \"onTransitionComplete\", \"visible\", \"initial\", \"animate\", \"exit\", \"style\", \"as\"];\nvar _jsxFileName = \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/components/composites/Transitions/Transition.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/* eslint-disable react-hooks/exhaustive-deps */\n\n\nimport React, { forwardRef } from 'react';\nimport Animated from \"react-native-web/dist/cjs/exports/Animated\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar transformStylesMap = {\n  translateY: true,\n  translateX: true,\n  scale: true,\n  scaleX: true,\n  scaleY: true,\n  rotate: true\n};\nvar defaultStyles = {\n  opacity: 1,\n  translateY: 0,\n  translateX: 0,\n  scale: 1,\n  scaleX: 1,\n  scaleY: 1,\n  rotate: '0deg'\n};\n\nvar getAnimatedStyles = function getAnimatedStyles(animateValue) {\n  return function (initial, to) {\n    var styles = {\n      transform: []\n    };\n\n    for (var key in initial) {\n      if (key === 'transition') {\n        continue;\n      }\n\n      if (key in transformStylesMap) {\n        var _styles$transform;\n\n        (_styles$transform = styles.transform) === null || _styles$transform === void 0 ? void 0 : _styles$transform.push(_defineProperty2({}, key, animateValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [initial[key], to[key]]\n        })));\n      } else {\n        styles[key] = animateValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [initial[key], to[key]]\n        });\n      }\n    }\n\n    return styles;\n  };\n};\n\nvar defaultTransitionConfig = {\n  type: 'timing',\n  useNativeDriver: true,\n  duration: 250,\n  delay: 0\n};\nexport var Transition = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      onTransitionComplete = _ref.onTransitionComplete,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? false : _ref$visible,\n      initial = _ref.initial,\n      animate = _ref.animate,\n      exit = _ref.exit,\n      style = _ref.style,\n      as = _ref.as,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var animateValue = React.useRef(new Animated.Value(0)).current;\n  var Component = React.useMemo(function () {\n    if (as) {\n      return Animated.createAnimatedComponent(as);\n    }\n\n    return Animated.View;\n  }, [as]);\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      animationState = _React$useState2[0],\n      setAnimationState = _React$useState2[1];\n\n  var prevVisible = React.useRef(visible);\n  React.useEffect(function () {\n    if (animationState === 'entering' || animationState === 'exiting') {\n      var _transition$type;\n\n      var entryTransition = _objectSpread(_objectSpread({}, defaultTransitionConfig), animate === null || animate === void 0 ? void 0 : animate.transition);\n\n      var exitTransition = _objectSpread(_objectSpread({}, defaultTransitionConfig), exit === null || exit === void 0 ? void 0 : exit.transition);\n\n      var startAnimation = animationState === 'entering' ? 1 : 0;\n      var transition = startAnimation ? entryTransition : exitTransition;\n      Animated.sequence([// @ts-ignore - delay is present in defaultTransitionConfig\n      Animated.delay(transition.delay), Animated[(_transition$type = transition.type) !== null && _transition$type !== void 0 ? _transition$type : 'timing'](animateValue, _objectSpread({\n        toValue: startAnimation,\n        useNativeDriver: true\n      }, transition))]).start(function () {\n        if (animationState === 'entering') {\n          setAnimationState('entered');\n        } else if (animationState === 'exiting') {\n          setAnimationState('exited');\n        }\n      }); // });\n    }\n\n    if (animationState === 'exited') {\n      onTransitionComplete && onTransitionComplete('exited');\n    } else if (animationState === 'entered') {\n      onTransitionComplete && onTransitionComplete('entered');\n    } // if (animationState === 'entering') {\n    //   //\n    // }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [animationState, onTransitionComplete]);\n  React.useEffect(function () {\n    // if (!visible) {\n    if (prevVisible.current !== visible && !visible) {\n      setAnimationState('exiting');\n    }\n\n    if (visible) {\n      setAnimationState('entering');\n    }\n\n    prevVisible.current = visible; // }\n  }, [visible]); // If exit animation is present and state is exiting, we replace 'initial' with 'exit' animation\n  //  const initialState = { ...defaultStyles, ...initial };\n\n  var initialState = animationState === 'exited' && exit ? _objectSpread(_objectSpread({}, defaultStyles), exit) : _objectSpread(_objectSpread({}, defaultStyles), initial); // const initialState = { ...defaultStyles, ...initial };\n  // initial =\n  //   animationState === 'exited'\n  //     ? { ...defaultStyles, ...exit }\n  //     : { ...defaultStyles, ...initial };\n\n  var animateState = _objectSpread(_objectSpread({}, defaultStyles), animate); // const [initialState, setInitialState] = React.useState({\n  //   ...defaultStyles,\n  //   ...initial,\n  // });\n  // console.log('Initial state ', initial);\n  // const [animateState] = React.useState({ ...defaultStyles, ...animate });\n\n\n  var styles = React.useMemo(function () {\n    // console.log('display state here', initial);\n    return [getAnimatedStyles(animateValue)(initialState, animateState), style];\n  }, [animateValue, initial, animate, style]);\n  return /*#__PURE__*/_jsxDEV(Component // pointerEvents=\"box-none\"\n  , _objectSpread(_objectSpread({\n    pointerEvents: !visible ? 'none' : 'box-none' // https://github.com/facebook/react-native/issues/23090#issuecomment-710803743\n    // needsOffscreenAlphaCompositing\n    // style={[styles]}\n    ,\n    style: [styles],\n    ref: ref\n  }, rest), {}, {\n    children: children\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 7\n  }, _this);\n});","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/components/composites/Transitions/Transition.tsx"],"names":["transformStylesMap","translateY","translateX","scale","scaleX","scaleY","rotate","defaultStyles","opacity","getAnimatedStyles","animateValue","styles","transform","key","inputRange","outputRange","initial","to","defaultTransitionConfig","type","useNativeDriver","duration","delay","Transition","forwardRef","visible","as","rest","React","Animated","Component","prevVisible","animationState","entryTransition","animate","exitTransition","exit","startAnimation","transition","toValue","setAnimationState","onTransitionComplete","initialState","animateState","ref","children"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AACA,OAAA,KAAA,IAAA,UAAA,QAAA,OAAA;;;AAQA,IAAMA,kBAAkB,GAAG;EACzBC,UAAU,EADe,IAAA;EAEzBC,UAAU,EAFe,IAAA;EAGzBC,KAAK,EAHoB,IAAA;EAIzBC,MAAM,EAJmB,IAAA;EAKzBC,MAAM,EALmB,IAAA;EAMzBC,MAAM,EAAE;AANiB,CAA3B;AASA,IAAMC,aAAa,GAAG;EACpBC,OAAO,EADa,CAAA;EAEpBP,UAAU,EAFU,CAAA;EAGpBC,UAAU,EAHU,CAAA;EAIpBC,KAAK,EAJe,CAAA;EAKpBC,MAAM,EALc,CAAA;EAMpBC,MAAM,EANc,CAAA;EAOpBC,MAAM,EAAE;AAPY,CAAtB;;AAUA,IAAMG,iBAAiB,GAAIC,SAArBD,iBAAqBC,CAAAA,YAAD;EAAA,OAAuB,UAAA,OAAA,EAAA,EAAA,EAG5C;IACH,IAAMC,MAAW,GAAG;MAClBC,SAAS,EAAE;IADO,CAApB;;IAGA,KAAK,IAAL,GAAA,IAAA,OAAA,EAAyB;MACvB,IAAIC,GAAG,KAAP,YAAA,EAA0B;QACxB;MACD;;MAED,IAAIA,GAAG,IAAP,kBAAA,EAA+B;QAAA,IAAA,iBAAA;;QAC7B,CAAA,iBAAA,GAAA,MAAM,CAAN,SAAA,MAAA,IAAA,IAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAA,IAAA,sBACE,GADF,EACS,YAAY,CAAZ,WAAA,CAAyB;UAC9BC,UAAU,EAAE,CAAA,CAAA,EADkB,CAClB,CADkB;UAE9BC,WAAW,EAAE,CAAEC,OAAD,CAAD,GAAC,CAAD,EAAyBC,EAAD,CAAxB,GAAwB,CAAxB;QAFiB,CAAzB,CADT,EAAA;MADF,CAAA,MAOO;QACLN,MAAM,CAANA,GAAM,CAANA,GAAc,YAAY,CAAZ,WAAA,CAAyB;UACrCG,UAAU,EAAE,CAAA,CAAA,EADyB,CACzB,CADyB;UAErCC,WAAW,EAAE,CAAEC,OAAD,CAAD,GAAC,CAAD,EAAyBC,EAAD,CAAxB,GAAwB,CAAxB;QAFwB,CAAzB,CAAdN;MAID;IACF;;IAED,OAAA,MAAA;EA3BF,CAA0B;AAAA,CAA1B;;AA8BA,IAAMO,uBAA0C,GAAG;EACjDC,IAAI,EAD6C,QAAA;EAEjDC,eAAe,EAFkC,IAAA;EAGjDC,QAAQ,EAHyC,GAAA;EAIjDC,KAAK,EAAE;AAJ0C,CAAnD;AAOA,OAAO,IAAMC,UAAU,GAAA,aAAGC,UAAU,CAClC,UAAA,IAAA,EAAA,GAAA,EAaK;EAZH,IAAA,QAAA,GAYG,IAZH,CAAA,QAAA;EAAA,IAAA,oBAAA,GAYG,IAZH,CAAA,oBAAA;EAAA,mBAYG,IAZH,CAGEC,OAHF;EAAA,IAGEA,OAHF,6BAAA,KAAA;EAAA,IAAA,OAAA,GAYG,IAZH,CAAA,OAAA;EAAA,IAAA,OAAA,GAYG,IAZH,CAAA,OAAA;EAAA,IAAA,IAAA,GAYG,IAZH,CAAA,IAAA;EAAA,IAAA,KAAA,GAYG,IAZH,CAAA,KAAA;EAAA,IAQEC,EARF,GAYG,IAZH,CAQEA,EARF;EAAA,IASKC,IATL,GAYG,wBAAA,CAAA,IAAA,EAAA,SAAA,CAZH;;EAaA,IAAMjB,YAAY,GAAGkB,KAAK,CAALA,MAAAA,CAAa,IAAIC,QAAQ,CAAZ,KAAA,CAAbD,CAAa,CAAbA,EAArB,OAAA;EAEA,IAAME,SAAS,GAAG,KAAK,CAAL,OAAA,CAAc,YAAM;IACpC,IAAA,EAAA,EAAQ;MACN,OAAOD,QAAQ,CAARA,uBAAAA,CAAP,EAAOA,CAAP;IACD;;IACD,OAAOA,QAAQ,CAAf,IAAA;EAJgB,CAAA,EAKf,CALH,EAKG,CALe,CAAlB;;EAOA,sBAA4CD,KAAK,CAALA,QAAAA,CAA5C,EAA4CA,CAA5C;EAAA;EAAA,IAAM,cAAN;EAAA,IAAM,iBAAN;;EAEA,IAAMG,WAAW,GAAGH,KAAK,CAALA,MAAAA,CAApB,OAAoBA,CAApB;EAEAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAII,cAAc,KAAdA,UAAAA,IAAiCA,cAAc,KAAnD,SAAA,EAAmE;MAAA;;MACjE,IAAMC,eAAe,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,uBAAA,CAAA,EAEhBC,OAFgB,KAAA,IAEhBA,IAAAA,OAFgB,KAAA,KAAA,CAEhBA,GAFgB,KAAA,CAEhBA,GAAAA,OAAO,CAFZ,UAAqB,CAArB;;MAIA,IAAMC,cAAc,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,uBAAA,CAAA,EAEfC,IAFe,KAAA,IAEfA,IAAAA,IAFe,KAAA,KAAA,CAEfA,GAFe,KAAA,CAEfA,GAAAA,IAAI,CAFT,UAAoB,CAApB;;MAKA,IAAMC,cAAc,GAAGL,cAAc,KAAdA,UAAAA,GAAAA,CAAAA,GAAvB,CAAA;MAEA,IAAMM,UAAU,GAAGD,cAAc,GAAA,eAAA,GAAjC,cAAA;MAEAR,QAAQ,CAARA,QAAAA,CAAkB,CAChB;MACAA,QAAQ,CAARA,KAAAA,CAAeS,UAAU,CAFT,KAEhBT,CAFgB,EAGhB,QAAQ,qBAACS,UAAU,CAAVA,IAAD,+DAAR,QAAQ,CAAR,CAAA,YAAA,EAAA,aAAA,CAAA;QACEC,OAAO,EADT,cAAA;QAEEnB,eAAe,EAAE;MAFnB,CAAA,EAHFS,UAGE,CAAA,CAHgB,CAAlBA,EAAAA,KAAAA,CAQS,YAAM;QACb,IAAIG,cAAc,KAAlB,UAAA,EAAmC;UACjCQ,iBAAiB,CAAjBA,SAAiB,CAAjBA;QADF,CAAA,MAEO,IAAIR,cAAc,KAAlB,SAAA,EAAkC;UACvCQ,iBAAiB,CAAjBA,QAAiB,CAAjBA;QACD;MA3B8D,CAcjEX,EAdiE,CA6BjE;IACD;;IAED,IAAIG,cAAc,KAAlB,QAAA,EAAiC;MAC/BS,oBAAoB,IAAIA,oBAAoB,CAA5CA,QAA4C,CAA5CA;IADF,CAAA,MAEO,IAAIT,cAAc,KAAlB,SAAA,EAAkC;MACvCS,oBAAoB,IAAIA,oBAAoB,CAA5CA,SAA4C,CAA5CA;IApCkB,CAAA,CAsCpB;IACA;IACA;IACA;;EAzCFb,CAAAA,EA0CG,CAAA,cAAA,EA1CHA,oBA0CG,CA1CHA;EA4CAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB;IACA,IAAIG,WAAW,CAAXA,OAAAA,KAAAA,OAAAA,IAAmC,CAAvC,OAAA,EAAiD;MAC/CS,iBAAiB,CAAjBA,SAAiB,CAAjBA;IACD;;IAED,IAAA,OAAA,EAAa;MACXA,iBAAiB,CAAjBA,UAAiB,CAAjBA;IACD;;IACDT,WAAW,CAAXA,OAAAA,GAToB,OASpBA,CAToB,CAUpB;EAVFH,CAAAA,EAWG,CArEA,OAqEA,CAXHA,EA1DG,CAuEH;EAEA;;EACA,IAAMc,YAAY,GAChBV,cAAc,KAAdA,QAAAA,IAAAA,IAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAAAA,aAAAA,CAAAA,EAAAA,IAAAA,CAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAAAA,aAAAA,CAAAA,EA3EC,OA2EDA,CADF,CA1EG,CA8EH;EAEA;EACA;EACA;EACA;;EAEA,IAAMW,YAAY,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,aAAA,CAAA,EArFf,OAqFe,CAAlB,CArFG,CAuFH;EACA;EACA;EACA;EACA;EAEA;;;EACA,IAAMhC,MAAM,GAAG,KAAK,CAAL,OAAA,CAAc,YAAM;IACjC;IACA,OAAO,CACLF,iBAAiB,CAAjBA,YAAiB,CAAjBA,CAAAA,YAAAA,EADK,YACLA,CADK,EAAP,KAAO,CAAP;EAFa,CAAA,EASZ,CAAA,YAAA,EAAA,OAAA,EAAA,OAAA,EATH,KASG,CATY,CAAf;EAWA,OAAA,aACE,OAAA,CAAA,SAAA,CACE;EADF,EAAA,aAAA,CAAA,aAAA,CAAA;IAEE,aAAa,EAAE,CAAA,OAAA,GAAA,MAAA,GAFjB,UAAA,CAGE;IACA;IACA;IALF;IAME,KAAK,EAAE,CANT,MAMS,CANT;IAOE,GAAG,EAAEmC;EAPP,CAAA,EAAA,IAAA,CAAA,EAAA,EAAA,EAAA;IAAA,QAAA,EAUGC;EAVH,CAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;IAAA,QAAA,EAAA,YAAA;IAAA,UAAA,EAAA,GAAA;IAAA,YAAA,EAAA;EAAA,CAAA,EADF,KACE,CADF;AAvHG,CAA6B,CAA7B","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { forwardRef } from 'react';\nimport { Animated } from 'react-native';\nimport type {\n  ISupportedTransitions,\n  ITransitionConfig,\n  ITransitionProps,\n} from './types';\n\nconst transformStylesMap = {\n  translateY: true,\n  translateX: true,\n  scale: true,\n  scaleX: true,\n  scaleY: true,\n  rotate: true,\n};\n\nconst defaultStyles = {\n  opacity: 1,\n  translateY: 0,\n  translateX: 0,\n  scale: 1,\n  scaleX: 1,\n  scaleY: 1,\n  rotate: '0deg',\n};\n\nconst getAnimatedStyles = (animateValue: any) => (\n  initial: ISupportedTransitions,\n  to: ISupportedTransitions\n) => {\n  const styles: any = {\n    transform: [],\n  };\n  for (let key in initial) {\n    if (key === 'transition') {\n      continue;\n    }\n\n    if (key in transformStylesMap) {\n      styles.transform?.push({\n        [key]: animateValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [(initial as any)[key], (to as any)[key]],\n        }),\n      } as any);\n    } else {\n      styles[key] = animateValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [(initial as any)[key], (to as any)[key]],\n      });\n    }\n  }\n\n  return styles;\n};\n\nconst defaultTransitionConfig: ITransitionConfig = {\n  type: 'timing',\n  useNativeDriver: true,\n  duration: 250,\n  delay: 0,\n};\n\nexport const Transition = forwardRef(\n  (\n    {\n      children,\n      onTransitionComplete,\n      visible = false,\n      initial,\n      animate,\n      exit,\n      style,\n      as,\n      ...rest\n    }: ITransitionProps,\n    ref: any\n  ) => {\n    const animateValue = React.useRef(new Animated.Value(0)).current;\n\n    const Component = React.useMemo(() => {\n      if (as) {\n        return Animated.createAnimatedComponent(as);\n      }\n      return Animated.View;\n    }, [as]);\n\n    const [animationState, setAnimationState] = React.useState('');\n\n    const prevVisible = React.useRef(visible);\n\n    React.useEffect(() => {\n      if (animationState === 'entering' || animationState === 'exiting') {\n        const entryTransition = {\n          ...defaultTransitionConfig,\n          ...animate?.transition,\n        };\n        const exitTransition = {\n          ...defaultTransitionConfig,\n          ...exit?.transition,\n        };\n\n        const startAnimation = animationState === 'entering' ? 1 : 0;\n\n        const transition = startAnimation ? entryTransition : exitTransition;\n\n        Animated.sequence([\n          // @ts-ignore - delay is present in defaultTransitionConfig\n          Animated.delay(transition.delay),\n          Animated[transition.type ?? 'timing'](animateValue, {\n            toValue: startAnimation,\n            useNativeDriver: true,\n            ...transition,\n          }),\n        ]).start(() => {\n          if (animationState === 'entering') {\n            setAnimationState('entered');\n          } else if (animationState === 'exiting') {\n            setAnimationState('exited');\n          }\n        });\n        // });\n      }\n\n      if (animationState === 'exited') {\n        onTransitionComplete && onTransitionComplete('exited');\n      } else if (animationState === 'entered') {\n        onTransitionComplete && onTransitionComplete('entered');\n      }\n      // if (animationState === 'entering') {\n      //   //\n      // }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [animationState, onTransitionComplete]);\n\n    React.useEffect(() => {\n      // if (!visible) {\n      if (prevVisible.current !== visible && !visible) {\n        setAnimationState('exiting');\n      }\n\n      if (visible) {\n        setAnimationState('entering');\n      }\n      prevVisible.current = visible;\n      // }\n    }, [visible]);\n\n    // If exit animation is present and state is exiting, we replace 'initial' with 'exit' animation\n\n    //  const initialState = { ...defaultStyles, ...initial };\n    const initialState =\n      animationState === 'exited' && exit\n        ? { ...defaultStyles, ...exit }\n        : { ...defaultStyles, ...initial };\n    // const initialState = { ...defaultStyles, ...initial };\n\n    // initial =\n    //   animationState === 'exited'\n    //     ? { ...defaultStyles, ...exit }\n    //     : { ...defaultStyles, ...initial };\n\n    const animateState = { ...defaultStyles, ...animate };\n\n    // const [initialState, setInitialState] = React.useState({\n    //   ...defaultStyles,\n    //   ...initial,\n    // });\n    // console.log('Initial state ', initial);\n\n    // const [animateState] = React.useState({ ...defaultStyles, ...animate });\n    const styles = React.useMemo(() => {\n      // console.log('display state here', initial);\n      return [\n        getAnimatedStyles(animateValue)(\n          initialState as ISupportedTransitions,\n          animateState as ISupportedTransitions\n        ),\n        style,\n      ];\n    }, [animateValue, initial, animate, style]);\n\n    return (\n      <Component\n        // pointerEvents=\"box-none\"\n        pointerEvents={!visible ? 'none' : 'box-none'}\n        // https://github.com/facebook/react-native/issues/23090#issuecomment-710803743\n        // needsOffscreenAlphaCompositing\n        // style={[styles]}\n        style={[styles]}\n        ref={ref}\n        {...rest}\n      >\n        {children}\n      </Component>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}