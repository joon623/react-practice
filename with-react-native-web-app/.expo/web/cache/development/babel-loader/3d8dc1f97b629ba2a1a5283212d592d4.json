{"ast":null,"code":"import _slicedToArray from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nexport function useControllableProp(prop, state) {\n  _s();\n\n  var _React$useRef = React.useRef(prop !== undefined),\n      isControlled = _React$useRef.current;\n\n  var value = isControlled && typeof prop !== 'undefined' ? prop : state;\n  return [isControlled, value];\n}\n\n_s(useControllableProp, \"ZSkqNRXGWdvoWpyo7d6jusWkKlM=\");\n/**\n * React hook for using controlling component state.\n * @param props\n */\n\n\nexport function useControllableState(props) {\n  _s2();\n\n  var valueProp = props.value,\n      defaultValue = props.defaultValue,\n      onChange = props.onChange;\n\n  var _React$useState = React.useState(defaultValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      valueState = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var isControlled = valueProp !== undefined;\n  var value = isControlled ? valueProp : valueState;\n  var updateValue = React.useCallback(function (next) {\n    var nextValue = typeof next === 'function' ? next(value) : next;\n\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n\n    onChange && onChange(nextValue);\n  }, [isControlled, onChange, value]);\n  return [value, updateValue];\n}\n\n_s2(useControllableState, \"2geu1WfIZTJ5Oe08rqkMQoNiWMg=\");\n\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/hooks/useControllableProp.ts"],"names":["useControllableProp","isControlled","React","prop","value","useControllableState","valueProp","defaultValue","onChange","props","valueState","setValue","updateValue","nextValue","next"],"mappings":";;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AAEA,OAAO,SAAA,mBAAA,CAAA,IAAA,EAAA,KAAA,EAA+D;EAAA,EAAA;;EACpE,IAAA,aAAA,GAAkCE,KAAK,CAALA,MAAAA,CAAaC,IAAI,KAAnD,SAAkCD,CAAlC;EAAA,IAAiBD,YAAjB,GAAA,aAAA,CAAA,OAAA;;EACA,IAAMG,KAAK,GAAGH,YAAY,IAAI,OAAA,IAAA,KAAhBA,WAAAA,GAAAA,IAAAA,GAAd,KAAA;EACA,OAAO,CAAA,YAAA,EAAP,KAAO,CAAP;AACD;;GAJeD,mB;AAyBhB;AACA;AACA;AACA;;;AACA,OAAO,SAAA,oBAAA,CAAA,KAAA,EAAsE;EAAA,GAAA;;EAC3E,IAAeM,SAAf,GAAqDG,KAArD,CAAA,KAAA;EAAA,IAA0BF,YAA1B,GAAqDE,KAArD,CAAA,YAAA;EAAA,IAAwCD,QAAxC,GAAqDC,KAArD,CAAA,QAAA;;EAEA,IAAA,eAAA,GAA+BP,KAAK,CAALA,QAAAA,CAA/B,YAA+BA,CAA/B;EAAA,IAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;EAAA,IAAOQ,UAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;EAAA,IAAmBC,QAAnB,GAAA,gBAAA,CAAA,CAAA,CAAA;;EACA,IAAMV,YAAY,GAAGK,SAAS,KAA9B,SAAA;EAEA,IAAMF,KAAK,GAAGH,YAAY,GAAA,SAAA,GAA1B,UAAA;EAEA,IAAMW,WAAW,GAAG,KAAK,CAAL,WAAA,CAClB,UAAA,IAAA,EAAe;IACb,IAAMC,SAAS,GAAG,OAAA,IAAA,KAAA,UAAA,GAA6BC,IAAI,CAAjC,KAAiC,CAAjC,GAAlB,IAAA;;IACA,IAAI,CAAJ,YAAA,EAAmB;MACjBH,QAAQ,CAARA,SAAQ,CAARA;IACD;;IACDH,QAAQ,IAAIA,QAAQ,CAApBA,SAAoB,CAApBA;EANgB,CAAA,EAQlB,CAAA,YAAA,EAAA,QAAA,EARF,KAQE,CARkB,CAApB;EAWA,OAAO,CAAA,KAAA,EAAP,WAAO,CAAP;AACD;;IApBeH,oB","sourcesContent":["import React from 'react';\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const { current: isControlled } = React.useRef(prop !== undefined);\n  const value = isControlled && typeof prop !== 'undefined' ? prop : state;\n  return [isControlled, value] as const;\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T;\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T);\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (value: T) => void;\n  /**\n   * The component name (for warnings)\n   */\n  name?: string;\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const { value: valueProp, defaultValue, onChange } = props;\n\n  const [valueState, setValue] = React.useState(defaultValue as T);\n  const isControlled = valueProp !== undefined;\n\n  const value = isControlled ? (valueProp as T) : valueState;\n\n  const updateValue = React.useCallback(\n    (next: any) => {\n      const nextValue = typeof next === 'function' ? next(value) : next;\n      if (!isControlled) {\n        setValue(nextValue);\n      }\n      onChange && onChange(nextValue);\n    },\n    [isControlled, onChange, value]\n  );\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>];\n}\n"]},"metadata":{},"sourceType":"module"}