{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ExecutionEnvironment = require(\"fbjs/lib/ExecutionEnvironment\");\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction isScreenReaderEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(true);\n  });\n}\n\nvar prefersReducedMotionMedia = _ExecutionEnvironment.canUseDOM ? window.matchMedia('(prefers-reduced-motion: reduce)') : null;\n\nfunction isReduceMotionEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(prefersReducedMotionMedia ? prefersReducedMotionMedia.matches : true);\n  });\n}\n\nvar handlers = {};\nvar AccessibilityInfo = {\n  /**\n   * Query whether a screen reader is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   */\n  isScreenReaderEnabled: isScreenReaderEnabled,\n\n  /**\n   * Query whether the user prefers reduced motion.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   */\n  isReduceMotionEnabled: isReduceMotionEnabled,\n\n  /**\n   * Deprecated\n   */\n  fetch: isScreenReaderEnabled,\n\n  /**\n   * Add an event handler. Supported events: reduceMotionChanged\n   */\n  addEventListener: function addEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      if (!prefersReducedMotionMedia) {\n        return;\n      }\n\n      var listener = function listener(event) {\n        handler(event.matches);\n      };\n\n      prefersReducedMotionMedia.addEventListener('change', listener);\n      handlers[handler] = listener;\n    }\n\n    return {\n      remove: function remove() {\n        return AccessibilityInfo.removeEventListener(eventName, handler);\n      }\n    };\n  },\n\n  /**\n   * Set accessibility focus to a react component.\n   */\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\n\n  /**\n   * Post a string to be announced by the screen reader.\n   */\n  announceForAccessibility: function announceForAccessibility(announcement) {},\n\n  /**\n   * Remove an event handler.\n   */\n  removeEventListener: function removeEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      var listener = handlers[handler];\n\n      if (!listener || !prefersReducedMotionMedia) {\n        return;\n      }\n\n      prefersReducedMotionMedia.removeEventListener('change', listener);\n    }\n\n    return;\n  }\n};\nvar _default = AccessibilityInfo;\nexports[\"default\"] = _default;\nmodule.exports = exports[\"default\"];\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/react-native-web/dist/cjs/exports/AccessibilityInfo/index.js"],"names":["exports","_ExecutionEnvironment","require","resolve","prefersReducedMotionMedia","window","handlers","AccessibilityInfo","isScreenReaderEnabled","isReduceMotionEnabled","fetch","addEventListener","eventName","listener","handler","event","remove","setAccessibilityFocus","announceForAccessibility","removeEventListener","_default","module"],"mappings":"AAAA;;AAEAA,OAAO,CAAPA,UAAAA,GAAAA,IAAAA;AACAA,OAAO,CAAPA,SAAO,CAAPA,GAAkB,KAAlBA,CAAAA;;AAEA,IAAIC,qBAAqB,GAAGC,OAAO,CAAnC,+BAAmC,CAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAA,qBAAA,GAAiC;EAC/B,OAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAA2B;IAC5CC,OAAO,CAAPA,IAAO,CAAPA;EADF,CAAO,CAAP;AAGD;;AAED,IAAIC,yBAAyB,GAAGH,qBAAqB,CAArBA,SAAAA,GAAkCI,MAAM,CAANA,UAAAA,CAAlCJ,kCAAkCI,CAAlCJ,GAAhC,IAAA;;AAEA,SAAA,qBAAA,GAAiC;EAC/B,OAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAA2B;IAC5CE,OAAO,CAACC,yBAAyB,GAAGA,yBAAyB,CAA5B,OAAA,GAAjCD,IAAO,CAAPA;EADF,CAAO,CAAP;AAGD;;AAED,IAAIG,QAAQ,GAAZ,EAAA;AACA,IAAIC,iBAAiB,GAAG;EACtB;AACF;AACA;AACA;AACA;AACA;EACEC,qBAAqB,EAPC,qBAAA;;EAStB;AACF;AACA;AACA;AACA;AACA;EACEC,qBAAqB,EAfC,qBAAA;;EAiBtB;AACF;AACA;EACEC,KAAK,EApBiB,qBAAA;;EAsBtB;AACF;AACA;EACEC,gBAAgB,EAAE,SAAA,gBAAA,CAAA,SAAA,EAAA,OAAA,EAA8C;IAC9D,IAAIC,SAAS,KAAb,qBAAA,EAAyC;MACvC,IAAI,CAAJ,yBAAA,EAAgC;QAC9B;MACD;;MAED,IAAIC,QAAQ,GAAG,SAAA,QAAA,CAAA,KAAA,EAAyB;QACtCC,OAAO,CAACC,KAAK,CAAbD,OAAO,CAAPA;MADF,CAAA;;MAIAV,yBAAyB,CAAzBA,gBAAAA,CAAAA,QAAAA,EAAAA,QAAAA;MACAE,QAAQ,CAARA,OAAQ,CAARA,GAAAA,QAAAA;IACD;;IAED,OAAO;MACLU,MAAM,EAAE,SAAA,MAAA,GAAkB;QACxB,OAAOT,iBAAiB,CAAjBA,mBAAAA,CAAAA,SAAAA,EAAP,OAAOA,CAAP;MACD;IAHI,CAAP;EAvCoB,CAAA;;EA8CtB;AACF;AACA;EACEU,qBAAqB,EAAE,SAAA,qBAAA,CAAA,QAAA,EAAyC,CAjD1C,CAAA;;EAmDtB;AACF;AACA;EACEC,wBAAwB,EAAE,SAAA,wBAAA,CAAA,YAAA,EAAgD,CAtDpD,CAAA;;EAwDtB;AACF;AACA;EACEC,mBAAmB,EAAE,SAAA,mBAAA,CAAA,SAAA,EAAA,OAAA,EAAiD;IACpE,IAAIP,SAAS,KAAb,qBAAA,EAAyC;MACvC,IAAIC,QAAQ,GAAGP,QAAQ,CAAvB,OAAuB,CAAvB;;MAEA,IAAI,CAAA,QAAA,IAAa,CAAjB,yBAAA,EAA6C;QAC3C;MACD;;MAEDF,yBAAyB,CAAzBA,mBAAAA,CAAAA,QAAAA,EAAAA,QAAAA;IACD;;IAED;EACD;AAvEqB,CAAxB;AAyEA,IAAIgB,QAAQ,GAAZ,iBAAA;AACApB,OAAO,CAAPA,SAAO,CAAPA,GAAAA,QAAAA;AACAqB,MAAM,CAANA,OAAAA,GAAiBrB,OAAO,CAAxBqB,SAAwB,CAAxBA","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _ExecutionEnvironment = require(\"fbjs/lib/ExecutionEnvironment\");\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nfunction isScreenReaderEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(true);\n  });\n}\n\nvar prefersReducedMotionMedia = _ExecutionEnvironment.canUseDOM ? window.matchMedia('(prefers-reduced-motion: reduce)') : null;\n\nfunction isReduceMotionEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(prefersReducedMotionMedia ? prefersReducedMotionMedia.matches : true);\n  });\n}\n\nvar handlers = {};\nvar AccessibilityInfo = {\n  /**\n   * Query whether a screen reader is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   */\n  isScreenReaderEnabled: isScreenReaderEnabled,\n\n  /**\n   * Query whether the user prefers reduced motion.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   */\n  isReduceMotionEnabled: isReduceMotionEnabled,\n\n  /**\n   * Deprecated\n   */\n  fetch: isScreenReaderEnabled,\n\n  /**\n   * Add an event handler. Supported events: reduceMotionChanged\n   */\n  addEventListener: function addEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      if (!prefersReducedMotionMedia) {\n        return;\n      }\n\n      var listener = function listener(event) {\n        handler(event.matches);\n      };\n\n      prefersReducedMotionMedia.addEventListener('change', listener);\n      handlers[handler] = listener;\n    }\n\n    return {\n      remove: function remove() {\n        return AccessibilityInfo.removeEventListener(eventName, handler);\n      }\n    };\n  },\n\n  /**\n   * Set accessibility focus to a react component.\n   */\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\n\n  /**\n   * Post a string to be announced by the screen reader.\n   */\n  announceForAccessibility: function announceForAccessibility(announcement) {},\n\n  /**\n   * Remove an event handler.\n   */\n  removeEventListener: function removeEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      var listener = handlers[handler];\n\n      if (!listener || !prefersReducedMotionMedia) {\n        return;\n      }\n\n      prefersReducedMotionMedia.removeEventListener('change', listener);\n    }\n\n    return;\n  }\n};\nvar _default = AccessibilityInfo;\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"module"}