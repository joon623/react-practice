{"ast":null,"code":"import _slicedToArray from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/core/hybrid-overlay/HybridProvider.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport Platform from \"react-native-web/dist/cjs/exports/Platform\";\nimport { HybridContext } from './Context';\nimport { useModeManager } from './../color-mode/hooks';\nimport { keyboardDismissHandlerManager } from '../../hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar HybridProvider = function HybridProvider(_ref) {\n  _s();\n\n  var children = _ref.children,\n      _ref$options = _ref.options,\n      _ref$options$initialC = _ref$options.initialColorMode,\n      initialColorMode = _ref$options$initialC === void 0 ? 'light' : _ref$options$initialC,\n      _ref$options$accessib = _ref$options.accessibleColors,\n      isTextColorAccessible = _ref$options$accessib === void 0 ? false : _ref$options$accessib,\n      useSystemColorMode = _ref$options.useSystemColorMode,\n      colorModeManager = _ref.colorModeManager; // Color-mode content\n\n  var _useModeManager = useModeManager(initialColorMode, useSystemColorMode, colorModeManager),\n      colorMode = _useModeManager.colorMode,\n      setColorMode = _useModeManager.setColorMode;\n\n  var toggleColorMode = React.useCallback(function () {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]); // Accessible color hook\n\n  var _React$useState = React.useState(isTextColorAccessible),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      accessibleColors = _React$useState2[0],\n      setAccessibleColors = _React$useState2[1];\n\n  var contextValue = useMemo(function () {\n    return {\n      colorMode: {\n        colorMode: colorMode,\n        toggleColorMode: toggleColorMode,\n        setColorMode: setColorMode,\n        accessibleColors: accessibleColors,\n        setAccessibleColors: setAccessibleColors\n      }\n    };\n  }, [colorMode, toggleColorMode, setColorMode, accessibleColors, setAccessibleColors]);\n  React.useEffect(function () {\n    var escapeKeyListener = null;\n\n    if (Platform.OS === 'web') {\n      escapeKeyListener = function escapeKeyListener(e) {\n        if (e.key === 'Escape') {\n          if (keyboardDismissHandlerManager.length() > 0) {\n            var lastHandler = keyboardDismissHandlerManager.pop();\n            lastHandler();\n          }\n        }\n      };\n\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n\n    return function () {\n      if (Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(HybridContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(HybridProvider, \"HAxpi8LJALCnYkdpucr3MmtVpt8=\", false, function () {\n  return [useModeManager];\n});\n\n_c = HybridProvider;\nexport default HybridProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"HybridProvider\");\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/core/hybrid-overlay/HybridProvider.tsx"],"names":["HybridProvider","children","options","initialColorMode","accessibleColors","isTextColorAccessible","useSystemColorMode","colorModeManager","colorMode","setColorMode","useModeManager","toggleColorMode","setAccessibleColors","React","contextValue","useMemo","escapeKeyListener","Platform","e","keyboardDismissHandlerManager","lastHandler","document"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport { Platform } from 'react-native';\nimport { HybridContext } from './Context';\nimport { useModeManager } from './../color-mode/hooks';\nimport type { IColorModeProviderProps } from './../color-mode';\nimport { keyboardDismissHandlerManager } from '../../hooks';\n\nconst HybridProvider = ({\n  children,\n  options: {\n    initialColorMode = 'light',\n    accessibleColors: isTextColorAccessible = false,\n    useSystemColorMode,\n  },\n  colorModeManager,\n}: IColorModeProviderProps) => {\n  // Color-mode content\n  const { colorMode, setColorMode } = useModeManager(\n    initialColorMode,\n    useSystemColorMode,\n    colorModeManager\n  );\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n\n  // Accessible color hook\n  const [accessibleColors, setAccessibleColors] = React.useState<boolean>(\n    isTextColorAccessible\n  );\n\n  const contextValue = useMemo(() => {\n    return {\n      colorMode: {\n        colorMode,\n        toggleColorMode,\n        setColorMode,\n        accessibleColors,\n        setAccessibleColors,\n      },\n    };\n  }, [\n    colorMode,\n    toggleColorMode,\n    setColorMode,\n    accessibleColors,\n    setAccessibleColors,\n  ]);\n\n  React.useEffect(() => {\n    let escapeKeyListener: any = null;\n\n    if (Platform.OS === 'web') {\n      escapeKeyListener = (e: KeyboardEvent) => {\n        if (e.key === 'Escape') {\n          if (keyboardDismissHandlerManager.length() > 0) {\n            const lastHandler: any = keyboardDismissHandlerManager.pop();\n            lastHandler();\n          }\n        }\n      };\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n\n    return () => {\n      if (Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n\n  return (\n    <HybridContext.Provider value={contextValue}>\n      {children}\n    </HybridContext.Provider>\n  );\n};\n\nexport default HybridProvider;\n"]},"metadata":{},"sourceType":"module"}