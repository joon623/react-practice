{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeRefs = mergeRefs;\nexports.composeEventHandlers = composeEventHandlers;\n\nfunction mergeRefs(refs) {\n  return function (value) {\n    refs.forEach(function (ref) {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref != null) {\n        ref.current = value;\n      }\n    });\n  };\n}\n\nfunction composeEventHandlers(originalEventHandler, ourEventHandler) {\n  return function handleEvent(event) {\n    originalEventHandler === null || originalEventHandler === void 0 ? void 0 : originalEventHandler(event);\n    ourEventHandler === null || ourEventHandler === void 0 ? void 0 : ourEventHandler(event);\n  };\n}","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/commonjs/utils/mergeRefs.js"],"names":["Object","value","exports","refs","ref","originalEventHandler","ourEventHandler"],"mappings":"AAAA;;AAEAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7CD;AAGAE,OAAO,CAAPA,SAAAA,GAAAA,SAAAA;AACAA,OAAO,CAAPA,oBAAAA,GAAAA,oBAAAA;;AAEA,SAAA,SAAA,CAAA,IAAA,EAAyB;EACvB,OAAOD,UAAAA,KAAK,EAAI;IACdE,IAAI,CAAJA,OAAAA,CAAaC,UAAAA,GAAG,EAAI;MAClB,IAAI,OAAA,GAAA,KAAJ,UAAA,EAA+B;QAC7BA,GAAG,CAAHA,KAAG,CAAHA;MADF,CAAA,MAEO,IAAIA,GAAG,IAAP,IAAA,EAAiB;QACtBA,GAAG,CAAHA,OAAAA,GAAAA,KAAAA;MACD;IALHD,CAAAA;EADF,CAAA;AASD;;AAED,SAAA,oBAAA,CAAA,oBAAA,EAAA,eAAA,EAAqE;EACnE,OAAO,SAAA,WAAA,CAAA,KAAA,EAA4B;IACjCE,oBAAoB,KAApBA,IAAAA,IAAiCA,oBAAoB,KAAK,KAA1DA,CAAAA,GAAmE,KAAnEA,CAAAA,GAA4EA,oBAAoB,CAAhGA,KAAgG,CAAhGA;IACAC,eAAe,KAAfA,IAAAA,IAA4BA,eAAe,KAAK,KAAhDA,CAAAA,GAAyD,KAAzDA,CAAAA,GAAkEA,eAAe,CAAjFA,KAAiF,CAAjFA;EAFF,CAAA;AAID","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeRefs = mergeRefs;\nexports.composeEventHandlers = composeEventHandlers;\n\nfunction mergeRefs(refs) {\n  return value => {\n    refs.forEach(ref => {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref != null) {\n        ref.current = value;\n      }\n    });\n  };\n}\n\nfunction composeEventHandlers(originalEventHandler, ourEventHandler) {\n  return function handleEvent(event) {\n    originalEventHandler === null || originalEventHandler === void 0 ? void 0 : originalEventHandler(event);\n    ourEventHandler === null || ourEventHandler === void 0 ? void 0 : ourEventHandler(event);\n  };\n}\n//# sourceMappingURL=mergeRefs.js.map"]},"metadata":{},"sourceType":"script"}