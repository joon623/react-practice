{"ast":null,"code":"var _this = this;\n\nvar _excluded = [\"space\"],\n    _excluded2 = [\"children\", \"direction\", \"reversed\", \"divider\", \"size\"];\nvar _jsxFileName = \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/components/primitives/Stack/Stack.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { default as Box } from '../Box';\nimport { getSpacedChildren } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { ResponsiveQueryContext } from '../../../utils/useResponsiveQuery/ResponsiveQueryProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Stack = function Stack(_ref, ref) {\n  var space = _ref.space,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var dir = props.direction;\n\n  var _usePropsResolution = usePropsResolution('Stack', _objectSpread(_objectSpread({}, props), {}, {\n    size: space\n  }), {\n    isDisabled: props.isDisabled,\n    isHovered: props.isHovered,\n    isFocused: props.isFocused,\n    isInvalid: props.isInvalid,\n    isReadOnly: props.isReadOnly\n  }, {\n    resolveResponsively: ['space', 'direction']\n  }),\n      children = _usePropsResolution.children,\n      direction = _usePropsResolution.direction,\n      reversed = _usePropsResolution.reversed,\n      divider = _usePropsResolution.divider,\n      size = _usePropsResolution.size,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  var disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries; //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, _objectSpread(_objectSpread({\n    flexDirection: dir\n  }, resolvedProps), {}, {\n    ref: ref // @ts-ignore\n    ,\n    gap: disableCSSMediaQueries ? undefined : size,\n    children: getSpacedChildren(children, size, direction === 'row' ? 'X' : 'Y', reversed ? 'reverse' : 'normal', divider)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, _this);\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Stack));","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/components/primitives/Stack/Stack.tsx"],"names":["default","Stack","space","props","dir","size","usePropsResolution","isDisabled","isHovered","isFocused","isInvalid","isReadOnly","resolveResponsively","responsiveQueryContext","React","disableCSSMediaQueries","useHasResponsiveProps","getSpacedChildren","direction","reversed","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAASA,OAAO,IAAhB,GAAA,QAAA,QAAA;AACA,SAAA,iBAAA,QAAA,gBAAA;AACA,SAAA,kBAAA,QAAA,8BAAA;AACA,SAAA,qBAAA,QAAA,sCAAA;AAEA,SAAA,sBAAA,QAAA,2DAAA;;;AAgDA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAA,IAAA,EAAA,GAAA,EAAiD;EAAhD,IAAEC,KAAF,GAAgD,IAAhD,CAAEA,KAAF;EAAA,IAAYC,KAAZ,GAAgD,wBAAA,CAAA,IAAA,EAAA,SAAA,CAAhD;;EACb,IAAMC,GAAG,GAAGD,KAAK,CAAjB,SAAA;;EACA,IAAA,mBAAA,GAOSG,kBAAkB,CAAA,OAAA,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;IAEbD,IAAI,EAAEH;EAFO,CAAA,CAAA,EAGzB;IACEK,UAAU,EAAEJ,KAAK,CADnB,UAAA;IAEEK,SAAS,EAAEL,KAAK,CAFlB,SAAA;IAGEM,SAAS,EAAEN,KAAK,CAHlB,SAAA;IAIEO,SAAS,EAAEP,KAAK,CAJlB,SAAA;IAKEQ,UAAU,EAAER,KAAK,CAACQ;EALpB,CAHyB,EAUzB;IAAEC,mBAAmB,EAAE,CAAA,OAAA,EAAA,WAAA;EAAvB,CAVyB,CAP3B;EAAA,IAAM,QAAN,GAAA,mBAAA,CAAM,QAAN;EAAA,IAAM,SAAN,GAAA,mBAAA,CAAM,SAAN;EAAA,IAAM,QAAN,GAAA,mBAAA,CAAM,QAAN;EAAA,IAAM,OAAN,GAAA,mBAAA,CAAM,OAAN;EAAA,IAKEP,IALF,GAAA,mBAAA,CAKEA,IALF;EAAA,IAAA,aAAA,GAAA,wBAAA,CAAA,mBAAA,EAAA,UAAA,CAAA;;EAoBA,IAAMQ,sBAAsB,GAAGC,KAAK,CAALA,UAAAA,CAA/B,sBAA+BA,CAA/B;EACA,IAAMC,sBAAsB,GAAGF,sBAAsB,CAvBQ,sBAuB7D,CAvB6D,CAyB7D;;EACA,IAAIG,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EACD;;EAED,OAAA,aACE,OAAA,CAAA,GAAA,EAAA,aAAA,CAAA,aAAA,CAAA;IACE,aAAa,EAAEZ;EADjB,CAAA,EAAA,aAAA,CAAA,EAAA,EAAA,EAAA;IAGE,GAAG,EAHL,GAAA,CAIE;IAJF;IAKE,GAAG,EAAEW,sBAAsB,GAAA,SAAA,GAL7B,IAAA;IAAA,QAAA,EAOGE,iBAAiB,CAAA,QAAA,EAAA,IAAA,EAGhBC,SAAS,KAATA,KAAAA,GAAAA,GAAAA,GAHgB,GAAA,EAIhBC,QAAQ,GAAA,SAAA,GAJQ,QAAA,EAAA,OAAA;EAPpB,CAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;IAAA,QAAA,EAAA,YAAA;IAAA,UAAA,EAAA,EAAA;IAAA,YAAA,EAAA;EAAA,CAAA,EADF,KACE,CADF;AA9BF,CAAA;;AAiDA,eAAA,aAAeC,IAAI,EAAA,aAACC,UAAU,CAA9B,KAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { default as Box, InterfaceBoxProps } from '../Box';\nimport { getSpacedChildren } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { CustomProps, ResponsiveValue, SpaceType } from '../../types';\nimport { ResponsiveQueryContext } from '../../../utils/useResponsiveQuery/ResponsiveQueryProvider';\n\nexport interface InterfaceStackProps extends InterfaceBoxProps<IStackProps> {\n  /**\n   * The divider element to use between elements.\n   */\n  divider?: JSX.Element;\n  /**\n   * The space between each stack item. Accepts Responsive values\n   */\n  space?: ResponsiveValue<\n    'gutter' | '2xs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | SpaceType\n  >;\n  /**\n   * Determines whether to reverse the direction of Stack Items.\n   */\n  reversed?: boolean;\n  /**\n   * The direction of the Stack Items.\n   * @default column\n   */\n  direction?: ResponsiveValue<\n    'column' | 'row' | 'column-reverse' | 'row-reverse'\n  >;\n  /**\n   * If true, the Stack will be in hovered state.\n   */\n  isHovered?: boolean;\n  /**\n   * If true, the Stack will be focused.\n   */\n  isFocused?: boolean;\n  /**\n   * If true, the Stack will be disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * If true, the Stack will be invalid.\n   */\n  isInvalid?: boolean;\n  /**\n   * If true, prevents the value of the children from being edited. Used with FormControls.\n   */\n  isReadOnly?: boolean;\n}\n\nexport type IStackProps = InterfaceStackProps & CustomProps<'Stack'>;\n\nconst Stack = ({ space, ...props }: IStackProps, ref?: any) => {\n  const dir = props.direction;\n  const {\n    children,\n    direction,\n    reversed,\n    divider,\n    size,\n    ...resolvedProps\n  }: any = usePropsResolution(\n    'Stack',\n    { ...props, size: space },\n    {\n      isDisabled: props.isDisabled,\n      isHovered: props.isHovered,\n      isFocused: props.isFocused,\n      isInvalid: props.isInvalid,\n      isReadOnly: props.isReadOnly,\n    },\n    { resolveResponsively: ['space', 'direction'] }\n  );\n\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      flexDirection={dir}\n      {...resolvedProps}\n      ref={ref}\n      // @ts-ignore\n      gap={disableCSSMediaQueries ? undefined : size}\n    >\n      {getSpacedChildren(\n        children,\n        size,\n        direction === 'row' ? 'X' : 'Y',\n        reversed ? 'reverse' : 'normal',\n        divider\n      )}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Stack));\n"]},"metadata":{},"sourceType":"module"}