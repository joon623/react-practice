{"ast":null,"code":"import _asyncToGenerator from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport _regeneratorRuntime from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport useColorScheme from \"react-native-web/dist/cjs/exports/useColorScheme\";\nexport var useColorMode = function useColorMode() {\n  _s();\n\n  var _React$useContext = React.useContext(HybridContext),\n      colorModeContext = _React$useContext.colorMode;\n\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n\n  return colorModeContext;\n};\n\n_s(useColorMode, \"ijWpSq89Dk+m1T0EDxx+oj16Etk=\");\n\nexport function useColorModeValue(light, dark) {\n  _s2();\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return colorMode === 'dark' ? dark : light;\n}\n\n_s2(useColorModeValue, \"2FlznkK71qNOMfMHVcz5TMepWEE=\", false, function () {\n  return [useColorMode];\n});\n\nexport function useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  _s3();\n\n  var systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  var _useState = useState(initialColorMode),\n      colorMode = _useState[0],\n      setRawMode = _useState[1];\n\n  var setColorMode = React.useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(val) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!colorModeManager) {\n                _context.next = 3;\n                break;\n              }\n\n              _context.next = 3;\n              return colorModeManager.set(val);\n\n            case 3:\n              setRawMode(val);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [colorModeManager]); // For initial setting initial color mode from storage\n\n  useEffect(function () {\n    if (colorModeManager) {\n      (function () {\n        var _getMode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          var value;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return colorModeManager.get(initialColorMode);\n\n                case 2:\n                  value = _context2.sent;\n\n                  if (value && value !== colorMode) {\n                    setRawMode(value);\n                  }\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        function getMode() {\n          return _getMode.apply(this, arguments);\n        }\n\n        return getMode;\n      })()();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]); // Set system color mode only when user has not passed a colorModeManager\n\n  useEffect(function () {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  };\n}\n\n_s3(useModeManager, \"hERQdoGCzLssPXpOCVG78d5mpNU=\", false, function () {\n  return [useColorScheme];\n});\n\nexport function useAccessibleColors() {\n  _s4();\n\n  var _React$useContext2 = React.useContext(HybridContext),\n      colorModeContext = _React$useContext2.colorMode;\n\n  var toggleAccessibleColors = function toggleAccessibleColors() {\n    return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  };\n\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}\n\n_s4(useAccessibleColors, \"ijWpSq89Dk+m1T0EDxx+oj16Etk=\");\n\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/module/core/color-mode/hooks.js"],"names":["useColorMode","colorModeContext","React","useColorModeValue","colorMode","useModeManager","systemColorMode","useColorScheme","initialColorMode","setRawMode","useState","setColorMode","colorModeManager","useEffect","value","useAccessibleColors","toggleAccessibleColors"],"mappings":";;;;;;;;AAAA,OAAA,KAAA,IAAA,QAAA,EAAA,SAAA,QAAA,OAAA;AACA,SAAA,aAAA,QAAA,6BAAA;;AAEA,OAAO,IAAMA,YAAY,GAAG,SAAfA,YAAe,GAAM;EAAA,EAAA;;EAChC,IAAA,iBAAA,GAEIE,KAAK,CAALA,UAAAA,CAFJ,aAEIA,CAFJ;EAAA,IACaD,gBADb,GAAA,iBAAA,CAAA,SAAA;;EAIA,IAAIA,gBAAgB,KAApB,SAAA,EAAoC;IAClC,MAAM,IAAA,KAAA,CAAN,uDAAM,CAAN;EACD;;EAED,OAAA,gBAAA;AATK,CAAA;;GAAMD,Y;;AAWb,OAAO,SAAA,iBAAA,CAAA,KAAA,EAAA,IAAA,EAAwC;EAAA,GAAA;;EAC7C,IAAA,aAAA,GAEIA,YAFJ,EAAA;EAAA,IACEI,SADF,GAAA,aAAA,CAAA,SAAA;;EAGA,OAAOA,SAAS,KAATA,MAAAA,GAAAA,IAAAA,GAAP,KAAA;AACD;;IALeD,iB;UAGVH,Y;;;AAGN,OAAO,SAAA,cAAA,CAAA,gBAAA,EAAA,kBAAA,EAAA,gBAAA,EAAgF;EAAA,GAAA;;EACrF,IAAMM,eAAe,GAAGC,cAAxB,EAAA;;EAEA,IAAA,kBAAA,EAAwB;IACtBC,gBAAgB,GAAhBA,eAAAA;EACD;;EAED,IAAA,SAAA,GAAgCE,QAAQ,CAAxC,gBAAwC,CAAxC;EAAA,IAAON,SAAP,GAAA,SAAA,CAAA,CAAA,CAAA;EAAA,IAAkBK,UAAlB,GAAA,SAAA,CAAA,CAAA,CAAA;;EACA,IAAME,YAAY,GAAG,KAAK,CAAL,WAAA,EAAA,aAAA,YAAA;IAAA,IAAA,IAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAkB,SAAA,OAAA,CAAA,GAAA,EAAA;MAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;QAAA,OAAA,CAAA,EAAA;UAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;YAAA,KAAA,CAAA;cAAA,IAAA,CAAA,gBAAA,EAAA;gBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;gBAAA;cAAA;;cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;cAAA,OAE7BC,gBAAgB,CAAhBA,GAAAA,CAF6B,GAE7BA,CAF6B;;YAAA,KAAA,CAAA;cAKrCH,UAAU,CAAVA,GAAU,CAAVA;;YALqC,KAAA,CAAA;YAAA,KAAA,KAAA;cAAA,OAAA,QAAA,CAAA,IAAA,EAAA;UAAA;QAAA;MAAA,CAAA,EAAA,OAAA,CAAA;IAAlB,CAAA,CAAA,CAAA;;IAAA,OAAA,UAAA,EAAA,EAAA;MAAA,OAAA,IAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;IAAA,CAAA;EAAA,CAAA,EAAA,EAMlB,CAdkF,gBAclF,CANkB,CAArB,CARqF,CAc7D;;EAExBI,SAAS,CAAC,YAAM;IACd,IAAA,gBAAA,EAAsB;MACpB,CAAA,YAAA;QAAA,IAAA,QAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAC,SAAA,QAAA,GAAA;UAAA,IAAA,KAAA;UAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;YAAA,OAAA,CAAA,EAAA;cAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;gBAAA,KAAA,CAAA;kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;kBAAA,OACmBD,gBAAgB,CAAhBA,GAAAA,CADnB,gBACmBA,CADnB;;gBAAA,KAAA,CAAA;kBACKE,KADL,GAAA,SAAA,CAAA,IACKA;;kBAEJ,IAAIA,KAAK,IAAIA,KAAK,KAAlB,SAAA,EAAkC;oBAChCL,UAAU,CAAVA,KAAU,CAAVA;kBACD;;gBALF,KAAA,CAAA;gBAAA,KAAA,KAAA;kBAAA,OAAA,SAAA,CAAA,IAAA,EAAA;cAAA;YAAA;UAAA,CAAA,EAAA,QAAA,CAAA;QAAD,CAAA,CAAA,CAAA;;QAAA,SAAA,OAAA,GAAA;UAAA,OAAA,QAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;QAAA;;QAAA,OAAA,OAAA;MAAA,CAAA;IAOD;EATM,CAAA,EAUN,CAAA,SAAA,EAAA,gBAAA,EA1BkF,gBA0BlF,CAVM,CAATI,CAhBqF,CA0BhC;;EAErDA,SAAS,CAAC,YAAM;IACd,IAAI,CAAA,gBAAA,IAAJ,kBAAA,EAA6C;MAC3CJ,UAAU,CAAVA,eAAU,CAAVA;IACD;EAHM,CAAA,EAIN,CAAA,eAAA,EAAA,gBAAA,EAAA,kBAAA,EAJHI,UAIG,CAJM,CAATA;EAKA,OAAO;IACLT,SAAS,EADJ,SAAA;IAELO,YAAY,EAAZA;EAFK,CAAP;AAID;;IArCeN,c;UACUE,c;;;AAqC1B,OAAO,SAAA,mBAAA,GAA+B;EAAA,GAAA;;EACpC,IAAA,kBAAA,GAEIL,KAAK,CAALA,UAAAA,CAFJ,aAEIA,CAFJ;EAAA,IACaD,gBADb,GAAA,kBAAA,CAAA,SAAA;;EAIA,IAAMe,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAA;IAAA,OAAMf,gBAAgB,CAAhBA,mBAAAA,CAAqC,CAACA,gBAAgB,CAA5D,gBAAMA,CAAN;EAA/B,CAAA;;EAEA,OAAO,CAACA,gBAAgB,CAAjB,gBAAA,EAAoCA,gBAAgB,CAApD,mBAAA,EAAP,sBAAO,CAAP;AACD;;IARec,mB","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport { useColorScheme } from 'react-native';\nexport const useColorMode = () => {\n  const {\n    colorMode: colorModeContext\n  } = React.useContext(HybridContext);\n\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n\n  return colorModeContext;\n};\nexport function useColorModeValue(light, dark) {\n  const {\n    colorMode\n  } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\nexport function useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  const systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState(initialColorMode);\n  const setColorMode = React.useCallback(async val => {\n    if (colorModeManager) {\n      await colorModeManager.set(val);\n    }\n\n    setRawMode(val);\n  }, [colorModeManager]); // For initial setting initial color mode from storage\n\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]); // Set system color mode only when user has not passed a colorModeManager\n\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode,\n    setColorMode\n  };\n}\nexport function useAccessibleColors() {\n  const {\n    colorMode: colorModeContext\n  } = React.useContext(HybridContext);\n\n  const toggleAccessibleColors = () => colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}\n//# sourceMappingURL=hooks.js.map"]},"metadata":{},"sourceType":"module"}