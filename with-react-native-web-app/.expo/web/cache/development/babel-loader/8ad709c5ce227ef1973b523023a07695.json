{"ast":null,"code":"import _slicedToArray from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport React from 'react';\nexport function useDisclose(initState) {\n  _s();\n\n  var _React$useState = React.useState(initState || false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isOpen = _React$useState2[0],\n      setIsOpen = _React$useState2[1];\n\n  var onOpen = function onOpen() {\n    setIsOpen(true);\n  };\n\n  var onClose = function onClose() {\n    setIsOpen(false);\n  };\n\n  var onToggle = function onToggle() {\n    setIsOpen(!isOpen);\n  };\n\n  return {\n    isOpen: isOpen,\n    onOpen: onOpen,\n    onClose: onClose,\n    onToggle: onToggle\n  };\n}\n\n_s(useDisclose, \"/AtVE7v2sugqHhZEtDHo7whN2B4=\");\n\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/module/hooks/useDisclose.js"],"names":["useDisclose","isOpen","setIsOpen","React","initState","onOpen","onClose","onToggle"],"mappings":";;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAO,SAAA,WAAA,CAAA,SAAA,EAAgC;EAAA,EAAA;;EACrC,IAAA,eAAA,GAA4BG,KAAK,CAALA,QAAAA,CAAeC,SAAS,IAApD,KAA4BD,CAA5B;EAAA,IAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;EAAA,IAAOF,MAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;EAAA,IAAeC,SAAf,GAAA,gBAAA,CAAA,CAAA,CAAA;;EAEA,IAAMG,MAAM,GAAG,SAATA,MAAS,GAAM;IACnBH,SAAS,CAATA,IAAS,CAATA;EADF,CAAA;;EAIA,IAAMI,OAAO,GAAG,SAAVA,OAAU,GAAM;IACpBJ,SAAS,CAATA,KAAS,CAATA;EADF,CAAA;;EAIA,IAAMK,QAAQ,GAAG,SAAXA,QAAW,GAAM;IACrBL,SAAS,CAAC,CAAVA,MAAS,CAATA;EADF,CAAA;;EAIA,OAAO;IACLD,MAAM,EADD,MAAA;IAELI,MAAM,EAFD,MAAA;IAGLC,OAAO,EAHF,OAAA;IAILC,QAAQ,EAARA;EAJK,CAAP;AAMD;;GArBeP,W","sourcesContent":["import React from 'react';\nexport function useDisclose(initState) {\n  const [isOpen, setIsOpen] = React.useState(initState || false);\n\n  const onOpen = () => {\n    setIsOpen(true);\n  };\n\n  const onClose = () => {\n    setIsOpen(false);\n  };\n\n  const onToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  return {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle\n  };\n}\n//# sourceMappingURL=useDisclose.js.map"]},"metadata":{},"sourceType":"module"}