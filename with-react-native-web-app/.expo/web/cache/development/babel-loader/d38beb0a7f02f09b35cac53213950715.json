{"ast":null,"code":"import { useTheme } from './useTheme';\nimport get from 'lodash.get';\nexport function useToken(property, token, fallback) {\n  var theme = useTheme();\n\n  if (Array.isArray(token)) {\n    var fallbackArr = [];\n\n    if (fallback) {\n      fallbackArr = Array.isArray(fallback) ? fallback : [fallback];\n    }\n\n    return token.map(function (innerToken, index) {\n      var _fallbackArr$index;\n\n      var path = \"\".concat(property, \".\").concat(innerToken);\n      return get(theme, path, (_fallbackArr$index = fallbackArr[index]) !== null && _fallbackArr$index !== void 0 ? _fallbackArr$index : innerToken);\n    });\n  }\n\n  var path = \"\".concat(property, \".\").concat(token);\n  return get(theme, path, fallback !== null && fallback !== void 0 ? fallback : token);\n}","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/hooks/useToken.ts"],"names":["theme","useTheme","Array","fallbackArr","path","property","get","fallback"],"mappings":"AAAA,SAAA,QAAA,QAAA,YAAA;AACA,OAAA,GAAA,MAAA,YAAA;AAEA,OAAO,SAAA,QAAA,CAAA,QAAA,EAAA,KAAA,EAAA,QAAA,EAIL;EACA,IAAMA,KAAK,GAAGC,QAAd,EAAA;;EACA,IAAIC,KAAK,CAALA,OAAAA,CAAJ,KAAIA,CAAJ,EAA0B;IACxB,IAAIC,WAAgB,GAApB,EAAA;;IACA,IAAA,QAAA,EAAc;MACZA,WAAW,GAAGD,KAAK,CAALA,OAAAA,CAAAA,QAAAA,IAAAA,QAAAA,GAAqC,CAAnDC,QAAmD,CAAnDA;IACD;;IACD,OAAO,KAAK,CAAL,GAAA,CAAU,UAAA,UAAA,EAAA,KAAA,EAAuB;MAAA;;MACtC,IAAMC,IAAI,aAAMC,QAAN,cAAV,UAAU,CAAV;MACA,OAAOC,GAAG,CAAA,KAAA,EAAA,IAAA,wBAAcH,WAAW,CAAXA,KAAW,CAAzB,mEAAV,UAAU,CAAV;IAFF,CAAO,CAAP;EAID;;EAED,IAAMC,IAAI,aAAMC,QAAN,cAAV,KAAU,CAAV;EACA,OAAOC,GAAG,CAAA,KAAA,EAAA,IAAA,EAAcC,QAAd,aAAcA,QAAd,cAAcA,QAAd,GAAV,KAAU,CAAV;AACD","sourcesContent":["import { useTheme } from './useTheme';\nimport get from 'lodash.get';\n\nexport function useToken<T extends string | number>(\n  property: string,\n  token: T | T[],\n  fallback?: T | T[]\n) {\n  const theme = useTheme();\n  if (Array.isArray(token)) {\n    let fallbackArr: T[] = [];\n    if (fallback) {\n      fallbackArr = Array.isArray(fallback) ? fallback : [fallback];\n    }\n    return token.map((innerToken, index) => {\n      const path = `${property}.${innerToken}`;\n      return get(theme, path, fallbackArr[index] ?? innerToken);\n    });\n  }\n\n  const path = `${property}.${token}`;\n  return get(theme, path, fallback ?? token);\n}\n"]},"metadata":{},"sourceType":"module"}