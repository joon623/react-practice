{"ast":null,"code":"import _defineProperty from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _s = $RefreshSig$();\n\nvar _excluded = [\"size\", \"_checkbox\", \"colorScheme\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { createContext, memo, forwardRef } from 'react';\nimport { useCheckboxGroupState } from '@react-stately/checkbox';\nimport { useCheckboxGroup } from '@react-native-aria/checkbox';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nexport var CheckboxGroupContext = /*#__PURE__*/createContext(null);\n\nfunction CheckboxGroup(_ref, ref) {\n  _s();\n\n  var size = _ref.size,\n      _checkbox = _ref._checkbox,\n      colorScheme = _ref.colorScheme,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var resolvedProps = usePropsResolution('CheckboxGroup', props);\n  var children = props.children;\n  var state = useCheckboxGroupState(props);\n\n  var _useCheckboxGroup = useCheckboxGroup(_objectSpread({\n    'aria-label': props.accessibilityLabel\n  }, props), state),\n      groupProps = _useCheckboxGroup.groupProps;\n\n  var formControlContext = useFormControlContext(); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(_objectSpread(_objectSpread({}, props), {}, {\n    size: size,\n    colorScheme: colorScheme\n  }))) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(CheckboxGroupContext.Provider, {\n    value: _objectSpread(_objectSpread(_objectSpread({\n      //@ts-ignore\n      size: size,\n      colorScheme: colorScheme\n    }, _checkbox), formControlContext), {}, {\n      state: state\n    })\n  }, /*#__PURE__*/React.createElement(Box, _extends({}, resolvedProps, groupProps, props, {\n    ref: ref\n  }), children));\n}\n\n_s(CheckboxGroup, \"K+18dM/O/TiTkTVcKI74dPf003A=\", false, function () {\n  return [usePropsResolution, useCheckboxGroupState, useCheckboxGroup, useFormControlContext, useHasResponsiveProps];\n});\n\n_c = CheckboxGroup;\nexport default /*#__PURE__*/_c3 = /*#__PURE__*/memo( /*#__PURE__*/_c2 = /*#__PURE__*/forwardRef(CheckboxGroup));\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CheckboxGroup\");\n$RefreshReg$(_c2, \"%default%$memo\");\n$RefreshReg$(_c3, \"%default%\");\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/module/components/primitives/Checkbox/CheckboxGroup.js"],"names":["_extends","Object","i","arguments","source","target","CheckboxGroupContext","createContext","CheckboxGroup","size","_checkbox","colorScheme","props","resolvedProps","usePropsResolution","children","state","useCheckboxGroupState","groupProps","useCheckboxGroup","accessibilityLabel","formControlContext","useFormControlContext","useHasResponsiveProps","value","ref","memo","forwardRef"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { createContext, memo, forwardRef } from 'react';\nimport { useCheckboxGroupState } from '@react-stately/checkbox';\nimport { useCheckboxGroup } from '@react-native-aria/checkbox';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nexport const CheckboxGroupContext = /*#__PURE__*/createContext(null);\n\nfunction CheckboxGroup({\n  size,\n  _checkbox,\n  colorScheme,\n  ...props\n}, ref) {\n  const resolvedProps = usePropsResolution('CheckboxGroup', props);\n  const {\n    children\n  } = props;\n  const state = useCheckboxGroupState(props);\n  const {\n    groupProps\n  } = useCheckboxGroup({\n    'aria-label': props.accessibilityLabel,\n    ...props\n  }, state);\n  const formControlContext = useFormControlContext(); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps({ ...props,\n    size,\n    colorScheme\n  })) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(CheckboxGroupContext.Provider, {\n    value: {\n      //@ts-ignore\n      size,\n      colorScheme,\n      ..._checkbox,\n      ...formControlContext,\n      state\n    }\n  }, /*#__PURE__*/React.createElement(Box, _extends({}, resolvedProps, groupProps, props, {\n    ref: ref\n  }), children));\n}\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(CheckboxGroup));\n//# sourceMappingURL=CheckboxGroup.js.map"]},"metadata":{},"sourceType":"module"}