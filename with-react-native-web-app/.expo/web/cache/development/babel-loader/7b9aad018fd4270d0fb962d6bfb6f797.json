{"ast":null,"code":"var _excluded = [\"children\"];\nvar _jsxFileName = \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/utils/createContext.tsx\";\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction createContext(rootComponentName) {\n  var Context = /*#__PURE__*/React.createContext(null);\n\n  function Provider(props) {\n    var children = props.children,\n        providerProps = _objectWithoutProperties(props, _excluded); // Only re-memoize when prop values change\n\n\n    var value = React.useMemo(function () {\n      return providerProps;\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    Object.values(providerProps));\n    return /*#__PURE__*/_jsxDEV(Context.Provider, {\n      value: value,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this);\n  }\n\n  function useContext(consumerName) {\n    var context = React.useContext(Context);\n\n    if (context === null) {\n      throw new Error(\"`\".concat(consumerName, \"` must be used within `\").concat(rootComponentName, \"`\"));\n    }\n\n    return context;\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext];\n}\n\nexport { createContext };","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/utils/createContext.tsx"],"names":["Context","React","children","value","Object","context","consumerName","Provider","rootComponentName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;;;AAEA,SAAA,aAAA,CAAA,iBAAA,EAEE;EACA,IAAMA,OAAO,GAAA,aAAGC,KAAK,CAALA,aAAAA,CAAhB,IAAgBA,CAAhB;;EAEA,SAAA,QAAA,CAAA,KAAA,EAA2E;IACnE,IAAEC,QAAF,GAAN,KAAM,CAAEA,QAAF;IAAA,IAAN,aAAM,GAAN,wBAAA,CAAA,KAAA,EADyE,SACzE,CAAM,CADmE,CAEzE;;;IACA,IAAMC,KAAK,GAAGF,KAAK,CAALA,OAAAA,CACZ;MAAA,OADYA,aACZ;IAAA,CADYA,EAEZ;IACAG,MAAM,CAANA,MAAAA,CAHF,aAGEA,CAHYH,CAAd;IAKA,OAAA,aAAO,OAAA,CAAC,OAAD,CAAA,QAAA,EAAA;MAAkB,KAAK,EAAvB,KAAA;MAAA,QAAA,EAAiCC;IAAjC,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;MAAA,QAAA,EAAA,YAAA;MAAA,UAAA,EAAA,EAAA;MAAA,YAAA,EAAA;IAAA,CAAA,EAAP,IAAO,CAAP;EACD;;EAED,SAAA,UAAA,CAAA,YAAA,EAA0C;IACxC,IAAMG,OAAO,GAAGJ,KAAK,CAALA,UAAAA,CAAhB,OAAgBA,CAAhB;;IACA,IAAII,OAAO,KAAX,IAAA,EAAsB;MACpB,MAAM,IAAA,KAAA,YACCC,YADD,oCAAN,iBAAM,OAAN;IAGD;;IACD,OAAA,OAAA;EACD;;EAEDC,QAAQ,CAARA,WAAAA,GAAuBC,iBAAiB,GAAxCD,UAAAA;EACA,OAAO,CAAA,QAAA,EAAP,UAAO,CAAP;AACD;;AAED,SAAA,aAAA","sourcesContent":["import React from 'react';\n\nfunction createContext<ContextValueType extends object>(\n  rootComponentName: string\n) {\n  const Context = React.createContext<ContextValueType>(null as any);\n\n  function Provider(props: ContextValueType & { children: React.ReactNode }) {\n    const { children, ...providerProps } = props;\n    // Only re-memoize when prop values change\n    const value = React.useMemo(\n      () => providerProps,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Object.values(providerProps)\n    ) as ContextValueType;\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  }\n\n  function useContext(consumerName: string) {\n    const context = React.useContext(Context);\n    if (context === null) {\n      throw new Error(\n        `\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``\n      );\n    }\n    return context;\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext] as const;\n}\n\nexport { createContext };\n"]},"metadata":{},"sourceType":"module"}