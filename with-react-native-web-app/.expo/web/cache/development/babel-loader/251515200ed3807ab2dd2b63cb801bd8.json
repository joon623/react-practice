{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { getSortedProps, calculatePaddingProps } from './utils';\nimport { useTheme } from './../useTheme';\nexport function useSafeArea(props) {\n  var insets = useSafeAreaInsets();\n  var sizes = useTheme().sizes;\n\n  var _getSortedProps = getSortedProps(props),\n      safeAreaProps = _getSortedProps.safeAreaProps,\n      paddingProps = _getSortedProps.paddingProps,\n      sansPaddingProps = _getSortedProps.sansPaddingProps;\n\n  if (!Object.keys(safeAreaProps).length) {\n    return props;\n  }\n\n  var calcualtedPaddingProps = calculatePaddingProps(safeAreaProps, paddingProps, insets, sizes);\n  return _objectSpread(_objectSpread(_objectSpread({}, sansPaddingProps), paddingProps), calcualtedPaddingProps);\n}","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/hooks/useSafeArea/index.ts"],"names":["insets","useSafeAreaInsets","sizes","useTheme","sansPaddingProps","getSortedProps","Object","calcualtedPaddingProps","calculatePaddingProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,iBAAA,QAAA,gCAAA;AACA,SAAA,cAAA,EAAA,qBAAA,QAAA,SAAA;AACA,SAAA,QAAA,QAAA,eAAA;AAEA,OAAO,SAAA,WAAA,CAAA,KAAA,EAAiC;EACtC,IAAMA,MAAM,GAAGC,iBAAf,EAAA;EACA,IAAMC,KAAK,GAAGC,QAAQ,GAAtB,KAAA;;EACA,sBAA0DE,cAAc,CAAxE,KAAwE,CAAxE;EAAA,IAAM,aAAN,mBAAM,aAAN;EAAA,IAAM,YAAN,mBAAM,YAAN;EAAA,IAAqCD,gBAArC,mBAAqCA,gBAArC;;EAGA,IAAI,CAACE,MAAM,CAANA,IAAAA,CAAAA,aAAAA,EAAL,MAAA,EAAwC;IACtC,OAAA,KAAA;EACD;;EACD,IAAIC,sBAAsB,GAAGC,qBAAqB,CAAA,aAAA,EAAA,YAAA,EAAA,MAAA,EAAlD,KAAkD,CAAlD;EAMA,OAAA,aAAA,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,gBAAA,CAAA,EAAA,YAAA,CAAA,EAAA,sBAAA,CAAA;AACD","sourcesContent":["import { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { getSortedProps, calculatePaddingProps } from './utils';\nimport { useTheme } from './../useTheme';\n\nexport function useSafeArea(props: any) {\n  const insets = useSafeAreaInsets();\n  const sizes = useTheme().sizes;\n  const { safeAreaProps, paddingProps, sansPaddingProps } = getSortedProps(\n    props\n  );\n  if (!Object.keys(safeAreaProps).length) {\n    return props;\n  }\n  let calcualtedPaddingProps = calculatePaddingProps(\n    safeAreaProps,\n    paddingProps,\n    insets,\n    sizes\n  );\n  return { ...sansPaddingProps, ...paddingProps, ...calcualtedPaddingProps };\n}\n"]},"metadata":{},"sourceType":"module"}