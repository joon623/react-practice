{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport base from './base';\nimport components from './components';\nimport * as tools from './tools'; //@ts-ignore\n\nvar config = {\n  useSystemColorMode: false,\n  // TODO: implement this\n  initialColorMode: 'light',\n  accessibleColors: false\n};\n\nvar v33xTheme = _objectSpread(_objectSpread({}, base), {}, {\n  components: components,\n  config: config\n});\n\nexport { v33xTheme, tools as themeTools };","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/theme/v33x-theme/index.ts"],"names":["config","useSystemColorMode","initialColorMode","accessibleColors","v33xTheme","components","tools"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,IAAA,MAAA,QAAA;AACA,OAAA,UAAA,MAAA,cAAA;AACA,OAAO,KAAP,KAAA,MAAA,SAAA,C,CACA;;AAGA,IAAMA,MAAwB,GAAG;EAC/BC,kBAAkB,EADa,KAAA;EACJ;EAC3BC,gBAAgB,EAFe,OAAA;EAG/BC,gBAAgB,EAAE;AAHa,CAAjC;;AAMA,IAAMC,SAAS,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,IAAA,CAAA,EAAA,EAAA,EAAA;EAEbC,UAFa,EAEbA,UAFa;EAGbL,MAAAA,EAAAA;AAHa,CAAA,CAAf;;AAcA,SAAA,SAAA,EAAoBM,KAAK,IAAzB,UAAA","sourcesContent":["import base from './base';\nimport components from './components';\nimport * as tools from './tools';\n//@ts-ignore\nimport type { ColorModeOptions } from './../core/color-mode/types';\n\nconst config: ColorModeOptions = {\n  useSystemColorMode: false, // TODO: implement this\n  initialColorMode: 'light',\n  accessibleColors: false,\n};\n\nconst v33xTheme = {\n  ...base,\n  components,\n  config,\n};\n\nexport type V33xTheme = typeof v33xTheme & { fontConfig: any };\n\nexport interface ICustomTheme {}\n\nexport interface IV33xTheme\n  extends ICustomTheme,\n    Omit<V33xTheme, keyof ICustomTheme> {}\n\nexport { v33xTheme, tools as themeTools };\n"]},"metadata":{},"sourceType":"module"}