{"ast":null,"code":"import _defineProperty from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/components/primitives/Overlay/Overlay.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport Platform from \"react-native-web/dist/cjs/exports/Platform\";\nimport Modal from \"react-native-web/dist/cjs/exports/Modal\";\nimport { useKeyboardDismissable } from '../../../hooks';\nimport { ExitAnimationContext } from './ExitAnimationContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Overlay(_ref) {\n  _s();\n\n  var children = _ref.children,\n      isOpen = _ref.isOpen,\n      _ref$useRNModalOnAndr = _ref.useRNModalOnAndroid,\n      useRNModalOnAndroid = _ref$useRNModalOnAndr === void 0 ? false : _ref$useRNModalOnAndr,\n      _ref$isKeyboardDismis = _ref.isKeyboardDismissable,\n      isKeyboardDismissable = _ref$isKeyboardDismis === void 0 ? true : _ref$isKeyboardDismis,\n      _ref$animationPreset = _ref.animationPreset,\n      animationPreset = _ref$animationPreset === void 0 ? 'fade' : _ref$animationPreset,\n      onRequestClose = _ref.onRequestClose,\n      style = _ref.style,\n      unmountOnExit = _ref.unmountOnExit;\n\n  var _React$useState = React.useState(!isOpen),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      exited = _React$useState2[0],\n      setExited = _React$useState2[1];\n\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : function () {}\n  });\n\n  var styleObj = _objectSpread({}, style);\n\n  if (animationPreset === 'slide') {\n    styleObj.overflow = 'hidden';\n    styleObj.display = 'flex';\n  } else {\n    styleObj.display = exited && !isOpen ? 'none' : 'flex';\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  if (Platform.OS === 'android' && useRNModalOnAndroid) {\n    return /*#__PURE__*/_jsxDEV(ExitAnimationContext.Provider, {\n      value: {\n        exited: exited,\n        setExited: setExited\n      },\n      children: /*#__PURE__*/_jsxDEV(Modal, {\n        transparent: true,\n        visible: isOpen,\n        onRequestClose: onRequestClose,\n        animationType: animationPreset,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  return (\n    /*#__PURE__*/\n    //@ts-ignore\n    _jsxDEV(OverlayContainer, {\n      style: _objectSpread({}, styleObj),\n      children: /*#__PURE__*/_jsxDEV(ExitAnimationContext.Provider, {\n        value: {\n          exited: exited,\n          setExited: setExited\n        },\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(Overlay, \"SAMSJehf4YEOFhQ/cBW/8RCig8I=\", false, function () {\n  return [useKeyboardDismissable];\n});\n\n_c = Overlay;\n\nvar _c;\n\n$RefreshReg$(_c, \"Overlay\");\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/components/primitives/Overlay/Overlay.tsx"],"names":["Overlay","children","isOpen","useRNModalOnAndroid","isKeyboardDismissable","animationPreset","onRequestClose","style","unmountOnExit","exited","setExited","React","useKeyboardDismissable","enabled","callback","styleObj","Platform"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport { Platform, ViewStyle } from 'react-native';\nimport { Modal } from 'react-native';\nimport { useKeyboardDismissable } from '../../../hooks';\nimport { ExitAnimationContext } from './ExitAnimationContext';\n\nexport interface IOverlayProps {\n  isOpen?: boolean;\n  children?: any;\n  // We use RN modal on android if needed as it supports shifting accessiblity focus to the opened view. IOS automatically shifts focus if an absolutely placed view appears in front.\n  useRNModalOnAndroid?: boolean;\n  onRequestClose?: (() => any) | undefined;\n  isKeyboardDismissable?: boolean;\n  animationPreset?: 'fade' | 'slide' | 'none';\n  style?: ViewStyle;\n  unmountOnExit?: boolean;\n}\n\nexport function Overlay({\n  children,\n  isOpen,\n  useRNModalOnAndroid = false,\n  isKeyboardDismissable = true,\n  //@ts-ignore\n  animationPreset = 'fade',\n  onRequestClose,\n  style,\n  unmountOnExit,\n}: IOverlayProps) {\n  const [exited, setExited] = React.useState(!isOpen);\n\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : () => {},\n  });\n  const styleObj = { ...style };\n  if (animationPreset === 'slide') {\n    styleObj.overflow = 'hidden';\n    styleObj.display = 'flex';\n  } else {\n    styleObj.display = exited && !isOpen ? 'none' : 'flex';\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  if (Platform.OS === 'android' && useRNModalOnAndroid) {\n    return (\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        <Modal\n          transparent\n          visible={isOpen}\n          onRequestClose={onRequestClose}\n          animationType={animationPreset}\n        >\n          {children}\n        </Modal>\n      </ExitAnimationContext.Provider>\n    );\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  return (\n    //@ts-ignore\n    <OverlayContainer style={{ ...styleObj }}>\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        {children}\n      </ExitAnimationContext.Provider>\n    </OverlayContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}