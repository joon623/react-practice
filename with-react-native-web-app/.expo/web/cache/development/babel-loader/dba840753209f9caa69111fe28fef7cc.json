{"ast":null,"code":"var _s = $RefreshSig$();\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { AlertDialogContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nvar AlertDialogContent = function AlertDialogContent(props, ref) {\n  _s();\n\n  var newProps = usePropsResolution('AlertDialogContent', props);\n\n  var _React$useContext = React.useContext(AlertDialogContext),\n      contentSize = _React$useContext.contentSize,\n      initialFocusRef = _React$useContext.initialFocusRef,\n      finalFocusRef = _React$useContext.finalFocusRef,\n      handleClose = _React$useContext.handleClose;\n\n  React.useEffect(function () {\n    var finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n\n    if (initialFocusRef && initialFocusRef.current) {\n      //@ts-ignore\n      initialFocusRef.current.focus();\n    }\n\n    return function () {\n      if (finalRefVal) {\n        //@ts-ignore\n        finalRefVal.focus();\n      }\n    };\n  }, [initialFocusRef, finalFocusRef]); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box, _extends({}, contentSize, newProps, {\n    ref: ref,\n    onAccessibilityEscape: handleClose //@ts-ignore - web only\n    ,\n    \"aria-modal\": \"true\" //@ts-ignore - web only\n    ,\n    accessibilityRole: \"alert\",\n    accessibilityViewIsModal: true\n  }));\n};\n\n_s(AlertDialogContent, \"oOswvRyMjHuzOO61luUAmb3BN6k=\", false, function () {\n  return [usePropsResolution, useHasResponsiveProps];\n});\n\n_c = AlertDialogContent;\nexport default /*#__PURE__*/_c3 = /*#__PURE__*/memo( /*#__PURE__*/_c2 = /*#__PURE__*/forwardRef(AlertDialogContent));\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AlertDialogContent\");\n$RefreshReg$(_c2, \"%default%$memo\");\n$RefreshReg$(_c3, \"%default%\");\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/module/components/composites/AlertDialog/AlertDialogContent.js"],"names":["_extends","Object","i","arguments","source","target","AlertDialogContent","newProps","usePropsResolution","contentSize","initialFocusRef","finalFocusRef","handleClose","React","finalRefVal","useHasResponsiveProps","ref","onAccessibilityEscape","accessibilityRole","accessibilityViewIsModal","memo","forwardRef"],"mappings":";;AAAA,SAAA,QAAA,GAAoB;EAAEA,QAAQ,GAAGC,MAAM,CAANA,MAAAA,IAAiB,UAAA,MAAA,EAAkB;IAAE,KAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGC,SAAS,CAA7B,MAAA,EAAsCD,CAAtC,EAAA,EAA2C;MAAE,IAAIE,MAAM,GAAGD,SAAS,CAAtB,CAAsB,CAAtB;;MAA2B,KAAK,IAAL,GAAA,IAAA,MAAA,EAAwB;QAAE,IAAIF,MAAM,CAANA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAJ,GAAIA,CAAJ,EAAuD;UAAEI,MAAM,CAANA,GAAM,CAANA,GAAcD,MAAM,CAApBC,GAAoB,CAApBA;QAA4B;MAAE;IAAE;;IAAC,OAAA,MAAA;EAA5OL,CAAAA;;EAA8P,OAAOA,QAAQ,CAARA,KAAAA,CAAAA,IAAAA,EAAP,SAAOA,CAAP;AAAyC;;AAE7T,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,GAAA,MAAA,sBAAA;AACA,SAAA,kBAAA,QAAA,gBAAA;AACA,SAAA,kBAAA,QAAA,WAAA;AACA,SAAA,qBAAA,QAAA,sCAAA;;AAEA,IAAMM,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,KAAA,EAAA,GAAA,EAAgB;EAAA,EAAA;;EACzC,IAAMC,QAAQ,GAAGC,kBAAkB,CAAA,oBAAA,EAAnC,KAAmC,CAAnC;;EACA,IAAA,iBAAA,GAKIK,KAAK,CAALA,UAAAA,CALJ,kBAKIA,CALJ;EAAA,IACEJ,WADF,GAAA,iBAAA,CAAA,WAAA;EAAA,IAEEC,eAFF,GAAA,iBAAA,CAAA,eAAA;EAAA,IAGEC,aAHF,GAAA,iBAAA,CAAA,aAAA;EAAA,IAIEC,WAJF,GAAA,iBAAA,CAAA,WAAA;;EAMAC,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAMC,WAAW,GAAGH,aAAa,GAAGA,aAAa,CAAhB,OAAA,GAAjC,IAAA;;IAEA,IAAID,eAAe,IAAIA,eAAe,CAAtC,OAAA,EAAgD;MAC9C;MACAA,eAAe,CAAfA,OAAAA,CAAAA,KAAAA;IACD;;IAED,OAAO,YAAM;MACX,IAAA,WAAA,EAAiB;QACf;QACAI,WAAW,CAAXA,KAAAA;MACD;IAJH,CAAA;EARFD,CAAAA,EAcG,CAAA,eAAA,EAtBsC,aAsBtC,CAdHA,EARyC,CAsBH;;EAEtC,IAAIE,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EACD;;EAED,OAAO,aAAa,KAAK,CAAL,aAAA,CAAA,GAAA,EAAyBf,QAAQ,CAAA,EAAA,EAAA,WAAA,EAAA,QAAA,EAA4B;IAC/EgB,GAAG,EAD4E,GAAA;IAE/EC,qBAAqB,EAF0D,WAAA,CAE5C;IAF4C;IAI/E,cAJ+E,MAAA,CAI1D;IAJ0D;IAM/EC,iBAAiB,EAN8D,OAAA;IAO/EC,wBAAwB,EAAE;EAPqD,CAA5B,CAAjC,CAApB;AA5BF,CAAA;;GAAMb,kB;UACaE,kB,EAuBbO,qB;;;KAxBAT,kB;AAuCN,eAAe,aAAf,GAAA,GAAA,aAA4Bc,IAAI,EAAE,aAAF,GAAA,GAAA,aAAeC,UAAU,CAAzD,kBAAyD,CAAzB,CAAhC","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { AlertDialogContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertDialogContent = (props, ref) => {\n  const newProps = usePropsResolution('AlertDialogContent', props);\n  const {\n    contentSize,\n    initialFocusRef,\n    finalFocusRef,\n    handleClose\n  } = React.useContext(AlertDialogContext);\n  React.useEffect(() => {\n    const finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n\n    if (initialFocusRef && initialFocusRef.current) {\n      //@ts-ignore\n      initialFocusRef.current.focus();\n    }\n\n    return () => {\n      if (finalRefVal) {\n        //@ts-ignore\n        finalRefVal.focus();\n      }\n    };\n  }, [initialFocusRef, finalFocusRef]); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box, _extends({}, contentSize, newProps, {\n    ref: ref,\n    onAccessibilityEscape: handleClose //@ts-ignore - web only\n    ,\n    \"aria-modal\": \"true\" //@ts-ignore - web only\n    ,\n    accessibilityRole: \"alert\",\n    accessibilityViewIsModal: true\n  }));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(AlertDialogContent));\n//# sourceMappingURL=AlertDialogContent.js.map"]},"metadata":{},"sourceType":"module"}