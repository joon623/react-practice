{"ast":null,"code":"import _defineProperty from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport Linking from \"react-native-web/dist/cjs/exports/Linking\";\nimport Platform from \"react-native-web/dist/cjs/exports/Platform\";\n\nvar linkToHREF = function linkToHREF(URL) {\n  Linking.openURL(URL)[\"catch\"](function (err) {\n    return console.error('An error occurred', err);\n  });\n};\n\nvar addOnPressFunctionality = function addOnPressFunctionality(href, callback) {\n  href ? linkToHREF(href) : '';\n  callback ? callback() : function () {};\n};\n\nexport function useLink(props) {\n  var href = props.href,\n      isExternal = props.isExternal,\n      _onPress = props.onPress,\n      _ref = props._ref;\n  var platformLinkProps = {};\n\n  if (Platform.OS === 'web') {\n    platformLinkProps = {\n      href: href,\n      onClick: _onPress\n    }; // Adding target to a tag created by RN-Web\n\n    if (isExternal && _ref.current) {\n      _ref.current.target = '_blank';\n    }\n  } else {\n    platformLinkProps = {\n      onPress: function onPress() {\n        addOnPressFunctionality(href, _onPress);\n      }\n    };\n  }\n\n  return {\n    linkProps: _objectSpread(_objectSpread({}, platformLinkProps), {}, {\n      accessibilityRole: 'link',\n      accessible: true\n    })\n  };\n}\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/module/components/primitives/Link/useLink.js"],"names":["linkToHREF","Linking","console","addOnPressFunctionality","href","callback","isExternal","onPress","_ref","props","platformLinkProps","Platform","onClick","linkProps","accessibilityRole","accessible"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAAA,GAAA,EAAO;EACxBC,OAAO,CAAPA,OAAAA,CAAAA,GAAAA,EAAAA,OAAAA,EAA2B,UAAA,GAAA,EAAG;IAAA,OAAIC,OAAO,CAAPA,KAAAA,CAAAA,mBAAAA,EAAJ,GAAIA,CAAJ;EAA9BD,CAAAA;AADF,CAAA;;AAIA,IAAME,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAA,IAAA,EAAA,QAAA,EAAoB;EAClDC,IAAI,GAAGJ,UAAU,CAAb,IAAa,CAAb,GAAJI,EAAAA;EACAC,QAAQ,GAAGA,QAAH,EAAA,GAAgB,YAAM,CAA9BA,CAAAA;AAFF,CAAA;;AAKA,OAAO,SAAA,OAAA,CAAA,KAAA,EAAwB;EAC7B,IACED,IADF,GAKIK,KALJ,CAAA,IAAA;EAAA,IAEEH,UAFF,GAKIG,KALJ,CAAA,UAAA;EAAA,IAGEF,QAHF,GAKIE,KALJ,CAAA,OAAA;EAAA,IAIED,IAJF,GAKIC,KALJ,CAAA,IAAA;EAMA,IAAIC,iBAAiB,GAArB,EAAA;;EAEA,IAAIC,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;IACzBD,iBAAiB,GAAG;MAClBN,IAAI,EADc,IAAA;MAElBQ,OAAO,EAAEL;IAFS,CAApBG,CADyB,CAItB;;IAEH,IAAIJ,UAAU,IAAIE,IAAI,CAAtB,OAAA,EAAgC;MAC9BA,IAAI,CAAJA,OAAAA,CAAAA,MAAAA,GAAAA,QAAAA;IACD;EARH,CAAA,MASO;IACLE,iBAAiB,GAAG;MAClBH,OAAO,EAAE,SAAA,OAAA,GAAM;QACbJ,uBAAuB,CAAA,IAAA,EAAvBA,QAAuB,CAAvBA;MACD;IAHiB,CAApBO;EAKD;;EAED,OAAO;IACLG,SAAS,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,iBAAA,CAAA,EAAA,EAAA,EAAA;MACPC,iBAAiB,EADV,MAAA;MAEPC,UAAU,EAAE;IAFL,CAAA;EADJ,CAAP;AAMD","sourcesContent":["import { Linking, Platform } from 'react-native';\n\nconst linkToHREF = URL => {\n  Linking.openURL(URL).catch(err => console.error('An error occurred', err));\n};\n\nconst addOnPressFunctionality = (href, callback) => {\n  href ? linkToHREF(href) : '';\n  callback ? callback() : () => {};\n};\n\nexport function useLink(props) {\n  const {\n    href,\n    isExternal,\n    onPress,\n    _ref\n  } = props;\n  let platformLinkProps = {};\n\n  if (Platform.OS === 'web') {\n    platformLinkProps = {\n      href,\n      onClick: onPress\n    }; // Adding target to a tag created by RN-Web\n\n    if (isExternal && _ref.current) {\n      _ref.current.target = '_blank';\n    }\n  } else {\n    platformLinkProps = {\n      onPress: () => {\n        addOnPressFunctionality(href, onPress);\n      }\n    };\n  }\n\n  return {\n    linkProps: { ...platformLinkProps,\n      accessibilityRole: 'link',\n      accessible: true\n    }\n  };\n}\n//# sourceMappingURL=useLink.js.map"]},"metadata":{},"sourceType":"module"}