{"ast":null,"code":"import _objectWithoutProperties from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\"];\nvar _jsxFileName = \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/utils/createContext.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction createContext(rootComponentName) {\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  var Context = /*#__PURE__*/React.createContext(null);\n\n  function Provider(props) {\n    _s();\n\n    var children = props.children,\n        providerProps = _objectWithoutProperties(props, _excluded); // Only re-memoize when prop values change\n\n\n    var value = React.useMemo(function () {\n      return providerProps;\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    Object.values(providerProps));\n    return /*#__PURE__*/_jsxDEV(Context.Provider, {\n      value: value,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this);\n  }\n\n  _s(Provider, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");\n\n  function useContext(consumerName) {\n    _s2();\n\n    var context = React.useContext(Context);\n\n    if (context === null) {\n      throw new Error(\"`\".concat(consumerName, \"` must be used within `\").concat(rootComponentName, \"`\"));\n    }\n\n    return context;\n  }\n\n  _s2(useContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext];\n}\n\nexport { createContext };\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = __webpack_module__.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      import.meta.webpackHot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/utils/createContext.tsx"],"names":["Context","React","children","providerProps","props","value","Object","context","Provider","rootComponentName"],"mappings":";;;AAAA,OAAA,KAAA,MAAA,OAAA;;;AAEA,SAAA,aAAA,CAAA,iBAAA,EAEE;EAAA,IAAA,EAAA,GAAA,YAAA,EAAA;EAAA,IAAA,GAAA,GAAA,YAAA,EAAA;;EACA,IAAMA,OAAO,GAAA,aAAGC,KAAK,CAALA,aAAAA,CAAhB,IAAgBA,CAAhB;;EAEA,SAAA,QAAA,CAAA,KAAA,EAA2E;IAAA,EAAA;;IACzE,IAAQC,QAAR,GAAuCE,KAAvC,CAAA,QAAA;IAAA,IAAqBD,aAArB,GAAA,wBAAA,CAAA,KAAA,EADyE,SACzE,CAAA,CADyE,CAEzE;;;IACA,IAAME,KAAK,GAAG,KAAK,CAAL,OAAA,CACZ,YAAA;MAAA,OAAA,aAAA;IADY,CAAA,EAEZ;IACAC,MAAM,CAANA,MAAAA,CAHF,aAGEA,CAHY,CAAd;IAKA,OAAA,aAAO,OAAA,CAAC,OAAD,CAAA,QAAA,EAAA;MAAkB,KAAK,EAAvB,KAAA;MAAA,QAAA,EAAiCJ;IAAjC,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;MAAA,QAAA,EAAA,YAAA;MAAA,UAAA,EAAA,EAAA;MAAA,YAAA,EAAA;IAAA,CAAA,EAAP,IAAO,CAAP;EACD;;EAZD,EAAA,CAAA,QAAA,EAAA,8BAAA,CAAA;;EAcA,SAAA,UAAA,CAAA,YAAA,EAA0C;IAAA,GAAA;;IACxC,IAAMK,OAAO,GAAGN,KAAK,CAALA,UAAAA,CAAhB,OAAgBA,CAAhB;;IACA,IAAIM,OAAO,KAAX,IAAA,EAAsB;MACpB,MAAM,IAAA,KAAA,CAAA,IAAA,MAAA,CAAA,YAAA,EAAA,yBAAA,EAAA,MAAA,CAAA,iBAAA,EAAN,GAAM,CAAA,CAAN;IAGD;;IACD,OAAA,OAAA;EACD;;EAtBD,GAAA,CAAA,UAAA,EAAA,8BAAA,CAAA;;EAwBAC,QAAQ,CAARA,WAAAA,GAAuBC,iBAAiB,GAAxCD,UAAAA;EACA,OAAO,CAAA,QAAA,EAAP,UAAO,CAAP;AACD;;AAED,SAAA,aAAA","sourcesContent":["import React from 'react';\n\nfunction createContext<ContextValueType extends object>(\n  rootComponentName: string\n) {\n  const Context = React.createContext<ContextValueType>(null as any);\n\n  function Provider(props: ContextValueType & { children: React.ReactNode }) {\n    const { children, ...providerProps } = props;\n    // Only re-memoize when prop values change\n    const value = React.useMemo(\n      () => providerProps,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Object.values(providerProps)\n    ) as ContextValueType;\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  }\n\n  function useContext(consumerName: string) {\n    const context = React.useContext(Context);\n    if (context === null) {\n      throw new Error(\n        `\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``\n      );\n    }\n    return context;\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext] as const;\n}\n\nexport { createContext };\n"]},"metadata":{},"sourceType":"module"}