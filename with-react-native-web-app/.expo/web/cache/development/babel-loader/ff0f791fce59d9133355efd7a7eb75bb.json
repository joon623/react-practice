{"ast":null,"code":"import _asyncToGenerator from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/regenerator\";\nimport React from 'react';\nimport Clipboard from \"react-native-web/dist/cjs/exports/Clipboard\";\nexport function useClipboard() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      hasCopied = _React$useState2[0],\n      setHasCopied = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      value = _React$useState4[0],\n      setValue = _React$useState4[1];\n\n  var onCopy = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(copiedValue) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!Clipboard) {\n                _context.next = 3;\n                break;\n              }\n\n              _context.next = 3;\n              return Clipboard.setString(copiedValue);\n\n            case 3:\n              setValue(copiedValue);\n              setHasCopied(true);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onCopy(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return {\n    value: value,\n    onCopy: onCopy,\n    hasCopied: hasCopied\n  };\n}","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/src/hooks/useClipboard.ts"],"names":["React","onCopy","Clipboard","setValue","setHasCopied","value","hasCopied"],"mappings":";;;AAAA,OAAA,KAAA,MAAA,OAAA;;AAGA,OAAO,SAAA,YAAA,GAAwB;EAC7B,sBAAkCA,KAAK,CAALA,QAAAA,CAAlC,KAAkCA,CAAlC;EAAA;EAAA,IAAM,SAAN;EAAA,IAAM,YAAN;;EACA,uBAA0BA,KAAK,CAALA,QAAAA,CAA1B,EAA0BA,CAA1B;EAAA;EAAA,IAAM,KAAN;EAAA,IAAM,QAAN;;EACA,IAAMC,MAAM;IAAA,oEAAG,iBAAA,WAAA;MAAA;QAAA;UAAA;YAAA;cAAA,KACb,SADa;gBAAA;gBAAA;cAAA;;cAAA;cAAA,OAELC,SAAS,CAATA,SAAAA,CAAN,WAAMA,CAFK;;YAAA;cAIbC,QAAQ,CAARA,WAAQ,CAARA;cACAC,YAAY,CAAZA,IAAY,CAAZA;;YALa;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAANH,MAAM;MAAA;IAAA;EAAA,GAAZ;;EAOA,OAAO;IACLI,KADK,EACLA,KADK;IAELJ,MAFK,EAELA,MAFK;IAGLK,SAAAA,EAAAA;EAHK,CAAP;AAKD","sourcesContent":["import React from 'react';\nimport { Clipboard } from 'react-native';\n\nexport function useClipboard() {\n  const [hasCopied, setHasCopied] = React.useState(false);\n  const [value, setValue] = React.useState<string>('');\n  const onCopy = async (copiedValue: string) => {\n    if (Clipboard) {\n      await Clipboard.setString(copiedValue);\n    }\n    setValue(copiedValue);\n    setHasCopied(true);\n  };\n  return {\n    value,\n    onCopy,\n    hasCopied,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}