{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeBaseProvider = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\n\nvar _utils = require(\"@react-native-aria/utils\");\n\nvar _theme = require(\"./../theme\");\n\nvar _HybridProvider = _interopRequireDefault(require(\"./hybrid-overlay/HybridProvider\"));\n\nvar _overlays = require(\"@react-native-aria/overlays\");\n\nvar _Toast = require(\"../components/composites/Toast\");\n\nvar _NativeBaseContext = require(\"./NativeBaseContext\");\n\nvar _reactNative = require(\"react-native-web/dist/cjs/index\");\n\nvar _utils2 = require(\"../theme/tools/utils\");\n\nvar _useResponsiveQuery = require(\"../utils/useResponsiveQuery\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n} // For SSR to work, we need to pass initial insets as 0 values on web.\n// https://github.com/th3rdwave/react-native-safe-area-context/issues/132\n\n\nvar defaultInitialWindowMetricsBasedOnPlatform = _reactNative.Platform.select({\n  web: {\n    frame: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    },\n    insets: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    }\n  },\n  \"default\": _reactNativeSafeAreaContext.initialWindowMetrics\n});\n\nvar NativeBaseProvider = function NativeBaseProvider(props) {\n  var _config$theme, _useWindowDimensions;\n\n  var colorModeManager = props.colorModeManager,\n      _props$config = props.config,\n      config = _props$config === void 0 ? _NativeBaseContext.defaultConfig : _props$config,\n      children = props.children,\n      _props$theme = props.theme,\n      propsTheme = _props$theme === void 0 ? _theme.theme : _props$theme,\n      initialWindowMetrics = props.initialWindowMetrics,\n      isSSR = props.isSSR,\n      disableContrastText = props.disableContrastText;\n  var theme = (_config$theme = config.theme) !== null && _config$theme !== void 0 ? _config$theme : propsTheme;\n\n  var newTheme = _react[\"default\"].useMemo(function () {\n    if (config.enableRem) {\n      return (0, _utils2.platformSpecificSpaceUnits)(theme);\n    }\n\n    return theme;\n  }, [config.enableRem, theme]);\n\n  var windowWidth = (_useWindowDimensions = (0, _reactNative.useWindowDimensions)()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width;\n\n  var currentBreakpoint = _react[\"default\"].useMemo(function () {\n    return (0, _utils2.getClosestBreakpoint)(newTheme.breakpoints, windowWidth);\n  }, [windowWidth, newTheme.breakpoints]);\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_NativeBaseContext.NativeBaseConfigProvider, {\n    theme: newTheme,\n    config: config,\n    currentBreakpoint: currentBreakpoint,\n    isSSR: isSSR,\n    disableContrastText: disableContrastText\n  }, /*#__PURE__*/_react[\"default\"].createElement(_reactNativeSafeAreaContext.SafeAreaProvider, {\n    initialMetrics: initialWindowMetrics !== null && initialWindowMetrics !== void 0 ? initialWindowMetrics : defaultInitialWindowMetricsBasedOnPlatform\n  }, /*#__PURE__*/_react[\"default\"].createElement(_useResponsiveQuery.ResponsiveQueryProvider, {\n    disableCSSMediaQueries: !isSSR\n  }, /*#__PURE__*/_react[\"default\"].createElement(_HybridProvider[\"default\"], {\n    colorModeManager: colorModeManager,\n    options: theme.config\n  }, /*#__PURE__*/_react[\"default\"].createElement(_overlays.OverlayProvider, null, /*#__PURE__*/_react[\"default\"].createElement(_Toast.ToastProvider, null, /*#__PURE__*/_react[\"default\"].createElement(InitializeToastRef, null), /*#__PURE__*/_react[\"default\"].createElement(_utils.SSRProvider, null, children)))))));\n};\n\nexports.NativeBaseProvider = NativeBaseProvider;\n\nvar InitializeToastRef = function InitializeToastRef() {\n  var toast = (0, _Toast.useToast)();\n  _Toast.ToastRef.current = toast;\n  return null;\n};","map":{"version":3,"sources":["/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/native-base/lib/commonjs/core/NativeBaseProvider.js"],"names":["Object","value","exports","_react","_interopRequireDefault","require","_reactNativeSafeAreaContext","_utils","_theme","_HybridProvider","_overlays","_Toast","_NativeBaseContext","_utils2","_useResponsiveQuery","obj","default","defaultInitialWindowMetricsBasedOnPlatform","web","frame","x","y","width","height","insets","top","left","right","bottom","initialWindowMetrics","NativeBaseProvider","props","config","theme","propsTheme","disableContrastText","_config$theme","newTheme","windowWidth","_useWindowDimensions","_reactNative","currentBreakpoint","isSSR","initialMetrics","disableCSSMediaQueries","colorModeManager","options","InitializeToastRef","toast"],"mappings":"AAAA;;AAEAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7CD;AAGAE,OAAO,CAAPA,kBAAAA,GAA6B,KAA7BA,CAAAA;;AAEA,IAAIC,MAAM,GAAGC,sBAAsB,CAACC,OAAO,CAA3C,OAA2C,CAAR,CAAnC;;AAEA,IAAIC,2BAA2B,GAAGD,OAAO,CAAzC,gCAAyC,CAAzC;;AAEA,IAAIE,MAAM,GAAGF,OAAO,CAApB,0BAAoB,CAApB;;AAEA,IAAIG,MAAM,GAAGH,OAAO,CAApB,YAAoB,CAApB;;AAEA,IAAII,eAAe,GAAGL,sBAAsB,CAACC,OAAO,CAApD,iCAAoD,CAAR,CAA5C;;AAEA,IAAIK,SAAS,GAAGL,OAAO,CAAvB,6BAAuB,CAAvB;;AAEA,IAAIM,MAAM,GAAGN,OAAO,CAApB,gCAAoB,CAApB;;AAEA,IAAIO,kBAAkB,GAAGP,OAAO,CAAhC,qBAAgC,CAAhC;;;;AAIA,IAAIQ,OAAO,GAAGR,OAAO,CAArB,sBAAqB,CAArB;;AAEA,IAAIS,mBAAmB,GAAGT,OAAO,CAAjC,6BAAiC,CAAjC;;AAEA,SAAA,sBAAA,CAAA,GAAA,EAAqC;EAAE,OAAOU,GAAG,IAAIA,GAAG,CAAVA,UAAAA,GAAAA,GAAAA,GAA8B;IAAEC,WAASD;EAAX,CAArC;EAEvC;AACA;;;AACA,IAAME,0CAA0C,GAAG,YAAY,CAAZ,QAAA,CAAA,MAAA,CAA6B;EAC9EC,GAAG,EAAE;IACHC,KAAK,EAAE;MACLC,CAAC,EADI,CAAA;MAELC,CAAC,EAFI,CAAA;MAGLC,KAAK,EAHA,CAAA;MAILC,MAAM,EAAE;IAJH,CADJ;IAOHC,MAAM,EAAE;MACNC,GAAG,EADG,CAAA;MAENC,IAAI,EAFE,CAAA;MAGNC,KAAK,EAHC,CAAA;MAINC,MAAM,EAAE;IAJF;EAPL,CADyE;EAe9EZ,WAASV,2BAA2B,CAACuB;AAfyC,CAA7B,CAAnD;;AAkBA,IAAMC,kBAAkB,GAAGC,SAArBD,kBAAqBC,CAAAA,KAAK,EAAI;EAClC,IAAA,aAAA,EAAA,oBAAA;;EAEA,IAAM,gBAAN,GAAA,KAAA,CAAM,gBAAN;EAAA,oBAAA,KAAA,CAEEC,MAFF;EAAA,IAEEA,MAFF,8BAEWpB,kBAAkB,CAFvB,aAAN;EAAA,IAAM,QAAN,GAAA,KAAA,CAAM,QAAN;EAAA,mBAAA,KAAA,CAIEqB,KAJF;EAAA,IAISC,UAJT,6BAIsB1B,MAAM,CAJtB,KAAN;EAAA,IAAM,oBAAN,GAAA,KAAA,CAAM,oBAAN;EAAA,IAAM,KAAN,GAAA,KAAA,CAAM,KAAN;EAAA,IAOE2B,mBAPF,GAAA,KAAA,CAOEA,mBAPF;EASA,IAAMF,KAAK,GAAG,CAACG,aAAa,GAAGJ,MAAM,CAAvB,KAAA,MAAA,IAAA,IAA2CI,aAAa,KAAK,KAA7D,CAAA,GAAA,aAAA,GAAd,UAAA;;EAEA,IAAMC,QAAQ,GAAG,MAAA,WAAA,CAAA,OAAA,CAAuB,YAAM;IAC5C,IAAIL,MAAM,CAAV,SAAA,EAAsB;MACpB,OAAO,CAAC,GAAGnB,OAAO,CAAX,0BAAA,EAAP,KAAO,CAAP;IACD;;IAED,OAAA,KAAA;EALe,CAAA,EAMd,CAACmB,MAAM,CAAP,SAAA,EANH,KAMG,CANc,CAAjB;;EAQA,IAAMM,WAAW,GAAG,CAACC,oBAAoB,GAAG,CAAC,GAAGC,YAAY,CAAxC,mBAAwB,GAAxB,MAAA,IAAA,IAA6ED,oBAAoB,KAAK,KAAtG,CAAA,GAA+G,KAA/G,CAAA,GAAwHA,oBAAoB,CAAhK,KAAA;;EAEA,IAAME,iBAAiB,GAAGtC,MAAAA,WAAAA,CAAAA,OAAAA,CAAuB;IAAA,OAAM,CAAC,GAAGU,OAAO,CAAX,oBAAA,EAAkCwB,QAAQ,CAA1C,WAAA,EAA7BlC,WAA6B,CAAN;EAAA,CAAvBA,EAAmG,CAAA,WAAA,EAAckC,QAAQ,CAAnJ,WAA6H,CAAnGlC,CAA1B;;EAEA,OAAO,aAAa,MAAA,WAAA,CAAA,aAAA,CAA6BS,kBAAkB,CAA/C,wBAAA,EAA0E;IAC5FqB,KAAK,EADuF,QAAA;IAE5FD,MAAM,EAFsF,MAAA;IAG5FS,iBAAiB,EAH2E,iBAAA;IAI5FC,KAAK,EAJuF,KAAA;IAK5FP,mBAAmB,EAAEA;EALuE,CAA1E,EAMjB,aAAa,MAAA,WAAA,CAAA,aAAA,CAA6B7B,2BAA2B,CAAxD,gBAAA,EAA2E;IACzFqC,cAAc,EAAEd,oBAAoB,KAApBA,IAAAA,IAAiCA,oBAAoB,KAAK,KAA1DA,CAAAA,GAAAA,oBAAAA,GAA0FZ;EADjB,CAA3E,EAEb,aAAa,MAAA,WAAA,CAAA,aAAA,CAA6BH,mBAAmB,CAAhD,uBAAA,EAA0E;IACxF8B,sBAAsB,EAAE,CAACF;EAD+D,CAA1E,EAEb,aAAa,MAAA,WAAA,CAAA,aAAA,CAA6BjC,eAA7B,WAAA,EAAsD;IACpEoC,gBAAgB,EADoD,gBAAA;IAEpEC,OAAO,EAAEb,KAAK,CAACD;EAFqD,CAAtD,EAGb,aAAa7B,MAAAA,WAAAA,CAAAA,aAAAA,CAA6BO,SAAS,CAAtCP,eAAAA,EAAAA,IAAAA,EAA8D,aAAaA,MAAAA,WAAAA,CAAAA,aAAAA,CAA6BQ,MAAM,CAAnCR,aAAAA,EAAAA,IAAAA,EAAyD,aAAaA,MAAAA,WAAAA,CAAAA,aAAAA,CAAAA,kBAAAA,EAAtEA,IAAsEA,CAAtEA,EAA8H,aAAaA,MAAAA,WAAAA,CAAAA,aAAAA,CAA6BI,MAAM,CAAnCJ,WAAAA,EAAAA,IAAAA,EAbtO,QAasOA,CAA3IA,CAA3EA,CAHA,CAFA,CAFA,CANI,CAApB;AA1BF,CAAA;;AA0CAD,OAAO,CAAPA,kBAAAA,GAAAA,kBAAAA;;AAEA,IAAM6C,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;EAC/B,IAAMC,KAAK,GAAG,CAAC,GAAGrC,MAAM,CAAxB,QAAc,GAAd;EACAA,MAAM,CAANA,QAAAA,CAAAA,OAAAA,GAAAA,KAAAA;EACA,OAAA,IAAA;AAHF,CAAA","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeBaseProvider = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\n\nvar _utils = require(\"@react-native-aria/utils\");\n\nvar _theme = require(\"./../theme\");\n\nvar _HybridProvider = _interopRequireDefault(require(\"./hybrid-overlay/HybridProvider\"));\n\nvar _overlays = require(\"@react-native-aria/overlays\");\n\nvar _Toast = require(\"../components/composites/Toast\");\n\nvar _NativeBaseContext = require(\"./NativeBaseContext\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _utils2 = require(\"../theme/tools/utils\");\n\nvar _useResponsiveQuery = require(\"../utils/useResponsiveQuery\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// For SSR to work, we need to pass initial insets as 0 values on web.\n// https://github.com/th3rdwave/react-native-safe-area-context/issues/132\nconst defaultInitialWindowMetricsBasedOnPlatform = _reactNative.Platform.select({\n  web: {\n    frame: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    },\n    insets: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    }\n  },\n  default: _reactNativeSafeAreaContext.initialWindowMetrics\n});\n\nconst NativeBaseProvider = props => {\n  var _config$theme, _useWindowDimensions;\n\n  const {\n    colorModeManager,\n    config = _NativeBaseContext.defaultConfig,\n    children,\n    theme: propsTheme = _theme.theme,\n    initialWindowMetrics,\n    isSSR,\n    disableContrastText\n  } = props;\n  const theme = (_config$theme = config.theme) !== null && _config$theme !== void 0 ? _config$theme : propsTheme;\n\n  const newTheme = _react.default.useMemo(() => {\n    if (config.enableRem) {\n      return (0, _utils2.platformSpecificSpaceUnits)(theme);\n    }\n\n    return theme;\n  }, [config.enableRem, theme]);\n\n  const windowWidth = (_useWindowDimensions = (0, _reactNative.useWindowDimensions)()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width;\n\n  const currentBreakpoint = _react.default.useMemo(() => (0, _utils2.getClosestBreakpoint)(newTheme.breakpoints, windowWidth), [windowWidth, newTheme.breakpoints]);\n\n  return /*#__PURE__*/_react.default.createElement(_NativeBaseContext.NativeBaseConfigProvider, {\n    theme: newTheme,\n    config: config,\n    currentBreakpoint: currentBreakpoint,\n    isSSR: isSSR,\n    disableContrastText: disableContrastText\n  }, /*#__PURE__*/_react.default.createElement(_reactNativeSafeAreaContext.SafeAreaProvider, {\n    initialMetrics: initialWindowMetrics !== null && initialWindowMetrics !== void 0 ? initialWindowMetrics : defaultInitialWindowMetricsBasedOnPlatform\n  }, /*#__PURE__*/_react.default.createElement(_useResponsiveQuery.ResponsiveQueryProvider, {\n    disableCSSMediaQueries: !isSSR\n  }, /*#__PURE__*/_react.default.createElement(_HybridProvider.default, {\n    colorModeManager: colorModeManager,\n    options: theme.config\n  }, /*#__PURE__*/_react.default.createElement(_overlays.OverlayProvider, null, /*#__PURE__*/_react.default.createElement(_Toast.ToastProvider, null, /*#__PURE__*/_react.default.createElement(InitializeToastRef, null), /*#__PURE__*/_react.default.createElement(_utils.SSRProvider, null, children)))))));\n};\n\nexports.NativeBaseProvider = NativeBaseProvider;\n\nconst InitializeToastRef = () => {\n  const toast = (0, _Toast.useToast)();\n  _Toast.ToastRef.current = toast;\n  return null;\n};\n//# sourceMappingURL=NativeBaseProvider.js.map"]},"metadata":{},"sourceType":"script"}