{"ast":null,"code":"var _toConsumableArray = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray\");\n\nvar _createClass = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/createClass\");\n\nvar _slicedToArray = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _wrapNativeSuper = require(\"/Users/jun/Desktop/dev/react-practice/with-react-native-web-app/node_modules/next/dist/compiled/@babel/runtime/helpers/wrapNativeSuper\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar $83d9f$react = require(\"react\");\n\nvar $83d9f$reactstatelyutils = require(\"@react-stately/utils\");\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      }\n    });\n  });\n  return dest;\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $1adc19da2128bba9$exports = {};\n$parcel$export($1adc19da2128bba9$exports, \"useMultipleSelectionState\", function () {\n  return $1adc19da2128bba9$export$253fe78d46329472;\n});\n\nvar $21c847070f1f9569$export$52baac22726c72bf = /*#__PURE__*/function (_Set) {\n  \"use strict\";\n\n  _inherits($21c847070f1f9569$export$52baac22726c72bf, _Set);\n\n  var _super = _createSuper($21c847070f1f9569$export$52baac22726c72bf);\n\n  function $21c847070f1f9569$export$52baac22726c72bf(keys, anchorKey, currentKey) {\n    var _this;\n\n    _classCallCheck(this, $21c847070f1f9569$export$52baac22726c72bf);\n\n    _this = _super.call(this, keys);\n\n    if (keys instanceof $21c847070f1f9569$export$52baac22726c72bf) {\n      _this.anchorKey = anchorKey || keys.anchorKey;\n      _this.currentKey = currentKey || keys.currentKey;\n    } else {\n      _this.anchorKey = anchorKey;\n      _this.currentKey = currentKey;\n    }\n\n    return _this;\n  }\n\n  return $21c847070f1f9569$export$52baac22726c72bf;\n}( /*#__PURE__*/_wrapNativeSuper(Set));\n\nfunction $1adc19da2128bba9$var$equalSets(setA, setB) {\n  if (setA.size !== setB.size) return false;\n\n  var _iterator = _createForOfIteratorHelper(setA),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n      if (!setB.has(item)) return false;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return true;\n}\n\nfunction $1adc19da2128bba9$export$253fe78d46329472(props) {\n  var _props$selectionMode = props.selectionMode,\n      selectionMode = _props$selectionMode === void 0 ? 'none' : _props$selectionMode,\n      disallowEmptySelection = props.disallowEmptySelection,\n      allowDuplicateSelectionEvents = props.allowDuplicateSelectionEvents,\n      _props$selectionBehav = props.selectionBehavior,\n      selectionBehaviorProp = _props$selectionBehav === void 0 ? 'toggle' : _props$selectionBehav,\n      _props$disabledBehavi = props.disabledBehavior,\n      disabledBehavior = _props$disabledBehavi === void 0 ? 'all' : _props$disabledBehavi; // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n\n  var isFocusedRef = $83d9f$react.useRef(false);\n\n  var _$83d9f$react$useStat = $83d9f$react.useState(false),\n      _$83d9f$react$useStat2 = _slicedToArray(_$83d9f$react$useStat, 2),\n      _setFocused = _$83d9f$react$useStat2[1];\n\n  var focusedKeyRef = $83d9f$react.useRef(null);\n  var childFocusStrategyRef = $83d9f$react.useRef(null);\n\n  var _$83d9f$react$useStat3 = $83d9f$react.useState(null),\n      _$83d9f$react$useStat4 = _slicedToArray(_$83d9f$react$useStat3, 2),\n      _setFocusedKey = _$83d9f$react$useStat4[1];\n\n  var selectedKeysProp = $83d9f$react.useMemo(function () {\n    return $1adc19da2128bba9$var$convertSelection(props.selectedKeys);\n  }, [props.selectedKeys]);\n  var defaultSelectedKeys = $83d9f$react.useMemo(function () {\n    return $1adc19da2128bba9$var$convertSelection(props.defaultSelectedKeys, new $21c847070f1f9569$export$52baac22726c72bf());\n  }, [props.defaultSelectedKeys]);\n\n  var _$83d9f$reactstatelyu = $83d9f$reactstatelyutils.useControlledState(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange),\n      _$83d9f$reactstatelyu2 = _slicedToArray(_$83d9f$reactstatelyu, 2),\n      selectedKeys = _$83d9f$reactstatelyu2[0],\n      _setSelectedKeys = _$83d9f$reactstatelyu2[1];\n\n  var disabledKeysProp = $83d9f$react.useMemo(function () {\n    return props.disabledKeys ? new Set(props.disabledKeys) : new Set();\n  }, [props.disabledKeys]);\n\n  var _$83d9f$react$useStat5 = $83d9f$react.useState(selectionBehaviorProp),\n      _$83d9f$react$useStat6 = _slicedToArray(_$83d9f$react$useStat5, 2),\n      selectionBehavior = _$83d9f$react$useStat6[0],\n      setSelectionBehavior = _$83d9f$react$useStat6[1]; // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n\n\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) setSelectionBehavior('replace'); // If the selectionBehavior prop changes, update the state as well.\n\n  var lastSelectionBehavior = $83d9f$react.useRef(selectionBehaviorProp);\n  $83d9f$react.useEffect(function () {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n  return {\n    selectionMode: selectionMode,\n    disallowEmptySelection: disallowEmptySelection,\n    selectionBehavior: selectionBehavior,\n    setSelectionBehavior: setSelectionBehavior,\n\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n\n    setFocused: function setFocused(f) {\n      isFocusedRef.current = f;\n\n      _setFocused(f);\n    },\n\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n\n    setFocusedKey: function setFocusedKey(k) {\n      var childFocusStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'first';\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n\n      _setFocusedKey(k);\n    },\n    selectedKeys: selectedKeys,\n    setSelectedKeys: function setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !$1adc19da2128bba9$var$equalSets(keys, selectedKeys)) _setSelectedKeys(keys);\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior: disabledBehavior\n  };\n}\n\nfunction $1adc19da2128bba9$var$convertSelection(selection, defaultValue) {\n  if (!selection) return defaultValue;\n  return selection === 'all' ? 'all' : new $21c847070f1f9569$export$52baac22726c72bf(selection);\n}\n\nvar $8112da6fa5bbc322$exports = {};\n$parcel$export($8112da6fa5bbc322$exports, \"SelectionManager\", function () {\n  return $8112da6fa5bbc322$export$6c8a5aaad13c9852;\n});\n\nvar $8112da6fa5bbc322$export$6c8a5aaad13c9852 = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function $8112da6fa5bbc322$export$6c8a5aaad13c9852(collection, state, options) {\n    _classCallCheck(this, $8112da6fa5bbc322$export$6c8a5aaad13c9852);\n\n    this.collection = collection;\n    this.state = state;\n    var ref;\n    this.allowsCellSelection = (ref = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && ref !== void 0 ? ref : false;\n    this._isSelectAll = null;\n  }\n\n  _createClass($8112da6fa5bbc322$export$6c8a5aaad13c9852, [{\n    key: \"selectionMode\",\n    get:\n    /**\n    * The type of selection that is allowed in the collection.\n    */\n    function get() {\n      return this.state.selectionMode;\n    }\n    /**\n    * Whether the collection allows empty selection.\n    */\n\n  }, {\n    key: \"disallowEmptySelection\",\n    get: function get() {\n      return this.state.disallowEmptySelection;\n    }\n    /**\n    * The selection behavior for the collection.\n    */\n\n  }, {\n    key: \"selectionBehavior\",\n    get: function get() {\n      return this.state.selectionBehavior;\n    }\n    /**\n    * Sets the selection behavior for the collection.\n    */\n\n  }, {\n    key: \"setSelectionBehavior\",\n    value: function setSelectionBehavior(selectionBehavior) {\n      this.state.setSelectionBehavior(selectionBehavior);\n    }\n    /**\n    * Whether the collection is currently focused.\n    */\n\n  }, {\n    key: \"isFocused\",\n    get: function get() {\n      return this.state.isFocused;\n    }\n    /**\n    * Sets whether the collection is focused.\n    */\n\n  }, {\n    key: \"setFocused\",\n    value: function setFocused(isFocused) {\n      this.state.setFocused(isFocused);\n    }\n    /**\n    * The current focused key in the collection.\n    */\n\n  }, {\n    key: \"focusedKey\",\n    get: function get() {\n      return this.state.focusedKey;\n    }\n    /** Whether the first or last child of the focused key should receive focus. */\n\n  }, {\n    key: \"childFocusStrategy\",\n    get: function get() {\n      return this.state.childFocusStrategy;\n    }\n    /**\n    * Sets the focused key.\n    */\n\n  }, {\n    key: \"setFocusedKey\",\n    value: function setFocusedKey(key, childFocusStrategy) {\n      this.state.setFocusedKey(key, childFocusStrategy);\n    }\n    /**\n    * The currently selected keys in the collection.\n    */\n\n  }, {\n    key: \"selectedKeys\",\n    get: function get() {\n      return this.state.selectedKeys === 'all' ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;\n    }\n    /**\n    * The raw selection value for the collection.\n    * Either 'all' for select all, or a set of keys.\n    */\n\n  }, {\n    key: \"rawSelection\",\n    get: function get() {\n      return this.state.selectedKeys;\n    }\n    /**\n    * Returns whether a key is selected.\n    */\n\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(key) {\n      if (this.state.selectionMode === 'none') return false;\n      key = this.getKey(key);\n      return this.state.selectedKeys === 'all' ? this.canSelectItem(key) : this.state.selectedKeys.has(key);\n    }\n    /**\n    * Whether the selection is empty.\n    */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n    }\n    /**\n    * Whether all items in the collection are selected.\n    */\n\n  }, {\n    key: \"isSelectAll\",\n    get: function get() {\n      if (this.isEmpty) return false;\n      if (this.state.selectedKeys === 'all') return true;\n      if (this._isSelectAll != null) return this._isSelectAll;\n      var allKeys = this.getSelectAllKeys();\n      var selectedKeys = this.state.selectedKeys;\n      this._isSelectAll = allKeys.every(function (k) {\n        return selectedKeys.has(k);\n      });\n      return this._isSelectAll;\n    }\n  }, {\n    key: \"firstSelectedKey\",\n    get: function get() {\n      var first = null;\n\n      var _iterator2 = _createForOfIteratorHelper(this.state.selectedKeys),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var key = _step2.value;\n          var item = this.collection.getItem(key);\n          if (!first || (item === null || item === void 0 ? void 0 : item.index) < first.index) first = item;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return first === null || first === void 0 ? void 0 : first.key;\n    }\n  }, {\n    key: \"lastSelectedKey\",\n    get: function get() {\n      var last = null;\n\n      var _iterator3 = _createForOfIteratorHelper(this.state.selectedKeys),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var key = _step3.value;\n          var item = this.collection.getItem(key);\n          if (!last || (item === null || item === void 0 ? void 0 : item.index) > last.index) last = item;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return last === null || last === void 0 ? void 0 : last.key;\n    }\n  }, {\n    key: \"disabledKeys\",\n    get: function get() {\n      return this.state.disabledKeys;\n    }\n  }, {\n    key: \"disabledBehavior\",\n    get: function get() {\n      return this.state.disabledBehavior;\n    }\n    /**\n    * Extends the selection to the given key.\n    */\n\n  }, {\n    key: \"extendSelection\",\n    value: function extendSelection(toKey) {\n      if (this.selectionMode === 'none') return;\n\n      if (this.selectionMode === 'single') {\n        this.replaceSelection(toKey);\n        return;\n      }\n\n      toKey = this.getKey(toKey);\n      var selection; // Only select the one key if coming from a select all.\n\n      if (this.state.selectedKeys === 'all') selection = new $21c847070f1f9569$export$52baac22726c72bf([toKey], toKey, toKey);else {\n        var selectedKeys = this.state.selectedKeys;\n        var anchorKey = selectedKeys.anchorKey || toKey;\n        selection = new $21c847070f1f9569$export$52baac22726c72bf(selectedKeys, anchorKey, toKey);\n\n        var _iterator4 = _createForOfIteratorHelper(this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var key = _step4.value;\n            selection[\"delete\"](key);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n\n        var _iterator5 = _createForOfIteratorHelper(this.getKeyRange(toKey, anchorKey)),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var key1 = _step5.value;\n            if (this.canSelectItem(key1)) selection.add(key1);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"getKeyRange\",\n    value: function getKeyRange(from, to) {\n      var fromItem = this.collection.getItem(from);\n      var toItem = this.collection.getItem(to);\n\n      if (fromItem && toItem) {\n        if (fromItem.index <= toItem.index) return this.getKeyRangeInternal(from, to);\n        return this.getKeyRangeInternal(to, from);\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getKeyRangeInternal\",\n    value: function getKeyRangeInternal(from, to) {\n      var keys = [];\n      var key = from;\n\n      while (key) {\n        var item = this.collection.getItem(key);\n        if (item && item.type === 'item' || item.type === 'cell' && this.allowsCellSelection) keys.push(key);\n        if (key === to) return keys;\n        key = this.collection.getKeyAfter(key);\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getKey\",\n    value: function getKey(key) {\n      var item = this.collection.getItem(key);\n      if (!item) // ¯\\_(ツ)_/¯\n        return key; // If cell selection is allowed, just return the key.\n\n      if (item.type === 'cell' && this.allowsCellSelection) return key; // Find a parent item to select\n\n      while (item.type !== 'item' && item.parentKey != null) {\n        item = this.collection.getItem(item.parentKey);\n      }\n\n      if (!item || item.type !== 'item') return null;\n      return item.key;\n    }\n    /**\n    * Toggles whether the given key is selected.\n    */\n\n  }, {\n    key: \"toggleSelection\",\n    value: function toggleSelection(key) {\n      if (this.selectionMode === 'none') return;\n\n      if (this.selectionMode === 'single' && !this.isSelected(key)) {\n        this.replaceSelection(key);\n        return;\n      }\n\n      key = this.getKey(key);\n      if (key == null) return;\n      var keys = new $21c847070f1f9569$export$52baac22726c72bf(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n      if (keys.has(key)) keys[\"delete\"](key);else if (this.canSelectItem(key)) {\n        keys.add(key);\n        keys.anchorKey = key;\n        keys.currentKey = key;\n      }\n      if (this.disallowEmptySelection && keys.size === 0) return;\n      this.state.setSelectedKeys(keys);\n    }\n    /**\n    * Replaces the selection with only the given key.\n    */\n\n  }, {\n    key: \"replaceSelection\",\n    value: function replaceSelection(key) {\n      if (this.selectionMode === 'none') return;\n      key = this.getKey(key);\n      if (key == null) return;\n      var selection = this.canSelectItem(key) ? new $21c847070f1f9569$export$52baac22726c72bf([key], key, key) : new $21c847070f1f9569$export$52baac22726c72bf();\n      this.state.setSelectedKeys(selection);\n    }\n    /**\n    * Replaces the selection with the given keys.\n    */\n\n  }, {\n    key: \"setSelectedKeys\",\n    value: function setSelectedKeys(keys) {\n      if (this.selectionMode === 'none') return;\n      var selection = new $21c847070f1f9569$export$52baac22726c72bf();\n\n      var _iterator6 = _createForOfIteratorHelper(keys),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var key = _step6.value;\n          key = this.getKey(key);\n\n          if (key != null) {\n            selection.add(key);\n            if (this.selectionMode === 'single') break;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"getSelectAllKeys\",\n    value: function getSelectAllKeys() {\n      var _this2 = this;\n\n      var keys = [];\n\n      var addKeys = function addKeys(key) {\n        while (key) {\n          if (_this2.canSelectItem(key)) {\n            var item = _this2.collection.getItem(key);\n\n            if (item.type === 'item') keys.push(key); // Add child keys. If cell selection is allowed, then include item children too.\n\n            if (item.hasChildNodes && (_this2.allowsCellSelection || item.type !== 'item')) addKeys(_toConsumableArray(item.childNodes)[0].key);\n          }\n\n          key = _this2.collection.getKeyAfter(key);\n        }\n      };\n\n      addKeys(this.collection.getFirstKey());\n      return keys;\n    }\n    /**\n    * Selects all items in the collection.\n    */\n\n  }, {\n    key: \"selectAll\",\n    value: function selectAll() {\n      if (this.selectionMode === 'multiple') this.state.setSelectedKeys('all');\n    }\n    /**\n    * Removes all keys from the selection.\n    */\n\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection() {\n      if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) this.state.setSelectedKeys(new $21c847070f1f9569$export$52baac22726c72bf());\n    }\n    /**\n    * Toggles between select all and an empty selection.\n    */\n\n  }, {\n    key: \"toggleSelectAll\",\n    value: function toggleSelectAll() {\n      if (this.isSelectAll) this.clearSelection();else this.selectAll();\n    }\n  }, {\n    key: \"select\",\n    value: function select(key, e) {\n      if (this.selectionMode === 'none') return;\n\n      if (this.selectionMode === 'single') {\n        if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);else this.replaceSelection(key);\n      } else if (this.selectionBehavior === 'toggle' || e && (e.pointerType === 'touch' || e.pointerType === 'virtual')) // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n        this.toggleSelection(key);else this.replaceSelection(key);\n    }\n    /**\n    * Returns whether the current selection is equal to the given selection.\n    */\n\n  }, {\n    key: \"isSelectionEqual\",\n    value: function isSelectionEqual(selection) {\n      if (selection === this.state.selectedKeys) return true; // Check if the set of keys match.\n\n      var selectedKeys = this.selectedKeys;\n      if (selection.size !== selectedKeys.size) return false;\n\n      var _iterator7 = _createForOfIteratorHelper(selection),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var key = _step7.value;\n          if (!selectedKeys.has(key)) return false;\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      var _iterator8 = _createForOfIteratorHelper(selectedKeys),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var key2 = _step8.value;\n          if (!selection.has(key2)) return false;\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      return true;\n    }\n  }, {\n    key: \"canSelectItem\",\n    value: function canSelectItem(key) {\n      if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) return false;\n      var item = this.collection.getItem(key);\n      if (!item || item.type === 'cell' && !this.allowsCellSelection) return false;\n      return true;\n    }\n  }, {\n    key: \"isDisabled\",\n    value: function isDisabled(key) {\n      return this.state.disabledKeys.has(key) && this.state.disabledBehavior === 'all';\n    }\n  }]);\n\n  return $8112da6fa5bbc322$export$6c8a5aaad13c9852;\n}();\n\nvar $85467f818ce6e562$exports = {};\n$parcel$exportWildcard(module.exports, $1adc19da2128bba9$exports);\n$parcel$exportWildcard(module.exports, $8112da6fa5bbc322$exports);\n$parcel$exportWildcard(module.exports, $85467f818ce6e562$exports);","map":{"version":3,"sources":["packages/@react-stately/selection/src/useMultipleSelectionState.ts","packages/@react-stately/selection/src/Selection.ts","packages/@react-stately/selection/src/SelectionManager.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DisabledBehavior, MultipleSelection, SelectionBehavior, SelectionMode} from '@react-types/shared';\nimport {Key, useEffect, useMemo, useRef, useState} from 'react';\nimport {MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\nimport {useControlledState} from '@react-stately/utils';\n\nfunction equalSets(setA, setB) {\n  if (setA.size !== setB.size) {\n    return false;\n  }\n\n  for (let item of setA) {\n    if (!setB.has(item)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport interface MultipleSelectionStateProps extends MultipleSelection {\n  /** How multiple selection should behave in the collection. */\n  selectionBehavior?: SelectionBehavior,\n  /** Whether onSelectionChange should fire even if the new set of keys is the same as the last. */\n  allowDuplicateSelectionEvents?: boolean,\n  /** Whether `disabledKeys` applies to all interactions, or only selection. */\n  disabledBehavior?: DisabledBehavior\n}\n\n/**\n * Manages state for multiple selection and focus in a collection.\n */\nexport function useMultipleSelectionState(props: MultipleSelectionStateProps): MultipleSelectionState {\n  let {\n    selectionMode = 'none' as SelectionMode,\n    disallowEmptySelection,\n    allowDuplicateSelectionEvents,\n    selectionBehavior: selectionBehaviorProp = 'toggle',\n    disabledBehavior = 'all'\n  } = props;\n\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = useRef(false);\n  let [, setFocused] = useState(false);\n  let focusedKeyRef = useRef(null);\n  let childFocusStrategyRef = useRef(null);\n  let [, setFocusedKey] = useState(null);\n  let selectedKeysProp = useMemo(() => convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = useMemo(() => convertSelection(props.defaultSelectedKeys, new Selection()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = useControlledState(\n    selectedKeysProp,\n    defaultSelectedKeys,\n    props.onSelectionChange\n  );\n  let disabledKeysProp = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = useState(selectionBehaviorProp);\n\n  // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) {\n    setSelectionBehavior('replace');\n  }\n\n  // If the selectionBehavior prop changes, update the state as well.\n  let lastSelectionBehavior = useRef(selectionBehaviorProp);\n  useEffect(() => {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n\n  return {\n    selectionMode,\n    disallowEmptySelection,\n    selectionBehavior,\n    setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey(k, childFocusStrategy = 'first') {\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n    selectedKeys,\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !equalSets(keys, selectedKeys)) {\n        setSelectedKeys(keys);\n      }\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior\n  };\n}\n\nfunction convertSelection(selection: 'all' | Iterable<Key>, defaultValue?: Selection): 'all' | Selection {\n  if (!selection) {\n    return defaultValue;\n  }\n\n  return selection === 'all'\n    ? 'all'\n    : new Selection(selection);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\n\n/**\n * A Selection is a special Set containing Keys, which also has an anchor\n * and current selected key for use when range selecting.\n */\nexport class Selection extends Set<Key> {\n  anchorKey: Key;\n  currentKey: Key;\n\n  constructor(keys?: Iterable<Key> | Selection, anchorKey?: Key, currentKey?: Key) {\n    super(keys);\n    if (keys instanceof Selection) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection,\n  DisabledBehavior,\n  FocusStrategy,\n  Selection as ISelection,\n  LongPressEvent,\n  Node,\n  PressEvent,\n  SelectionBehavior,\n  SelectionMode\n} from '@react-types/shared';\nimport {Key} from 'react';\nimport {MultipleSelectionManager, MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\n\ninterface SelectionManagerOptions {\n  allowsCellSelection?: boolean\n}\n\n/**\n * An interface for reading and updating multiple selection state.\n */\nexport class SelectionManager implements MultipleSelectionManager {\n  private collection: Collection<Node<unknown>>;\n  private state: MultipleSelectionState;\n  private allowsCellSelection: boolean;\n  private _isSelectAll: boolean;\n\n  constructor(collection: Collection<Node<unknown>>, state: MultipleSelectionState, options?: SelectionManagerOptions) {\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = options?.allowsCellSelection ?? false;\n    this._isSelectAll = null;\n  }\n\n  /**\n   * The type of selection that is allowed in the collection.\n   */\n  get selectionMode(): SelectionMode {\n    return this.state.selectionMode;\n  }\n\n  /**\n   * Whether the collection allows empty selection.\n   */\n  get disallowEmptySelection(): boolean {\n    return this.state.disallowEmptySelection;\n  }\n\n  /**\n   * The selection behavior for the collection.\n   */\n  get selectionBehavior(): SelectionBehavior {\n    return this.state.selectionBehavior;\n  }\n\n  /**\n   * Sets the selection behavior for the collection.\n   */\n  setSelectionBehavior(selectionBehavior: SelectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n\n  /**\n   * Whether the collection is currently focused.\n   */\n  get isFocused(): boolean {\n    return this.state.isFocused;\n  }\n\n  /**\n   * Sets whether the collection is focused.\n   */\n  setFocused(isFocused: boolean) {\n    this.state.setFocused(isFocused);\n  }\n\n  /**\n   * The current focused key in the collection.\n   */\n  get focusedKey(): Key {\n    return this.state.focusedKey;\n  }\n\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy(): FocusStrategy {\n    return this.state.childFocusStrategy;\n  }\n\n  /**\n   * Sets the focused key.\n   */\n  setFocusedKey(key: Key, childFocusStrategy?: FocusStrategy) {\n    this.state.setFocusedKey(key, childFocusStrategy);\n  }\n\n  /**\n   * The currently selected keys in the collection.\n   */\n  get selectedKeys(): Set<Key> {\n    return this.state.selectedKeys === 'all'\n      ? new Set(this.getSelectAllKeys())\n      : this.state.selectedKeys;\n  }\n\n  /**\n   * The raw selection value for the collection.\n   * Either 'all' for select all, or a set of keys.\n   */\n  get rawSelection(): ISelection {\n    return this.state.selectedKeys;\n  }\n\n  /**\n   * Returns whether a key is selected.\n   */\n  isSelected(key: Key) {\n    if (this.state.selectionMode === 'none') {\n      return false;\n    }\n\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all'\n      ? this.canSelectItem(key)\n      : this.state.selectedKeys.has(key);\n  }\n\n  /**\n   * Whether the selection is empty.\n   */\n  get isEmpty(): boolean {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n\n  /**\n   * Whether all items in the collection are selected.\n   */\n  get isSelectAll(): boolean {\n    if (this.isEmpty) {\n      return false;\n    }\n\n    if (this.state.selectedKeys === 'all') {\n      return true;\n    }\n\n    if (this._isSelectAll != null) {\n      return this._isSelectAll;\n    }\n\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey(): Key | null {\n    let first: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || item?.index < first.index) {\n        first = item;\n      }\n    }\n\n    return first?.key;\n  }\n\n  get lastSelectedKey(): Key | null {\n    let last: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || item?.index > last.index) {\n        last = item;\n      }\n    }\n\n    return last?.key;\n  }\n\n  get disabledKeys(): Set<Key> {\n    return this.state.disabledKeys;\n  }\n\n  get disabledBehavior(): DisabledBehavior {\n    return this.state.disabledBehavior;\n  }\n\n  /**\n   * Extends the selection to the given key.\n   */\n  extendSelection(toKey: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      this.replaceSelection(toKey);\n      return;\n    }\n\n    toKey = this.getKey(toKey);\n\n    let selection: Selection;\n\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === 'all') {\n      selection = new Selection([toKey], toKey, toKey);\n    } else {\n      let selectedKeys = this.state.selectedKeys as Selection;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new Selection(selectedKeys, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) {\n        selection.delete(key);\n      }\n\n      for (let key of this.getKeyRange(toKey, anchorKey)) {\n        if (this.canSelectItem(key)) {\n          selection.add(key);\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getKeyRange(from: Key, to: Key) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (fromItem.index <= toItem.index) {\n        return this.getKeyRangeInternal(from, to);\n      }\n\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  private getKeyRangeInternal(from: Key, to: Key) {\n    let keys: Key[] = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || (item.type === 'cell' && this.allowsCellSelection)) {\n        keys.push(key);\n      }\n\n      if (key === to) {\n        return keys;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  private getKey(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      // ¯\\_(ツ)_/¯\n      return key;\n    }\n\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) {\n      return key;\n    }\n\n    // Find a parent item to select\n    while (item.type !== 'item' && item.parentKey != null) {\n      item = this.collection.getItem(item.parentKey);\n    }\n\n    if (!item || item.type !== 'item') {\n      return null;\n    }\n\n    return item.key;\n  }\n\n  /**\n   * Toggles whether the given key is selected.\n   */\n  toggleSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single' && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let keys = new Selection(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) {\n      keys.delete(key);\n      // TODO: move anchor to last selected key...\n      // Does `current` need to move here too?\n    } else if (this.canSelectItem(key)) {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n\n    if (this.disallowEmptySelection && keys.size === 0) {\n      return;\n    }\n\n    this.state.setSelectedKeys(keys);\n  }\n\n  /**\n   * Replaces the selection with only the given key.\n   */\n  replaceSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let selection = this.canSelectItem(key)\n      ? new Selection([key], key, key)\n      : new Selection();\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  /**\n   * Replaces the selection with the given keys.\n   */\n  setSelectedKeys(keys: Iterable<Key>) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    let selection = new Selection();\n    for (let key of keys) {\n      key = this.getKey(key);\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === 'single') {\n          break;\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getSelectAllKeys() {\n    let keys: Key[] = [];\n    let addKeys = (key: Key) => {\n      while (key) {\n        if (this.canSelectItem(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === 'item') {\n            keys.push(key);\n          }\n\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) {\n            addKeys([...item.childNodes][0].key);\n          }\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n\n  /**\n   * Selects all items in the collection.\n   */\n  selectAll() {\n    if (this.selectionMode === 'multiple') {\n      this.state.setSelectedKeys('all');\n    }\n  }\n\n  /**\n   * Removes all keys from the selection.\n   */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) {\n      this.state.setSelectedKeys(new Selection());\n    }\n  }\n\n  /**\n   * Toggles between select all and an empty selection.\n   */\n  toggleSelectAll() {\n    if (this.isSelectAll) {\n      this.clearSelection();\n    } else {\n      this.selectAll();\n    }\n  }\n\n  select(key: Key, e?: PressEvent | LongPressEvent | PointerEvent) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else if (this.selectionBehavior === 'toggle' || (e && (e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);\n    } else {\n      this.replaceSelection(key);\n    }\n  }\n\n  /**\n   * Returns whether the current selection is equal to the given selection.\n   */\n  isSelectionEqual(selection: Set<Key>) {\n    if (selection === this.state.selectedKeys) {\n      return true;\n    }\n\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) {\n      return false;\n    }\n\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) {\n        return false;\n      }\n    }\n\n    for (let key of selectedKeys) {\n      if (!selection.has(key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  canSelectItem(key: Key) {\n    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) {\n      return false;\n    }\n\n    let item = this.collection.getItem(key);\n    if (!item || (item.type === 'cell' && !this.allowsCellSelection)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isDisabled(key: Key) {\n    return this.state.disabledKeys.has(key) && this.state.disabledBehavior === 'all';\n  }\n}\n"]},"metadata":{},"sourceType":"script"}